!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency A[] =$/;"	m	namespace:cycfi::q::notes
A	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
A0	Q/q_lib/include/q/support/midi.hpp	/^    , A0 = 21$/;"	m	class:cycfi::q::midi::note
A1	Q/q_lib/include/q/support/midi.hpp	/^    , A1 = 33$/;"	m	class:cycfi::q::midi::note
A2	Q/q_lib/include/q/support/midi.hpp	/^    , A2 = 45$/;"	m	class:cycfi::q::midi::note
A3	Q/q_lib/include/q/support/midi.hpp	/^    , A3 = 57$/;"	m	class:cycfi::q::midi::note
A4	Q/q_lib/include/q/support/midi.hpp	/^    , A4 = 69$/;"	m	class:cycfi::q::midi::note
A5	Q/q_lib/include/q/support/midi.hpp	/^    , A5 = 81$/;"	m	class:cycfi::q::midi::note
A6	Q/q_lib/include/q/support/midi.hpp	/^    , A6 = 93$/;"	m	class:cycfi::q::midi::note
A7	Q/q_lib/include/q/support/midi.hpp	/^    , A7 = 105$/;"	m	class:cycfi::q::midi::note
A8	Q/q_lib/include/q/support/midi.hpp	/^    , A8 = 117$/;"	m	class:cycfi::q::midi::note
ALL_TESTS	Q/test/pitch_detector_ex.cpp	/^#define ALL_TESTS /;"	d	file:
AS_4CHARS	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define AS_4CHARS(/;"	d
Ab	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Ab[] =$/;"	m	namespace:cycfi::q::notes
Ab	Q/q_lib/include/q/support/notes.hpp	/^      frequency Ab, Bb, Db, eb, Gb;$/;"	m	struct:cycfi::q::octave_notes
Ab0	Q/q_lib/include/q/support/midi.hpp	/^    , Gs0, Ab0 = Gs0$/;"	m	class:cycfi::q::midi::note
Ab1	Q/q_lib/include/q/support/midi.hpp	/^    , Gs1, Ab1 = Gs1$/;"	m	class:cycfi::q::midi::note
Ab2	Q/q_lib/include/q/support/midi.hpp	/^    , Gs2, Ab2 = Gs2$/;"	m	class:cycfi::q::midi::note
Ab3	Q/q_lib/include/q/support/midi.hpp	/^    , Gs3, Ab3 = Gs3$/;"	m	class:cycfi::q::midi::note
Ab4	Q/q_lib/include/q/support/midi.hpp	/^    , Gs4, Ab4 = Gs4$/;"	m	class:cycfi::q::midi::note
Ab5	Q/q_lib/include/q/support/midi.hpp	/^    , Gs5, Ab5 = Gs5$/;"	m	class:cycfi::q::midi::note
Ab6	Q/q_lib/include/q/support/midi.hpp	/^    , Gs6, Ab6 = Gs6$/;"	m	class:cycfi::q::midi::note
Ab7	Q/q_lib/include/q/support/midi.hpp	/^    , Gs7, Ab7 = Gs7$/;"	m	class:cycfi::q::midi::note
Ab8	Q/q_lib/include/q/support/midi.hpp	/^    , Gs8, Ab8 = Gs8$/;"	m	class:cycfi::q::midi::note
As	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency As[] =$/;"	m	namespace:cycfi::q::notes
As	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
As0	Q/q_lib/include/q/support/midi.hpp	/^    , As0, Bb0 = As0$/;"	m	class:cycfi::q::midi::note
As1	Q/q_lib/include/q/support/midi.hpp	/^    , As1, Bb1 = As1$/;"	m	class:cycfi::q::midi::note
As2	Q/q_lib/include/q/support/midi.hpp	/^    , As2, Bb2 = As2$/;"	m	class:cycfi::q::midi::note
As3	Q/q_lib/include/q/support/midi.hpp	/^    , As3, Bb3 = As3$/;"	m	class:cycfi::q::midi::note
As4	Q/q_lib/include/q/support/midi.hpp	/^    , As4, Bb4 = As4$/;"	m	class:cycfi::q::midi::note
As5	Q/q_lib/include/q/support/midi.hpp	/^    , As5, Bb5 = As5$/;"	m	class:cycfi::q::midi::note
As6	Q/q_lib/include/q/support/midi.hpp	/^    , As6, Bb6 = As6$/;"	m	class:cycfi::q::midi::note
As7	Q/q_lib/include/q/support/midi.hpp	/^    , As7, Bb7 = As7$/;"	m	class:cycfi::q::midi::note
As8	Q/q_lib/include/q/support/midi.hpp	/^    , As8, Bb8 = As8$/;"	m	class:cycfi::q::midi::note
B	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency B[] =$/;"	m	namespace:cycfi::q::notes
B	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
B0	Q/q_lib/include/q/support/midi.hpp	/^    , B0$/;"	m	class:cycfi::q::midi::note
B0	Q/q_lib/include/q/support/midi.hpp	/^# undef B0$/;"	d
B1	Q/q_lib/include/q/support/midi.hpp	/^    , B1$/;"	m	class:cycfi::q::midi::note
B2	Q/q_lib/include/q/support/midi.hpp	/^    , B2$/;"	m	class:cycfi::q::midi::note
B3	Q/q_lib/include/q/support/midi.hpp	/^    , B3$/;"	m	class:cycfi::q::midi::note
B4	Q/q_lib/include/q/support/midi.hpp	/^    , B4$/;"	m	class:cycfi::q::midi::note
B5	Q/q_lib/include/q/support/midi.hpp	/^    , B5$/;"	m	class:cycfi::q::midi::note
B6	Q/q_lib/include/q/support/midi.hpp	/^    , B6$/;"	m	class:cycfi::q::midi::note
B7	Q/q_lib/include/q/support/midi.hpp	/^    , B7$/;"	m	class:cycfi::q::midi::note
B8	Q/q_lib/include/q/support/midi.hpp	/^    , B8$/;"	m	class:cycfi::q::midi::note
Bb	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Bb[] =$/;"	m	namespace:cycfi::q::notes
Bb	Q/q_lib/include/q/support/notes.hpp	/^      frequency Ab, Bb, Db, eb, Gb;$/;"	m	struct:cycfi::q::octave_notes
Bb0	Q/q_lib/include/q/support/midi.hpp	/^    , As0, Bb0 = As0$/;"	m	class:cycfi::q::midi::note
Bb1	Q/q_lib/include/q/support/midi.hpp	/^    , As1, Bb1 = As1$/;"	m	class:cycfi::q::midi::note
Bb2	Q/q_lib/include/q/support/midi.hpp	/^    , As2, Bb2 = As2$/;"	m	class:cycfi::q::midi::note
Bb3	Q/q_lib/include/q/support/midi.hpp	/^    , As3, Bb3 = As3$/;"	m	class:cycfi::q::midi::note
Bb4	Q/q_lib/include/q/support/midi.hpp	/^    , As4, Bb4 = As4$/;"	m	class:cycfi::q::midi::note
Bb5	Q/q_lib/include/q/support/midi.hpp	/^    , As5, Bb5 = As5$/;"	m	class:cycfi::q::midi::note
Bb6	Q/q_lib/include/q/support/midi.hpp	/^    , As6, Bb6 = As6$/;"	m	class:cycfi::q::midi::note
Bb7	Q/q_lib/include/q/support/midi.hpp	/^    , As7, Bb7 = As7$/;"	m	class:cycfi::q::midi::note
Bb8	Q/q_lib/include/q/support/midi.hpp	/^    , As8, Bb8 = As8$/;"	m	class:cycfi::q::midi::note
C	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency C[] =$/;"	m	namespace:cycfi::q::notes
C	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
C0	Q/q_lib/include/q/support/midi.hpp	/^      C0 = 12$/;"	m	class:cycfi::q::midi::note
C1	Q/q_lib/include/q/support/midi.hpp	/^    , C1$/;"	m	class:cycfi::q::midi::note
C2	Q/q_lib/include/q/support/midi.hpp	/^    , C2$/;"	m	class:cycfi::q::midi::note
C3	Q/q_lib/include/q/support/midi.hpp	/^    , C3$/;"	m	class:cycfi::q::midi::note
C4	Q/q_lib/include/q/support/midi.hpp	/^    , C4$/;"	m	class:cycfi::q::midi::note
C5	Q/q_lib/include/q/support/midi.hpp	/^    , C5$/;"	m	class:cycfi::q::midi::note
C6	Q/q_lib/include/q/support/midi.hpp	/^    , C6$/;"	m	class:cycfi::q::midi::note
C7	Q/q_lib/include/q/support/midi.hpp	/^    , C7$/;"	m	class:cycfi::q::midi::note
C8	Q/q_lib/include/q/support/midi.hpp	/^    , C8$/;"	m	class:cycfi::q::midi::note
C9	Q/q_lib/include/q/support/midi.hpp	/^    , C9$/;"	m	class:cycfi::q::midi::note
CATCH_CONFIG_MAIN	Q/test/bitset.cpp	/^#define CATCH_CONFIG_MAIN$/;"	d	file:
CATCH_CONFIG_MAIN	Q/test/decibel.cpp	/^#define CATCH_CONFIG_MAIN$/;"	d	file:
CATCH_CONFIG_MAIN	Q/test/period_detector.cpp	/^#define CATCH_CONFIG_MAIN$/;"	d	file:
CATCH_CONFIG_MAIN	Q/test/pitch_detector.cpp	/^#define CATCH_CONFIG_MAIN$/;"	d	file:
CONSTEXPR	Q/q_lib/include/q/support/notes.hpp	/^# define CONSTEXPR /;"	d
CYCFI_INFINITY_INTERPOLATION_JULY_20_2014	Q/q_lib/include/q/utility/interpolation.hpp	/^#define CYCFI_INFINITY_INTERPOLATION_JULY_20_2014$/;"	d
CYCFI_Q_ALL_PASS_DECEMBER_7_2018	Q/q_lib/include/q/fx/allpass.hpp	/^#define CYCFI_Q_ALL_PASS_DECEMBER_7_2018$/;"	d
CYCFI_Q_ANTIALIASING_HPP_MAY_19_2018	Q/q_lib/include/q/utility/antialiasing.hpp	/^#define CYCFI_Q_ANTIALIASING_HPP_MAY_19_2018$/;"	d
CYCFI_Q_AUDIO_DEVICE_HPP_DECEMBER_1_2018	Q/q_io/include/q_io/audio_device.hpp	/^#define CYCFI_Q_AUDIO_DEVICE_HPP_DECEMBER_1_2018$/;"	d
CYCFI_Q_AUDIO_FILE_HPP_MARCH_28_2018	Q/q_io/include/q_io/audio_file.hpp	/^#define CYCFI_Q_AUDIO_FILE_HPP_MARCH_28_2018$/;"	d
CYCFI_Q_AUDIO_STREAM_OCTOBER_3_2018	Q/q_lib/include/q/support/audio_stream.hpp	/^#define CYCFI_Q_AUDIO_STREAM_OCTOBER_3_2018$/;"	d
CYCFI_Q_AUTO_CORRELATOR_HPP_MARCH_12_2018	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^#define CYCFI_Q_AUTO_CORRELATOR_HPP_MARCH_12_2018$/;"	d
CYCFI_Q_BIQUAD_HPP_FEBRUARY_8_2018	Q/q_lib/include/q/fx/biquad.hpp	/^#define CYCFI_Q_BIQUAD_HPP_FEBRUARY_8_2018$/;"	d
CYCFI_Q_BITSTREAM_HPP_MARCH_12_2018	Q/q_lib/include/q/utility/bitset.hpp	/^#define CYCFI_Q_BITSTREAM_HPP_MARCH_12_2018$/;"	d
CYCFI_Q_BUFFER_JULY_12_2014	Q/q_lib/include/q/utility/ring_buffer.hpp	/^#define CYCFI_Q_BUFFER_JULY_12_2014$/;"	d
CYCFI_Q_COUNT_BITS_HPP_MARCH_12_2018	Q/q_lib/include/q/detail/count_bits.hpp	/^#define CYCFI_Q_COUNT_BITS_HPP_MARCH_12_2018$/;"	d
CYCFI_Q_DB_TABLE_HPP_SEPTEMBER_21_2019	Q/q_lib/include/q/detail/db_table.hpp	/^#define CYCFI_Q_DB_TABLE_HPP_SEPTEMBER_21_2019$/;"	d
CYCFI_Q_DECIBEL_HPP_FEBRUARY_21_2018	Q/q_lib/include/q/support/decibel.hpp	/^#define CYCFI_Q_DECIBEL_HPP_FEBRUARY_21_2018$/;"	d
CYCFI_Q_DELAY_JULY_20_2014	Q/q_lib/include/q/fx/delay.hpp	/^#define CYCFI_Q_DELAY_JULY_20_2014$/;"	d
CYCFI_Q_DYNAMIC_DECEMBER_7_2018	Q/q_lib/include/q/fx/dynamic.hpp	/^#define CYCFI_Q_DYNAMIC_DECEMBER_7_2018$/;"	d
CYCFI_Q_EXP_LOW_PASS_DECEMBER_24_2015	Q/q_lib/include/q/fx/lowpass.hpp	/^#define CYCFI_Q_EXP_LOW_PASS_DECEMBER_24_2015$/;"	d
CYCFI_Q_EXP_MOVING_AVERAGE_DECEMBER_7_2018	Q/q_lib/include/q/fx/moving_average.hpp	/^#define CYCFI_Q_EXP_MOVING_AVERAGE_DECEMBER_7_2018$/;"	d
CYCFI_Q_EXP_MOVING_MAXIMUM_NOVEMBER_6_2019	Q/q_lib/include/q/fx/moving_maximum.hpp	/^#define CYCFI_Q_EXP_MOVING_MAXIMUM_NOVEMBER_6_2019$/;"	d
CYCFI_Q_FEATURE_DETECTION_DECEMBER_7_2018	Q/q_lib/include/q/fx/feature_detection.hpp	/^#define CYCFI_Q_FEATURE_DETECTION_DECEMBER_7_2018$/;"	d
CYCFI_Q_FFT_DECEMBER_25_2018	Q/q_lib/include/q/fft/fft.hpp	/^#define CYCFI_Q_FFT_DECEMBER_25_2018$/;"	d
CYCFI_Q_FRACTIONAL_RING_BUFFER_JULY_22_2014	Q/q_lib/include/q/utility/fractional_ring_buffer.hpp	/^#define CYCFI_Q_FRACTIONAL_RING_BUFFER_JULY_22_2014$/;"	d
CYCFI_Q_FREQUENCY_HPP_FEBRUARY_21_2018	Q/q_lib/include/q/support/frequency.hpp	/^#define CYCFI_Q_FREQUENCY_HPP_FEBRUARY_21_2018$/;"	d
CYCFI_Q_FX_ENVELOPE_HPP_MAY_17_2018	Q/q_lib/include/q/fx/envelope.hpp	/^#define CYCFI_Q_FX_ENVELOPE_HPP_MAY_17_2018$/;"	d
CYCFI_Q_INIT_STORE_JULY_12_2014	Q/q_lib/include/q/detail/init_store.hpp	/^#define CYCFI_Q_INIT_STORE_JULY_12_2014$/;"	d
CYCFI_Q_LITERALS_HPP_FEBRUARY_21_2018	Q/q_lib/include/q/support/literals.hpp	/^#define CYCFI_Q_LITERALS_HPP_FEBRUARY_21_2018$/;"	d
CYCFI_Q_MEDIAN_DECEMBER_7_2018	Q/q_lib/include/q/fx/median.hpp	/^#define CYCFI_Q_MEDIAN_DECEMBER_7_2018$/;"	d
CYCFI_Q_MIDI_DEVICE_HPP_DECEMBER_10_2018	Q/q_io/include/q_io/midi_device.hpp	/^#define CYCFI_Q_MIDI_DEVICE_HPP_DECEMBER_10_2018$/;"	d
CYCFI_Q_MIDI_HPP_OCTOBER_8_2012	Q/q_lib/include/q/support/midi.hpp	/^#define CYCFI_Q_MIDI_HPP_OCTOBER_8_2012$/;"	d
CYCFI_Q_MIDI_STREAM_DECEMBER_12_2018	Q/q_io/include/q_io/midi_stream.hpp	/^#define CYCFI_Q_MIDI_STREAM_DECEMBER_12_2018$/;"	d
CYCFI_Q_NOTES_HPP_APRIL_20_2018	Q/q_lib/include/q/support/notes.hpp	/^#define CYCFI_Q_NOTES_HPP_APRIL_20_2018$/;"	d
CYCFI_Q_ONSET_DETECTOR_NOVEMBER_9_2019	Q/q_lib/include/q/fx/onset_detector.hpp	/^#define CYCFI_Q_ONSET_DETECTOR_NOVEMBER_9_2019$/;"	d
CYCFI_Q_PERIOD_DETECTOR_HPP_MARCH_12_2018	Q/q_lib/include/q/pitch/period_detector.hpp	/^#define CYCFI_Q_PERIOD_DETECTOR_HPP_MARCH_12_2018$/;"	d
CYCFI_Q_PHASE_HPP_MAY_2018	Q/q_lib/include/q/support/phase.hpp	/^#define CYCFI_Q_PHASE_HPP_MAY_2018$/;"	d
CYCFI_Q_PITCH_DETECTOR_HPP_MARCH_12_2018	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^#define CYCFI_Q_PITCH_DETECTOR_HPP_MARCH_12_2018$/;"	d
CYCFI_Q_PORT_AUDIO_STREAM_OCTOBER_3_2018	Q/q_io/include/q_io/audio_stream.hpp	/^#define CYCFI_Q_PORT_AUDIO_STREAM_OCTOBER_3_2018$/;"	d
CYCFI_Q_PULSE_HPP_DECEMBER_24_2015	Q/q_lib/include/q/synth/pulse.hpp	/^#define CYCFI_Q_PULSE_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_SAW_HPP_DECEMBER_24_2015	Q/q_lib/include/q/synth/saw.hpp	/^#define CYCFI_Q_SAW_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_SIN_HPP_DECEMBER_24_2015	Q/q_lib/include/q/synth/sin.hpp	/^#define CYCFI_Q_SIN_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_SIN_TABLE_HPP_JANUARY_27_2015	Q/q_lib/include/q/detail/sin_table.hpp	/^#define CYCFI_Q_SIN_TABLE_HPP_JANUARY_27_2015$/;"	d
CYCFI_Q_SPECIAL_HPP_DECEMBER_24_2015	Q/q_lib/include/q/fx/special.hpp	/^#define CYCFI_Q_SPECIAL_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_SQUARE_HPP_DECEMBER_24_2015	Q/q_lib/include/q/synth/square.hpp	/^#define CYCFI_Q_SQUARE_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_SUPPORT_BASE_HPP_DECEMBER_20_2015	Q/q_lib/include/q/support/base.hpp	/^#define CYCFI_Q_SUPPORT_BASE_HPP_DECEMBER_20_2015$/;"	d
CYCFI_Q_SYNTH_ENVELOPE_HPP_MAY_17_2018	Q/q_lib/include/q/synth/envelope.hpp	/^#define CYCFI_Q_SYNTH_ENVELOPE_HPP_MAY_17_2018$/;"	d
CYCFI_Q_TRIANGLE_HPP_DECEMBER_24_2015	Q/q_lib/include/q/synth/triangle.hpp	/^#define CYCFI_Q_TRIANGLE_HPP_DECEMBER_24_2015$/;"	d
CYCFI_Q_VALUE_HPP_MAY_21_2018	Q/q_lib/include/q/support/value.hpp	/^#define CYCFI_Q_VALUE_HPP_MAY_21_2018$/;"	d
CYCFI_Q_WAVE_SHAPER_DECEMBER_24_2015	Q/q_lib/include/q/fx/waveshaper.hpp	/^#define CYCFI_Q_WAVE_SHAPER_DECEMBER_24_2015$/;"	d
CYCFI_Q_ZERO_CROSSING_HPP_MARCH_12_2018	Q/q_lib/include/q/utility/zero_crossing.hpp	/^#define CYCFI_Q_ZERO_CROSSING_HPP_MARCH_12_2018$/;"	d
Cs	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Cs[] =$/;"	m	namespace:cycfi::q::notes
Cs	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
Cs0	Q/q_lib/include/q/support/midi.hpp	/^    , Cs0, Db0 = Cs0$/;"	m	class:cycfi::q::midi::note
Cs1	Q/q_lib/include/q/support/midi.hpp	/^    , Cs1, Db1 = Cs1$/;"	m	class:cycfi::q::midi::note
Cs2	Q/q_lib/include/q/support/midi.hpp	/^    , Cs2, Db2 = Cs2$/;"	m	class:cycfi::q::midi::note
Cs3	Q/q_lib/include/q/support/midi.hpp	/^    , Cs3, Db3 = Cs3$/;"	m	class:cycfi::q::midi::note
Cs4	Q/q_lib/include/q/support/midi.hpp	/^    , Cs4, Db4 = Cs4$/;"	m	class:cycfi::q::midi::note
Cs5	Q/q_lib/include/q/support/midi.hpp	/^    , Cs5, Db5 = Cs5$/;"	m	class:cycfi::q::midi::note
Cs6	Q/q_lib/include/q/support/midi.hpp	/^    , Cs6, Db6 = Cs6$/;"	m	class:cycfi::q::midi::note
Cs7	Q/q_lib/include/q/support/midi.hpp	/^    , Cs7, Db7 = Cs7$/;"	m	class:cycfi::q::midi::note
Cs8	Q/q_lib/include/q/support/midi.hpp	/^    , Cs8, Db8 = Cs8$/;"	m	class:cycfi::q::midi::note
Cs9	Q/q_lib/include/q/support/midi.hpp	/^    , Cs9, Db9 = Cs9$/;"	m	class:cycfi::q::midi::note
D	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency D[] =$/;"	m	namespace:cycfi::q::notes
D	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
D0	Q/q_lib/include/q/support/midi.hpp	/^    , D0$/;"	m	class:cycfi::q::midi::note
D1	Q/q_lib/include/q/support/midi.hpp	/^    , D1$/;"	m	class:cycfi::q::midi::note
D2	Q/q_lib/include/q/support/midi.hpp	/^    , D2$/;"	m	class:cycfi::q::midi::note
D3	Q/q_lib/include/q/support/midi.hpp	/^    , D3$/;"	m	class:cycfi::q::midi::note
D4	Q/q_lib/include/q/support/midi.hpp	/^    , D4$/;"	m	class:cycfi::q::midi::note
D5	Q/q_lib/include/q/support/midi.hpp	/^    , D5$/;"	m	class:cycfi::q::midi::note
D6	Q/q_lib/include/q/support/midi.hpp	/^    , D6$/;"	m	class:cycfi::q::midi::note
D7	Q/q_lib/include/q/support/midi.hpp	/^    , D7$/;"	m	class:cycfi::q::midi::note
D8	Q/q_lib/include/q/support/midi.hpp	/^    , D8$/;"	m	class:cycfi::q::midi::note
D9	Q/q_lib/include/q/support/midi.hpp	/^    , D9$/;"	m	class:cycfi::q::midi::note
DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN	Q/test/moving_maximum.cpp	/^#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN$/;"	d	file:
DRWAV_ASSERT	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_ASSERT(/;"	d
DRWAV_COPY_MEMORY	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_COPY_MEMORY(/;"	d
DRWAV_FALSE	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_FALSE /;"	d
DRWAV_FREE	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_FREE(/;"	d
DRWAV_INLINE	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_INLINE /;"	d
DRWAV_MALLOC	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_MALLOC(/;"	d
DRWAV_MAX_SIMD_VECTOR_SIZE	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_MAX_SIMD_VECTOR_SIZE /;"	d
DRWAV_REALLOC	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_REALLOC(/;"	d
DRWAV_SIZE_MAX	Q/q_io/external/include/dr_wav.h	/^        #define DRWAV_SIZE_MAX /;"	d
DRWAV_SIZE_MAX	Q/q_io/external/include/dr_wav.h	/^    #define DRWAV_SIZE_MAX /;"	d
DRWAV_TRUE	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_TRUE /;"	d
DRWAV_ZERO_MEMORY	Q/q_io/external/include/dr_wav.h	/^#define DRWAV_ZERO_MEMORY(/;"	d
DR_WAVE_FORMAT_ADPCM	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_ADPCM /;"	d
DR_WAVE_FORMAT_ALAW	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_ALAW /;"	d
DR_WAVE_FORMAT_DVI_ADPCM	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_DVI_ADPCM /;"	d
DR_WAVE_FORMAT_EXTENSIBLE	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_EXTENSIBLE /;"	d
DR_WAVE_FORMAT_IEEE_FLOAT	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_IEEE_FLOAT /;"	d
DR_WAVE_FORMAT_MULAW	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_MULAW /;"	d
DR_WAVE_FORMAT_PCM	Q/q_io/external/include/dr_wav.h	/^#define DR_WAVE_FORMAT_PCM /;"	d
DR_WAV_IMPLEMENTATION	Q/q_io/src/audio_file.cpp	/^#define DR_WAV_IMPLEMENTATION$/;"	d	file:
Db	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Db[] =$/;"	m	namespace:cycfi::q::notes
Db	Q/q_lib/include/q/support/notes.hpp	/^      frequency Ab, Bb, Db, eb, Gb;$/;"	m	struct:cycfi::q::octave_notes
Db0	Q/q_lib/include/q/support/midi.hpp	/^    , Cs0, Db0 = Cs0$/;"	m	class:cycfi::q::midi::note
Db1	Q/q_lib/include/q/support/midi.hpp	/^    , Cs1, Db1 = Cs1$/;"	m	class:cycfi::q::midi::note
Db2	Q/q_lib/include/q/support/midi.hpp	/^    , Cs2, Db2 = Cs2$/;"	m	class:cycfi::q::midi::note
Db3	Q/q_lib/include/q/support/midi.hpp	/^    , Cs3, Db3 = Cs3$/;"	m	class:cycfi::q::midi::note
Db4	Q/q_lib/include/q/support/midi.hpp	/^    , Cs4, Db4 = Cs4$/;"	m	class:cycfi::q::midi::note
Db5	Q/q_lib/include/q/support/midi.hpp	/^    , Cs5, Db5 = Cs5$/;"	m	class:cycfi::q::midi::note
Db6	Q/q_lib/include/q/support/midi.hpp	/^    , Cs6, Db6 = Cs6$/;"	m	class:cycfi::q::midi::note
Db7	Q/q_lib/include/q/support/midi.hpp	/^    , Cs7, Db7 = Cs7$/;"	m	class:cycfi::q::midi::note
Db8	Q/q_lib/include/q/support/midi.hpp	/^    , Cs8, Db8 = Cs8$/;"	m	class:cycfi::q::midi::note
Db9	Q/q_lib/include/q/support/midi.hpp	/^    , Cs9, Db9 = Cs9$/;"	m	class:cycfi::q::midi::note
Ds	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Ds[] =$/;"	m	namespace:cycfi::q::notes
Ds	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
Ds0	Q/q_lib/include/q/support/midi.hpp	/^    , Ds0, Eb0 = Ds0$/;"	m	class:cycfi::q::midi::note
Ds1	Q/q_lib/include/q/support/midi.hpp	/^    , Ds1, Eb1 = Ds1$/;"	m	class:cycfi::q::midi::note
Ds2	Q/q_lib/include/q/support/midi.hpp	/^    , Ds2, Eb2 = Ds2$/;"	m	class:cycfi::q::midi::note
Ds3	Q/q_lib/include/q/support/midi.hpp	/^    , Ds3, Eb3 = Ds3$/;"	m	class:cycfi::q::midi::note
Ds4	Q/q_lib/include/q/support/midi.hpp	/^    , Ds4, Eb4 = Ds4$/;"	m	class:cycfi::q::midi::note
Ds5	Q/q_lib/include/q/support/midi.hpp	/^    , Ds5, Eb5 = Ds5$/;"	m	class:cycfi::q::midi::note
Ds6	Q/q_lib/include/q/support/midi.hpp	/^    , Ds6, Eb6 = Ds6$/;"	m	class:cycfi::q::midi::note
Ds7	Q/q_lib/include/q/support/midi.hpp	/^    , Ds7, Eb7 = Ds7$/;"	m	class:cycfi::q::midi::note
Ds8	Q/q_lib/include/q/support/midi.hpp	/^    , Ds8, Eb8 = Ds8$/;"	m	class:cycfi::q::midi::note
Ds9	Q/q_lib/include/q/support/midi.hpp	/^    , Ds9, Eb9 = Ds9$/;"	m	class:cycfi::q::midi::note
E	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency E[] =$/;"	m	namespace:cycfi::q::notes
E	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
E0	Q/q_lib/include/q/support/midi.hpp	/^    , E0$/;"	m	class:cycfi::q::midi::note
E1	Q/q_lib/include/q/support/midi.hpp	/^    , E1$/;"	m	class:cycfi::q::midi::note
E2	Q/q_lib/include/q/support/midi.hpp	/^    , E2$/;"	m	class:cycfi::q::midi::note
E3	Q/q_lib/include/q/support/midi.hpp	/^    , E3$/;"	m	class:cycfi::q::midi::note
E4	Q/q_lib/include/q/support/midi.hpp	/^    , E4$/;"	m	class:cycfi::q::midi::note
E5	Q/q_lib/include/q/support/midi.hpp	/^    , E5$/;"	m	class:cycfi::q::midi::note
E6	Q/q_lib/include/q/support/midi.hpp	/^    , E6$/;"	m	class:cycfi::q::midi::note
E7	Q/q_lib/include/q/support/midi.hpp	/^    , E7$/;"	m	class:cycfi::q::midi::note
E8	Q/q_lib/include/q/support/midi.hpp	/^    , E8$/;"	m	class:cycfi::q::midi::note
E9	Q/q_lib/include/q/support/midi.hpp	/^    , E9$/;"	m	class:cycfi::q::midi::note
Eb0	Q/q_lib/include/q/support/midi.hpp	/^    , Ds0, Eb0 = Ds0$/;"	m	class:cycfi::q::midi::note
Eb1	Q/q_lib/include/q/support/midi.hpp	/^    , Ds1, Eb1 = Ds1$/;"	m	class:cycfi::q::midi::note
Eb2	Q/q_lib/include/q/support/midi.hpp	/^    , Ds2, Eb2 = Ds2$/;"	m	class:cycfi::q::midi::note
Eb3	Q/q_lib/include/q/support/midi.hpp	/^    , Ds3, Eb3 = Ds3$/;"	m	class:cycfi::q::midi::note
Eb4	Q/q_lib/include/q/support/midi.hpp	/^    , Ds4, Eb4 = Ds4$/;"	m	class:cycfi::q::midi::note
Eb5	Q/q_lib/include/q/support/midi.hpp	/^    , Ds5, Eb5 = Ds5$/;"	m	class:cycfi::q::midi::note
Eb6	Q/q_lib/include/q/support/midi.hpp	/^    , Ds6, Eb6 = Ds6$/;"	m	class:cycfi::q::midi::note
Eb7	Q/q_lib/include/q/support/midi.hpp	/^    , Ds7, Eb7 = Ds7$/;"	m	class:cycfi::q::midi::note
Eb8	Q/q_lib/include/q/support/midi.hpp	/^    , Ds8, Eb8 = Ds8$/;"	m	class:cycfi::q::midi::note
Eb9	Q/q_lib/include/q/support/midi.hpp	/^    , Ds9, Eb9 = Ds9$/;"	m	class:cycfi::q::midi::note
F	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency F[] =$/;"	m	namespace:cycfi::q::notes
F	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
F0	Q/q_lib/include/q/support/midi.hpp	/^    , F0$/;"	m	class:cycfi::q::midi::note
F1	Q/q_lib/include/q/support/midi.hpp	/^    , F1$/;"	m	class:cycfi::q::midi::note
F2	Q/q_lib/include/q/support/midi.hpp	/^    , F2$/;"	m	class:cycfi::q::midi::note
F3	Q/q_lib/include/q/support/midi.hpp	/^    , F3$/;"	m	class:cycfi::q::midi::note
F4	Q/q_lib/include/q/support/midi.hpp	/^    , F4$/;"	m	class:cycfi::q::midi::note
F5	Q/q_lib/include/q/support/midi.hpp	/^    , F5$/;"	m	class:cycfi::q::midi::note
F6	Q/q_lib/include/q/support/midi.hpp	/^    , F6$/;"	m	class:cycfi::q::midi::note
F7	Q/q_lib/include/q/support/midi.hpp	/^    , F7$/;"	m	class:cycfi::q::midi::note
F8	Q/q_lib/include/q/support/midi.hpp	/^    , F8$/;"	m	class:cycfi::q::midi::note
F9	Q/q_lib/include/q/support/midi.hpp	/^    , F9$/;"	m	class:cycfi::q::midi::note
Fs	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Fs[] =$/;"	m	namespace:cycfi::q::notes
Fs	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
Fs0	Q/q_lib/include/q/support/midi.hpp	/^    , Fs0, Gb0 = Fs0$/;"	m	class:cycfi::q::midi::note
Fs1	Q/q_lib/include/q/support/midi.hpp	/^    , Fs1, Gb1 = Fs1$/;"	m	class:cycfi::q::midi::note
Fs2	Q/q_lib/include/q/support/midi.hpp	/^    , Fs2, Gb2 = Fs2$/;"	m	class:cycfi::q::midi::note
Fs3	Q/q_lib/include/q/support/midi.hpp	/^    , Fs3, Gb3 = Fs3$/;"	m	class:cycfi::q::midi::note
Fs4	Q/q_lib/include/q/support/midi.hpp	/^    , Fs4, Gb4 = Fs4$/;"	m	class:cycfi::q::midi::note
Fs5	Q/q_lib/include/q/support/midi.hpp	/^    , Fs5, Gb5 = Fs5$/;"	m	class:cycfi::q::midi::note
Fs6	Q/q_lib/include/q/support/midi.hpp	/^    , Fs6, Gb6 = Fs6$/;"	m	class:cycfi::q::midi::note
Fs7	Q/q_lib/include/q/support/midi.hpp	/^    , Fs7, Gb7 = Fs7$/;"	m	class:cycfi::q::midi::note
Fs8	Q/q_lib/include/q/support/midi.hpp	/^    , Fs8, Gb8 = Fs8$/;"	m	class:cycfi::q::midi::note
Fs9	Q/q_lib/include/q/support/midi.hpp	/^    , Fs9, Gb9 = Fs9$/;"	m	class:cycfi::q::midi::note
G	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency G[] =$/;"	m	namespace:cycfi::q::notes
G	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
G0	Q/q_lib/include/q/support/midi.hpp	/^    , G0$/;"	m	class:cycfi::q::midi::note
G1	Q/q_lib/include/q/support/midi.hpp	/^    , G1$/;"	m	class:cycfi::q::midi::note
G2	Q/q_lib/include/q/support/midi.hpp	/^    , G2$/;"	m	class:cycfi::q::midi::note
G3	Q/q_lib/include/q/support/midi.hpp	/^    , G3$/;"	m	class:cycfi::q::midi::note
G4	Q/q_lib/include/q/support/midi.hpp	/^    , G4$/;"	m	class:cycfi::q::midi::note
G5	Q/q_lib/include/q/support/midi.hpp	/^    , G5$/;"	m	class:cycfi::q::midi::note
G6	Q/q_lib/include/q/support/midi.hpp	/^    , G6$/;"	m	class:cycfi::q::midi::note
G7	Q/q_lib/include/q/support/midi.hpp	/^    , G7$/;"	m	class:cycfi::q::midi::note
G8	Q/q_lib/include/q/support/midi.hpp	/^    , G8$/;"	m	class:cycfi::q::midi::note
Gb	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Gb[] =$/;"	m	namespace:cycfi::q::notes
Gb	Q/q_lib/include/q/support/notes.hpp	/^      frequency Ab, Bb, Db, eb, Gb;$/;"	m	struct:cycfi::q::octave_notes
Gb0	Q/q_lib/include/q/support/midi.hpp	/^    , Fs0, Gb0 = Fs0$/;"	m	class:cycfi::q::midi::note
Gb1	Q/q_lib/include/q/support/midi.hpp	/^    , Fs1, Gb1 = Fs1$/;"	m	class:cycfi::q::midi::note
Gb2	Q/q_lib/include/q/support/midi.hpp	/^    , Fs2, Gb2 = Fs2$/;"	m	class:cycfi::q::midi::note
Gb3	Q/q_lib/include/q/support/midi.hpp	/^    , Fs3, Gb3 = Fs3$/;"	m	class:cycfi::q::midi::note
Gb4	Q/q_lib/include/q/support/midi.hpp	/^    , Fs4, Gb4 = Fs4$/;"	m	class:cycfi::q::midi::note
Gb5	Q/q_lib/include/q/support/midi.hpp	/^    , Fs5, Gb5 = Fs5$/;"	m	class:cycfi::q::midi::note
Gb6	Q/q_lib/include/q/support/midi.hpp	/^    , Fs6, Gb6 = Fs6$/;"	m	class:cycfi::q::midi::note
Gb7	Q/q_lib/include/q/support/midi.hpp	/^    , Fs7, Gb7 = Fs7$/;"	m	class:cycfi::q::midi::note
Gb8	Q/q_lib/include/q/support/midi.hpp	/^    , Fs8, Gb8 = Fs8$/;"	m	class:cycfi::q::midi::note
Gb9	Q/q_lib/include/q/support/midi.hpp	/^    , Fs9, Gb9 = Fs9$/;"	m	class:cycfi::q::midi::note
GetChar	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline char GetChar(T value, size_t index) { return ((char*)&value)[index]; }$/;"	f	namespace:__anon13
Gs	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency Gs[] =$/;"	m	namespace:cycfi::q::notes
Gs	Q/q_lib/include/q/support/notes.hpp	/^      frequency A, As, B, C, Cs, D, Ds, E, F, Fs, G, Gs;$/;"	m	struct:cycfi::q::octave_notes
Gs0	Q/q_lib/include/q/support/midi.hpp	/^    , Gs0, Ab0 = Gs0$/;"	m	class:cycfi::q::midi::note
Gs1	Q/q_lib/include/q/support/midi.hpp	/^    , Gs1, Ab1 = Gs1$/;"	m	class:cycfi::q::midi::note
Gs2	Q/q_lib/include/q/support/midi.hpp	/^    , Gs2, Ab2 = Gs2$/;"	m	class:cycfi::q::midi::note
Gs3	Q/q_lib/include/q/support/midi.hpp	/^    , Gs3, Ab3 = Gs3$/;"	m	class:cycfi::q::midi::note
Gs4	Q/q_lib/include/q/support/midi.hpp	/^    , Gs4, Ab4 = Gs4$/;"	m	class:cycfi::q::midi::note
Gs5	Q/q_lib/include/q/support/midi.hpp	/^    , Gs5, Ab5 = Gs5$/;"	m	class:cycfi::q::midi::note
Gs6	Q/q_lib/include/q/support/midi.hpp	/^    , Gs6, Ab6 = Gs6$/;"	m	class:cycfi::q::midi::note
Gs7	Q/q_lib/include/q/support/midi.hpp	/^    , Gs7, Ab7 = Gs7$/;"	m	class:cycfi::q::midi::note
Gs8	Q/q_lib/include/q/support/midi.hpp	/^    , Gs8, Ab8 = Gs8$/;"	m	class:cycfi::q::midi::note
LOW_FREQUENCY_TESTS	Q/test/pitch_detector_ex.cpp	/^#define LOW_FREQUENCY_TESTS /;"	d	file:
MY_PLUGIN_H	MyPlugin.h	/^#define MY_PLUGIN_H$/;"	d
MyPlugin	MyPlugin.cpp	/^MyPlugin::MyPlugin(float inputSampleRate) :$/;"	f	class:MyPlugin
MyPlugin	MyPlugin.h	/^class MyPlugin : public Vamp::Plugin$/;"	c
PHRASE_TESTS	Q/test/pitch_detector_ex.cpp	/^#define PHRASE_TESTS /;"	d	file:
STACCATO_TESTS	Q/test/pitch_detector_ex.cpp	/^#define STACCATO_TESTS /;"	d	file:
_12th_root	Q/q_lib/include/q/support/notes.hpp	/^   constexpr auto _12th_root = 1.059463094359295;$/;"	m	namespace:cycfi::q
_1st_level	Q/test/period_detector.cpp	/^   float _1st_level = 0.3f;      \/\/ Fundamental level$/;"	m	struct:params	file:
_1st_level	Q/test/pitch_detector.cpp	/^   float _1st_level = 0.3f;      \/\/ Fundamental level$/;"	m	struct:params	file:
_1st_offset	Q/test/period_detector.cpp	/^   float _1st_offset = 0.0f;     \/\/ Fundamental phase offset$/;"	m	struct:params	file:
_1st_offset	Q/test/pitch_detector.cpp	/^   float _1st_offset = 0.0f;     \/\/ Fundamental phase offset$/;"	m	struct:params	file:
_2nd_harmonic	Q/test/period_detector.cpp	/^   float _2nd_harmonic = 2.0f;   \/\/ Second harmonic multiple$/;"	m	struct:params	file:
_2nd_harmonic	Q/test/pitch_detector.cpp	/^   float _2nd_harmonic = 2.0f;   \/\/ Second harmonic multiple$/;"	m	struct:params	file:
_2nd_level	Q/test/period_detector.cpp	/^   float _2nd_level = 0.4f;      \/\/ Second harmonic level$/;"	m	struct:params	file:
_2nd_level	Q/test/pitch_detector.cpp	/^   float _2nd_level = 0.4f;      \/\/ Second harmonic level$/;"	m	struct:params	file:
_2nd_offset	Q/test/period_detector.cpp	/^   float _2nd_offset = 0.0f;     \/\/ Second harmonic phase offset$/;"	m	struct:params	file:
_2nd_offset	Q/test/pitch_detector.cpp	/^   float _2nd_offset = 0.0f;     \/\/ Second harmonic phase offset$/;"	m	struct:params	file:
_3rd_harmonic	Q/test/period_detector.cpp	/^   float _3rd_harmonic = 3.0f;   \/\/ Second harmonic multiple$/;"	m	struct:params	file:
_3rd_harmonic	Q/test/pitch_detector.cpp	/^   float _3rd_harmonic = 3.0f;   \/\/ Second harmonic multiple$/;"	m	struct:params	file:
_3rd_level	Q/test/period_detector.cpp	/^   float _3rd_level = 0.3f;      \/\/ Third harmonic level$/;"	m	struct:params	file:
_3rd_level	Q/test/pitch_detector.cpp	/^   float _3rd_level = 0.3f;      \/\/ Third harmonic level$/;"	m	struct:params	file:
_3rd_offset	Q/test/period_detector.cpp	/^   float _3rd_offset = 0.0f;     \/\/ Third harmonic phase offset$/;"	m	struct:params	file:
_3rd_offset	Q/test/pitch_detector.cpp	/^   float _3rd_offset = 0.0f;     \/\/ Third harmonic phase offset$/;"	m	struct:params	file:
_Hz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _Hz(long double val)$/;"	f	namespace:cycfi::q::literals
_Hz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _Hz(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_KHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _KHz(long double val)$/;"	f	namespace:cycfi::q::literals
_KHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _KHz(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_MHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _MHz(long double val)$/;"	f	namespace:cycfi::q::literals
_MHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _MHz(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_MM_SETR_EPI32	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define _MM_SETR_EPI32(/;"	d
__FAST_ERF_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_ERF_H_$/;"	d
__FAST_EXP_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_EXP_H_$/;"	d
__FAST_GAMMA_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_GAMMA_H_$/;"	d
__FAST_HYPERBOLIC_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_HYPERBOLIC_H_$/;"	d
__FAST_LAMBERT_W_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_LAMBERT_W_H_$/;"	d
__FAST_LOG_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_LOG_H_$/;"	d
__FAST_POW_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_POW_H_$/;"	d
__FAST_SIGMOID_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_SIGMOID_H_$/;"	d
__FAST_TRIG_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __FAST_TRIG_H_$/;"	d
__SSE_H_	Q/q_lib/include/q/detail/fast_math.hpp	/^#define __SSE_H_$/;"	d
_attack	Q/q_lib/include/q/fx/envelope.hpp	/^      float y = 0.0f, _attack, _release;$/;"	m	struct:cycfi::q::envelope_follower
_attack_rate	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _attack_rate;$/;"	m	class:cycfi::q::envelope
_auto_decay	Q/q_lib/include/q/synth/envelope.hpp	/^      int                     _auto_decay = 1;$/;"	m	class:cycfi::q::envelope
_bits	Q/q_lib/include/q/pitch/period_detector.hpp	/^      bitset<>                _bits;$/;"	m	class:cycfi::q::period_detector
_bits	Q/q_lib/include/q/utility/bitset.hpp	/^      vector_type    _bits;$/;"	m	class:cycfi::q::bitset
_bits	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^      bitset<T> const&     _bits;$/;"	m	struct:cycfi::q::bitstream_acf
_buff	Q/q_io/include/q_io/audio_file.hpp	/^      storage        _buff;$/;"	m	class:cycfi::q::wav_memory
_buffers	Q/q_lib/include/q/support/audio_stream.hpp	/^      T**                  _buffers;$/;"	m	class:cycfi::q::audio_channels
_cmp	Q/q_lib/include/q/fx/feature_detection.hpp	/^      schmitt_trigger   _cmp;$/;"	m	struct:cycfi::q::peak
_cmp	Q/q_lib/include/q/fx/feature_detection.hpp	/^      schmitt_trigger   _cmp;$/;"	m	struct:cycfi::q::zero_cross
_comp	Q/q_lib/include/q/fx/onset_detector.hpp	/^      compressor              _comp;$/;"	m	struct:cycfi::q::onset_detector
_comp_env	Q/q_lib/include/q/fx/onset_detector.hpp	/^      envelope_follower       _comp_env;$/;"	m	struct:cycfi::q::onset_detector
_crossing	Q/q_lib/include/q/utility/zero_crossing.hpp	/^         crossing_data     _crossing;$/;"	m	struct:cycfi::q::zero_crossing::info
_d	Q/q_lib/include/q/fx/special.hpp	/^      delay2 _d;$/;"	m	struct:cycfi::q::central_difference
_d1	Q/q_lib/include/q/fx/delay.hpp	/^      delay1 _d1, _d2;$/;"	m	struct:cycfi::q::delay2
_d2	Q/q_lib/include/q/fx/delay.hpp	/^      delay1 _d1, _d2;$/;"	m	struct:cycfi::q::delay2
_dB	Q/q_lib/include/q/support/literals.hpp	/^      constexpr decibel operator "" _dB(long double val)$/;"	f	namespace:cycfi::q::literals
_dB	Q/q_lib/include/q/support/literals.hpp	/^      constexpr decibel operator "" _dB(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_data	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      std::vector<T> _data;         \/\/ the big array (twice array_size);$/;"	m	struct:cycfi::q::moving_maximum
_data	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      Storage           _data;$/;"	m	class:cycfi::q::ring_buffer
_decay_rate	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _decay_rate;$/;"	m	class:cycfi::q::envelope
_default_sample_rate	Q/q_io/src/audio_device.cpp	/^      std::size_t    _default_sample_rate;$/;"	m	struct:cycfi::q::audio_device::impl	file:
_delay	Q/example/delay.cpp	/^   q::delay          _delay;$/;"	m	struct:delay_processor	file:
_diff1	Q/q_lib/include/q/fx/onset_detector.hpp	/^      central_difference      _diff1;$/;"	m	struct:cycfi::q::onset_detector
_diff2	Q/q_lib/include/q/fx/onset_detector.hpp	/^      differentiator          _diff2;$/;"	m	struct:cycfi::q::onset_detector
_direct	Q/q_lib/include/q/support/decibel.hpp	/^      struct _direct {};$/;"	s	struct:cycfi::q::decibel
_dly	Q/q_lib/include/q/fx/special.hpp	/^      delay1            _dly;$/;"	m	struct:cycfi::q::hilbert_quadrature
_edge_mark	Q/q_lib/include/q/pitch/period_detector.hpp	/^      std::size_t             _edge_mark = 0;$/;"	m	class:cycfi::q::period_detector
_end_note_off_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _end_note_off_level = 0.0f;$/;"	m	class:cycfi::q::envelope
_error	Q/q_io/include/q_io/audio_stream.hpp	/^      char const*             _error;$/;"	m	class:cycfi::q::port_audio_stream
_f	Q/q_lib/include/q/fx/lowpass.hpp	/^      float _f, _fb, _reso;$/;"	m	struct:cycfi::q::reso_filter
_fb	Q/q_lib/include/q/fx/lowpass.hpp	/^      float _f, _fb, _reso;$/;"	m	struct:cycfi::q::reso_filter
_feedback	Q/example/delay.cpp	/^   float             _feedback;$/;"	m	struct:delay_processor	file:
_frame	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      std::size_t          _frame = 0;$/;"	m	class:cycfi::q::zero_crossing
_frames	Q/q_lib/include/q/support/audio_stream.hpp	/^      std::size_t          _frames;$/;"	m	class:cycfi::q::audio_channels
_frames_after_onset	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      std::size_t             _frames_after_onset = 0;$/;"	m	class:cycfi::q::pitch_detector
_frequency	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      exp_moving_average_type _frequency;$/;"	m	class:cycfi::q::pitch_detector
_fundamental	Q/q_lib/include/q/pitch/period_detector.hpp	/^         info                    _fundamental;$/;"	m	struct:cycfi::q::detail::collector
_fundamental	Q/q_lib/include/q/pitch/period_detector.hpp	/^      info                    _fundamental;$/;"	m	class:cycfi::q::period_detector
_gain	Q/q_lib/include/q/fx/special.hpp	/^      float _gain;      \/\/ gain$/;"	m	struct:cycfi::q::integrator
_harmonic	Q/q_lib/include/q/pitch/period_detector.hpp	/^            std::size_t       _harmonic;$/;"	m	struct:cycfi::q::detail::collector::info
_harmonic_threshold	Q/q_lib/include/q/pitch/period_detector.hpp	/^         float const             _harmonic_threshold;$/;"	m	struct:cycfi::q::detail::collector
_high	Q/q_lib/include/q/fx/feature_detection.hpp	/^      float _low, _high;$/;"	m	struct:cycfi::q::window_comparator
_hysteresis	Q/q_lib/include/q/fx/feature_detection.hpp	/^      float const _hysteresis;$/;"	m	struct:cycfi::q::schmitt_trigger
_hysteresis	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      float const          _hysteresis;$/;"	m	class:cycfi::q::zero_crossing
_i	Q/q_lib/include/q/fx/envelope.hpp	/^      std::uint16_t _tick = 0, _i = 0;$/;"	m	struct:cycfi::q::fast_envelope_follower
_i1	Q/q_lib/include/q/pitch/period_detector.hpp	/^            int               _i1 = -1;$/;"	m	struct:cycfi::q::detail::collector::info
_i2	Q/q_lib/include/q/pitch/period_detector.hpp	/^            int               _i2 = -1;$/;"	m	struct:cycfi::q::detail::collector::info
_id	Q/q_io/src/audio_device.cpp	/^      uint32_t       _id;$/;"	m	struct:cycfi::q::audio_device::impl	file:
_id	Q/q_io/src/midi_device.cpp	/^      uint32_t       _id;$/;"	m	struct:cycfi::q::midi_device::impl	file:
_impl	Q/q_io/include/q_io/audio_device.hpp	/^      impl const&                _impl;$/;"	m	class:cycfi::q::audio_device
_impl	Q/q_io/include/q_io/audio_stream.hpp	/^      struct impl*            _impl;$/;"	m	class:cycfi::q::port_audio_stream	typeref:struct:cycfi::q::port_audio_stream::impl
_impl	Q/q_io/include/q_io/midi_device.hpp	/^      impl const&                _impl;$/;"	m	class:cycfi::q::midi_device
_impl	Q/q_io/include/q_io/midi_stream.hpp	/^      impl*                _impl;$/;"	m	class:cycfi::q::midi_input_stream
_incr	Q/q_lib/include/q/support/phase.hpp	/^      phase                         _phase, _incr;$/;"	m	struct:cycfi::q::phase_iterator
_info	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      info_storage         _info;$/;"	m	class:cycfi::q::zero_crossing
_input_channels	Q/q_io/include/q_io/audio_stream.hpp	/^      std::size_t             _input_channels;$/;"	m	class:cycfi::q::port_audio_stream
_input_channels	Q/q_io/src/audio_device.cpp	/^      std::size_t    _input_channels;$/;"	m	struct:cycfi::q::audio_device::impl	file:
_input_index	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      std::size_t    _input_index;  \/\/ the actual sample placement is at (array_size + input_index);$/;"	m	struct:cycfi::q::moving_maximum
_kHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _kHz(long double val)$/;"	f	namespace:cycfi::q::literals
_kHz	Q/q_lib/include/q/support/literals.hpp	/^      constexpr frequency operator "" _kHz(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_key	Q/example/square_synth.cpp	/^   std::uint8_t      _key;$/;"	m	struct:my_midi_processor	file:
_latest	Q/q_lib/include/q/fx/envelope.hpp	/^      float _y1 = 0, _y2 = 0, _latest = 0;$/;"	m	struct:cycfi::q::fast_envelope_follower
_leading_edge	Q/q_lib/include/q/utility/zero_crossing.hpp	/^         int               _leading_edge = undefined_edge;$/;"	m	struct:cycfi::q::zero_crossing::info
_legato_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _legato_level;$/;"	m	class:cycfi::q::envelope
_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _level;$/;"	m	class:cycfi::q::envelope
_low	Q/q_lib/include/q/fx/feature_detection.hpp	/^      float _low, _high;$/;"	m	struct:cycfi::q::window_comparator
_lower	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold, _width, _lower, _upper;$/;"	m	struct:cycfi::q::soft_knee_compressor
_mask	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      std::size_t	      _mask;$/;"	m	class:cycfi::q::ring_buffer
_max	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _max;$/;"	m	struct:cycfi::q::agc
_max	Q/q_lib/include/q/fx/waveshaper.hpp	/^      float _max;$/;"	m	struct:cycfi::q::clip
_median	Q/q_lib/include/q/fx/median.hpp	/^      float _median = 0.0f;$/;"	m	struct:cycfi::q::median3
_median	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      median3                 _median;$/;"	m	class:cycfi::q::pitch_detector
_mid_array	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^      std::size_t const    _mid_array;$/;"	m	class:cycfi::q::bitstream_acf::std
_mid_point	Q/q_lib/include/q/pitch/period_detector.hpp	/^      std::size_t const       _mid_point;$/;"	m	class:cycfi::q::period_detector::std
_min_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^      std::size_t const       _min_period;$/;"	m	class:cycfi::q::period_detector::std
_ms	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _ms(long double val)$/;"	f	namespace:cycfi::q::literals
_ms	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _ms(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_n_samples	Q/q_lib/include/q/fx/special.hpp	/^      std::uint32_t  _n_samples;$/;"	m	struct:cycfi::q::monostable
_name	Q/q_io/src/audio_device.cpp	/^      std::string    _name;$/;"	m	struct:cycfi::q::audio_device::impl	file:
_name	Q/q_io/src/midi_device.cpp	/^      std::string    _name;$/;"	m	struct:cycfi::q::midi_device::impl	file:
_neg_env	Q/q_lib/include/q/fx/onset_detector.hpp	/^      peak_envelope_follower  _pos_env, _neg_env;$/;"	m	struct:cycfi::q::onset_detector
_note_off_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _note_off_level = 0.0f;$/;"	m	class:cycfi::q::envelope
_num_edges	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      std::size_t          _num_edges = 0;$/;"	m	class:cycfi::q::zero_crossing
_num_inputs	Q/q_io/src/midi_device.cpp	/^      std::size_t    _num_inputs;$/;"	m	struct:cycfi::q::midi_device::impl	file:
_num_outputs	Q/q_io/src/midi_device.cpp	/^      std::size_t    _num_outputs;$/;"	m	struct:cycfi::q::midi_device::impl	file:
_offset	Q/test/period_detector.cpp	/^   float _offset = 0.0f;         \/\/ Waveform offset$/;"	m	struct:params	file:
_offset	Q/test/pitch_detector.cpp	/^   float _offset = 0.0f;         \/\/ Waveform offset$/;"	m	struct:params	file:
_output_channels	Q/q_io/include/q_io/audio_stream.hpp	/^      std::size_t             _output_channels;$/;"	m	class:cycfi::q::port_audio_stream
_output_channels	Q/q_io/src/audio_device.cpp	/^      std::size_t    _output_channels;$/;"	m	struct:cycfi::q::audio_device::impl	file:
_peak	Q/q_lib/include/q/utility/zero_crossing.hpp	/^         float             _peak;$/;"	m	struct:cycfi::q::zero_crossing::info
_peak	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      float                _peak = 0.0f;$/;"	m	class:cycfi::q::zero_crossing
_peak_update	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      float                _peak_update = 0.0f;$/;"	m	class:cycfi::q::zero_crossing
_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^            int               _period = -1;$/;"	m	struct:cycfi::q::detail::collector::info
_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^         float                _period = -1;$/;"	m	struct:cycfi::q::period_detector::info
_periodicity	Q/q_lib/include/q/pitch/period_detector.hpp	/^            float             _periodicity = 0.0f;$/;"	m	struct:cycfi::q::detail::collector::info
_periodicity	Q/q_lib/include/q/pitch/period_detector.hpp	/^         float                _periodicity = 0.0f;$/;"	m	struct:cycfi::q::period_detector::info
_periodicity_diff_threshold	Q/q_lib/include/q/pitch/period_detector.hpp	/^         float const             _periodicity_diff_threshold;$/;"	m	struct:cycfi::q::detail::collector
_periodicity_diff_threshold	Q/q_lib/include/q/pitch/period_detector.hpp	/^      float const             _periodicity_diff_threshold;$/;"	m	class:cycfi::q::period_detector
_phase	Q/q_lib/include/q/support/phase.hpp	/^      phase                         _phase, _incr;$/;"	m	struct:cycfi::q::phase_iterator
_pi	Q/q_lib/include/q/support/literals.hpp	/^      constexpr long double operator "" _pi(long double val)$/;"	f	namespace:cycfi::q::literals
_pi	Q/q_lib/include/q/support/literals.hpp	/^      constexpr long double operator "" _pi(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_pivot	Q/q_lib/include/q/fx/special.hpp	/^      decibel  _pivot;$/;"	m	struct:cycfi::q::crossfade
_pole	Q/q_lib/include/q/fx/special.hpp	/^      float _pole;      \/\/ pole$/;"	m	struct:cycfi::q::dc_block
_pos	Q/q_io/include/q_io/audio_file.hpp	/^      iterator       _pos;$/;"	m	class:cycfi::q::wav_memory
_pos	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      std::size_t       _pos;$/;"	m	class:cycfi::q::ring_buffer
_pos_env	Q/q_lib/include/q/fx/onset_detector.hpp	/^      peak_envelope_follower  _pos_env, _neg_env;$/;"	m	struct:cycfi::q::onset_detector
_predict_edge	Q/q_lib/include/q/pitch/period_detector.hpp	/^      mutable std::size_t     _predict_edge = 0;$/;"	m	class:cycfi::q::period_detector
_predicted_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^      mutable float           _predicted_period = -1.0f;$/;"	m	class:cycfi::q::period_detector
_prev	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      float                _prev = 0.0f;$/;"	m	class:cycfi::q::zero_crossing
_range	Q/q_lib/include/q/pitch/period_detector.hpp	/^         int const               _range;$/;"	m	struct:cycfi::q::detail::collector
_range	Q/q_lib/include/q/pitch/period_detector.hpp	/^      int                     _range;$/;"	m	class:cycfi::q::period_detector
_ready	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      bool                 _ready = false;$/;"	m	class:cycfi::q::zero_crossing
_release	Q/q_lib/include/q/fx/envelope.hpp	/^      float y = 0.0f, _attack, _release;$/;"	m	struct:cycfi::q::envelope_follower
_release	Q/q_lib/include/q/fx/envelope.hpp	/^      float y = 0.0f, _release;$/;"	m	struct:cycfi::q::peak_envelope_follower
_release_rate	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _release_rate;$/;"	m	class:cycfi::q::envelope
_reset	Q/q_lib/include/q/fx/envelope.hpp	/^      std::uint16_t const _reset;$/;"	m	class:cycfi::q::fast_envelope_follower::std
_reso	Q/q_lib/include/q/fx/lowpass.hpp	/^      float _f, _fb, _reso;$/;"	m	struct:cycfi::q::reso_filter
_s	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _s(long double val)$/;"	f	namespace:cycfi::q::literals
_s	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _s(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_sensitivity	Q/q_lib/include/q/fx/feature_detection.hpp	/^      float const       _sensitivity;$/;"	m	struct:cycfi::q::peak
_shift	Q/q_lib/include/q/synth/pulse.hpp	/^      phase _shift;$/;"	m	struct:cycfi::q::basic_pulse_synth
_size	Q/q_lib/include/q/fx/moving_average.hpp	/^      std::size_t _size;$/;"	m	struct:cycfi::q::moving_average
_size	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      std::size_t    _size;         \/\/ window size$/;"	m	struct:cycfi::q::moving_maximum
_size	Q/q_lib/include/q/support/audio_stream.hpp	/^      std::size_t          _size;$/;"	m	class:cycfi::q::audio_channels
_slope	Q/q_lib/include/q/fx/dynamic.hpp	/^      float    _slope;$/;"	m	struct:cycfi::q::compressor
_slope	Q/q_lib/include/q/fx/dynamic.hpp	/^      float    _slope;$/;"	m	struct:cycfi::q::expander
_slope	Q/q_lib/include/q/fx/dynamic.hpp	/^      float    _slope;$/;"	m	struct:cycfi::q::soft_knee_compressor
_slow_env	Q/q_lib/include/q/fx/onset_detector.hpp	/^      envelope_follower       _slow_env;$/;"	m	struct:cycfi::q::onset_detector
_sps	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      std::uint32_t           _sps;$/;"	m	class:cycfi::q::pitch_detector
_start_sustain_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _start_sustain_level;$/;"	m	class:cycfi::q::envelope
_state	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool              _state = 0;$/;"	m	struct:cycfi::q::zero_cross
_state	Q/q_lib/include/q/fx/special.hpp	/^      bool _state = 0;$/;"	m	struct:cycfi::q::rising_edge
_state	Q/q_lib/include/q/synth/envelope.hpp	/^      state_enum              _state = note_off_state;$/;"	m	class:cycfi::q::envelope
_state	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      bool                 _state = false;$/;"	m	class:cycfi::q::zero_crossing
_sum	Q/q_lib/include/q/fx/moving_average.hpp	/^      accumulator _sum = 0;$/;"	m	struct:cycfi::q::moving_average
_sustain_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _sustain_level;$/;"	m	class:cycfi::q::envelope
_sustain_rate	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _sustain_rate;$/;"	m	class:cycfi::q::envelope
_synth	Q/example/square_synth.cpp	/^   my_square_synth&  _synth;$/;"	m	struct:my_midi_processor	file:
_threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold, _width, _lower, _upper;$/;"	m	struct:cycfi::q::soft_knee_compressor
_threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold;$/;"	m	struct:cycfi::q::compressor
_threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold;$/;"	m	struct:cycfi::q::expander
_tick	Q/q_lib/include/q/fx/envelope.hpp	/^      std::uint16_t _tick = 0, _i = 0;$/;"	m	struct:cycfi::q::fast_envelope_follower
_ticks	Q/q_lib/include/q/fx/special.hpp	/^      std::uint32_t  _ticks = 0;$/;"	m	struct:cycfi::q::monostable
_trailing_edge	Q/q_lib/include/q/utility/zero_crossing.hpp	/^         int               _trailing_edge = undefined_edge;$/;"	m	struct:cycfi::q::zero_crossing::info
_trigger	Q/q_lib/include/q/fx/onset_detector.hpp	/^      schmitt_trigger         _trigger;$/;"	m	struct:cycfi::q::onset_detector
_upper	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold, _width, _lower, _upper;$/;"	m	struct:cycfi::q::soft_knee_compressor
_us	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _us(long double val)$/;"	f	namespace:cycfi::q::literals
_us	Q/q_lib/include/q/support/literals.hpp	/^      constexpr duration operator "" _us(unsigned long long int val)$/;"	f	namespace:cycfi::q::literals
_wav	Q/example/delay.cpp	/^   q::wav_memory&    _wav;$/;"	m	struct:delay_processor	file:
_wav	Q/q_io/include/q_io/audio_file.hpp	/^      wav_impl*      _wav;$/;"	m	class:cycfi::q::wav_base
_weight	Q/q_lib/include/q/pitch/period_detector.hpp	/^      float const             _weight;$/;"	m	class:cycfi::q::period_detector
_width	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel  _threshold, _width, _lower, _upper;$/;"	m	struct:cycfi::q::soft_knee_compressor
_width	Q/q_lib/include/q/utility/zero_crossing.hpp	/^         float             _width = 0.0f;$/;"	m	struct:cycfi::q::zero_crossing::info
_window_size	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      std::size_t const    _window_size;$/;"	m	class:cycfi::q::zero_crossing::std
_y	Q/example/delay.cpp	/^   float             _y = 0.0f;$/;"	m	struct:delay_processor	file:
_y	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   _y = 0.0f;$/;"	m	class:cycfi::q::envelope
_y0	Q/q_lib/include/q/fx/lowpass.hpp	/^      float _y0 = 0, _y1 = 0;$/;"	m	struct:cycfi::q::reso_filter
_y1	Q/q_lib/include/q/fx/envelope.hpp	/^      float _y1 = 0, _y2 = 0, _latest = 0;$/;"	m	struct:cycfi::q::fast_envelope_follower
_y1	Q/q_lib/include/q/fx/lowpass.hpp	/^      float _y0 = 0, _y1 = 0;$/;"	m	struct:cycfi::q::reso_filter
_y1	Q/q_lib/include/q/fx/special.hpp	/^      float _y1, _y2;$/;"	m	struct:cycfi::q::map
_y2	Q/q_lib/include/q/fx/envelope.hpp	/^      float _y1 = 0, _y2 = 0, _latest = 0;$/;"	m	struct:cycfi::q::fast_envelope_follower
_y2	Q/q_lib/include/q/fx/special.hpp	/^      float _y1, _y2;$/;"	m	struct:cycfi::q::map
_zc	Q/q_lib/include/q/pitch/period_detector.hpp	/^         zero_crossing const&    _zc;$/;"	m	struct:cycfi::q::detail::collector
_zc	Q/q_lib/include/q/pitch/period_detector.hpp	/^      zero_crossing           _zc;$/;"	m	class:cycfi::q::period_detector
a	Q/q_lib/include/q/fx/allpass.hpp	/^      float a;$/;"	m	struct:cycfi::q::polyphase_allpass
a	Q/q_lib/include/q/fx/allpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::one_pole_allpass
a	Q/q_lib/include/q/fx/biquad.hpp	/^         double a;$/;"	m	struct:cycfi::q::detail::config_biquad_a
a	Q/q_lib/include/q/fx/lowpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::leaky_integrator
a	Q/q_lib/include/q/fx/lowpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::one_pole_lowpass
a	Q/test/notes.hpp	/^   CONSTEXPR frequency a              = A[2];$/;"	m	namespace:notes
a0	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
a0	Q/q_lib/include/q/fx/biquad.hpp	/^      float a0, a1, a2, a3, a4;$/;"	m	struct:cycfi::q::biquad
a1	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
a1	Q/q_lib/include/q/fx/biquad.hpp	/^      float a0, a1, a2, a3, a4;$/;"	m	struct:cycfi::q::biquad
a2	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
a2	Q/q_lib/include/q/fx/biquad.hpp	/^      float a0, a1, a2, a3, a4;$/;"	m	struct:cycfi::q::biquad
a2db	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float a2db(float a)$/;"	f	namespace:cycfi::q::detail
a3	Q/q_lib/include/q/fx/biquad.hpp	/^      float a0, a1, a2, a3, a4;$/;"	m	struct:cycfi::q::biquad
a4	Q/q_lib/include/q/fx/biquad.hpp	/^      float a0, a1, a2, a3, a4;$/;"	m	struct:cycfi::q::biquad
a_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency a_12th         = A[3];$/;"	m	namespace:notes
a_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency a_24th         = A[4];$/;"	m	namespace:notes
abs	Q/q_lib/include/q/support/base.hpp	/^   constexpr T abs(T x)$/;"	f	namespace:cycfi::q
abs_within	Q/q_lib/include/q/support/base.hpp	/^   inline bool abs_within(float a, float b, float eps)$/;"	f	namespace:cycfi::q
active_sensing	Q/q_lib/include/q/support/midi.hpp	/^         active_sensing       = 0xFE,$/;"	e	enum:cycfi::q::midi::status::__anon17
active_sensing	Q/q_lib/include/q/support/midi.hpp	/^      active_sensing()$/;"	f	struct:cycfi::q::midi::active_sensing
active_sensing	Q/q_lib/include/q/support/midi.hpp	/^   struct active_sensing : message1$/;"	s	namespace:cycfi::q::midi
adjust_window_size	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      inline std::size_t adjust_window_size(std::size_t window)$/;"	f	namespace:cycfi::q::detail
agc	Q/q_lib/include/q/fx/dynamic.hpp	/^      constexpr agc(decibel max)$/;"	f	struct:cycfi::q::agc
agc	Q/q_lib/include/q/fx/dynamic.hpp	/^   struct agc$/;"	s	namespace:cycfi::q
all_notes_off	Q/q_lib/include/q/support/midi.hpp	/^         all_notes_off        = 0x7B,$/;"	e	enum:cycfi::q::midi::cc::controller
all_sounds_off	Q/q_lib/include/q/support/midi.hpp	/^         all_sounds_off       = 0x78,$/;"	e	enum:cycfi::q::midi::cc::controller
allpass	Q/q_lib/include/q/fx/biquad.hpp	/^      allpass(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::allpass
allpass	Q/q_lib/include/q/fx/biquad.hpp	/^   struct allpass : biquad$/;"	s	namespace:cycfi::q
alpha	Q/q_lib/include/q/fx/biquad.hpp	/^         double omega, sin, cos, alpha;$/;"	m	struct:cycfi::q::detail::config_biquad
apply	Q/q_lib/include/q/fft/fft.hpp	/^         void apply(double* data)$/;"	f	struct:cycfi::q::detail::danielson_lanczos
array	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	m	union:__anon13::__anon14
array	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	m	union:__anon13::__anon15
attack	Q/q_lib/include/q/fx/envelope.hpp	/^      void attack(float attack_, std::uint32_t sps)$/;"	f	struct:cycfi::q::envelope_follower
attack_rate	Q/q_lib/include/q/synth/envelope.hpp	/^         duration             attack_rate    = 30_ms;$/;"	m	struct:cycfi::q::envelope::config
attack_rate	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::attack_rate(duration rate, std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
attack_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , attack_state         = 6$/;"	e	enum:cycfi::q::envelope::state_enum
audio_channels	Q/q_lib/include/q/support/audio_stream.hpp	/^      audio_channels(T** buffers, std::size_t size, std::size_t frames)$/;"	f	class:cycfi::q::audio_channels
audio_channels	Q/q_lib/include/q/support/audio_stream.hpp	/^   class audio_channels$/;"	c	namespace:cycfi::q
audio_device	Q/q_io/include/q_io/audio_device.hpp	/^                                 audio_device(impl const& impl)$/;"	f	class:cycfi::q::audio_device
audio_device	Q/q_io/include/q_io/audio_device.hpp	/^   class audio_device$/;"	c	namespace:cycfi::q
audio_stream	Q/q_lib/include/q/support/audio_stream.hpp	/^      audio_stream() {}$/;"	f	class:cycfi::q::audio_stream
audio_stream	Q/q_lib/include/q/support/audio_stream.hpp	/^   class audio_stream$/;"	c	namespace:cycfi::q
audio_stream_callback1	Q/q_io/src/audio_stream.cpp	/^      int audio_stream_callback1($/;"	f	namespace:cycfi::q::detail
audio_stream_callback2	Q/q_io/src/audio_stream.cpp	/^      int audio_stream_callback2($/;"	f	namespace:cycfi::q::detail
audio_stream_callback3	Q/q_io/src/audio_stream.cpp	/^      int audio_stream_callback3($/;"	f	namespace:cycfi::q::detail
autocorrelate	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline void period_detector::autocorrelate()$/;"	f	class:cycfi::q::period_detector
ave_error	Q/test/pitch_detector.cpp	/^   float ave_error = 0.0f;$/;"	m	struct:test_result	file:
avgBytesPerSec	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 avgBytesPerSec;$/;"	m	struct:__anon6
b	Q/q_lib/include/q/fx/median.hpp	/^      float b = 0.0f;$/;"	m	struct:cycfi::q::median3
b	Q/q_lib/include/q/fx/moving_average.hpp	/^      static constexpr float b = 2.0f \/ (n + 1);$/;"	m	struct:cycfi::q::exp_moving_average
b	Q/test/notes.hpp	/^   CONSTEXPR frequency b              = B[3];$/;"	m	namespace:notes
b0	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
b1	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
b2	Q/q_lib/include/q/fx/biquad.hpp	/^         double a0, a1, a2, b0, b1, b2;$/;"	m	struct:cycfi::q::detail::config_biquad
b_	Q/q_lib/include/q/fx/moving_average.hpp	/^      static constexpr float b_ = 1.0f - b;$/;"	m	struct:cycfi::q::exp_moving_average
b_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency b_12th         = B[4];$/;"	m	namespace:notes
b_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency b_24th         = B[5];$/;"	m	namespace:notes
back	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T const& ring_buffer<T, Storage>::back() const$/;"	f	class:cycfi::q::ring_buffer
back	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T& ring_buffer<T, Storage>::back()$/;"	f	class:cycfi::q::ring_buffer
balance	Q/q_lib/include/q/support/midi.hpp	/^         balance              = 0x08,$/;"	e	enum:cycfi::q::midi::cc::controller
balance_lsb	Q/q_lib/include/q/support/midi.hpp	/^         balance_lsb          = 0x28,$/;"	e	enum:cycfi::q::midi::cc::controller
bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^      bandpass_cpg(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::bandpass_cpg
bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^      bandpass_cpg(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::bandpass_cpg
bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^   struct bandpass_cpg : biquad$/;"	s	namespace:cycfi::q
bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^      bandpass_csg(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::bandpass_csg
bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^      bandpass_csg(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::bandpass_csg
bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^   struct bandpass_csg : biquad$/;"	s	namespace:cycfi::q
bank_select	Q/q_lib/include/q/support/midi.hpp	/^         bank_select          = 0x00,$/;"	e	enum:cycfi::q::midi::cc::controller
bank_select_lsb	Q/q_lib/include/q/support/midi.hpp	/^         bank_select_lsb      = 0x20,$/;"	e	enum:cycfi::q::midi::cc::controller
base_frequency	Q/q_lib/include/q/fx/special.hpp	/^      void base_frequency(frequency base, std::uint32_t sps)$/;"	f	struct:cycfi::q::dynamic_smoother
basic_delay	Q/q_lib/include/q/fx/delay.hpp	/^      basic_delay(duration max_delay, std::uint32_t sps)$/;"	f	class:cycfi::q::basic_delay
basic_delay	Q/q_lib/include/q/fx/delay.hpp	/^      basic_delay(std::size_t max_delay_samples)$/;"	f	class:cycfi::q::basic_delay
basic_delay	Q/q_lib/include/q/fx/delay.hpp	/^   class basic_delay : public Base$/;"	c	namespace:cycfi::q
basic_pulse	Q/q_lib/include/q/synth/pulse.hpp	/^   constexpr auto basic_pulse = basic_pulse_synth{};$/;"	m	namespace:cycfi::q
basic_pulse_synth	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr basic_pulse_synth(float width = 0.5)$/;"	f	struct:cycfi::q::basic_pulse_synth
basic_pulse_synth	Q/q_lib/include/q/synth/pulse.hpp	/^   struct basic_pulse_synth$/;"	s	namespace:cycfi::q
basic_saw	Q/q_lib/include/q/synth/saw.hpp	/^   constexpr auto basic_saw = basic_saw_synth{};$/;"	m	namespace:cycfi::q
basic_saw_synth	Q/q_lib/include/q/synth/saw.hpp	/^   struct basic_saw_synth$/;"	s	namespace:cycfi::q
basic_square	Q/q_lib/include/q/synth/square.hpp	/^   constexpr auto basic_square = basic_square_synth{};$/;"	m	namespace:cycfi::q
basic_square_synth	Q/q_lib/include/q/synth/square.hpp	/^   struct basic_square_synth$/;"	s	namespace:cycfi::q
basic_triangle	Q/q_lib/include/q/synth/triangle.hpp	/^   constexpr auto basic_triangle = basic_triangle_synth{};$/;"	m	namespace:cycfi::q
basic_triangle_synth	Q/q_lib/include/q/synth/triangle.hpp	/^   struct basic_triangle_synth$/;"	s	namespace:cycfi::q
begin	Q/q_lib/include/q/support/audio_stream.hpp	/^         frame_index begin() const        { return { 0 }; }$/;"	f	struct:cycfi::q::audio_channels::frames_view
beta	Q/q_lib/include/q/fx/biquad.hpp	/^         double beta;$/;"	m	struct:cycfi::q::detail::config_biquad_a
bias	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline float pitch_detector::bias(float current, float incoming, bool& shift)$/;"	f	class:cycfi::q::pitch_detector
bias	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline void pitch_detector::bias(float incoming)$/;"	f	class:cycfi::q::pitch_detector
biquad	Q/q_lib/include/q/fx/biquad.hpp	/^      biquad(float a0, float a1, float a2, float a3, float a4)$/;"	f	struct:cycfi::q::biquad
biquad	Q/q_lib/include/q/fx/biquad.hpp	/^   struct biquad$/;"	s	namespace:cycfi::q
bits	Q/q_lib/include/q/pitch/period_detector.hpp	/^      bitset<> const&         bits() const            { return _bits; }$/;"	f	class:cycfi::q::period_detector
bits	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      bitset<> const&         bits() const                  { return _pd.bits(); }$/;"	f	class:cycfi::q::pitch_detector
bits	Q/q_lib/include/q/support/phase.hpp	/^      constexpr static auto bits = sizeof(std::uint32_t) * 8;$/;"	m	struct:cycfi::q::phase
bitsPerSample	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 bitsPerSample;$/;"	m	struct:__anon6
bitsPerSample	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 bitsPerSample;$/;"	m	struct:__anon7
bitsPerSample	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 bitsPerSample;$/;"	m	struct:__anon5
bitset	Q/q_lib/include/q/utility/bitset.hpp	/^   class bitset$/;"	c	namespace:cycfi::q
bitset	Q/q_lib/include/q/utility/bitset.hpp	/^   inline bitset<T>::bitset(std::size_t num_bits)$/;"	f	class:cycfi::q::bitset
bitstream_acf	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^      bitstream_acf(bitset<T> const& bits)$/;"	f	struct:cycfi::q::bitstream_acf
bitstream_acf	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^   struct bitstream_acf$/;"	s	namespace:cycfi::q
blockAlign	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 blockAlign;$/;"	m	struct:__anon6
breath	Q/q_lib/include/q/support/midi.hpp	/^         breath               = 0x02,$/;"	e	enum:cycfi::q::midi::cc::controller
breath_lsb	Q/q_lib/include/q/support/midi.hpp	/^         breath_lsb           = 0x22,$/;"	e	enum:cycfi::q::midi::cc::controller
buffer_size	Q/test/allpass.cpp	/^constexpr auto buffer_size = std::size_t(sps * 0.1);$/;"	v
buffer_size	Q/test/gen_sin.cpp	/^constexpr auto buffer_size = sps * 10;$/;"	v
bw	Q/q_lib/include/q/fx/biquad.hpp	/^   struct bw$/;"	s	namespace:cycfi::q
bytesPerSample	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 bytesPerSample;$/;"	m	struct:__anon7
bytesRemaining	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 bytesRemaining;$/;"	m	struct:__anon7
bytesRemainingInBlock	Q/q_io/external/include/dr_wav.h	/^        drwav_uint32 bytesRemainingInBlock;$/;"	m	struct:__anon7::__anon10
bytesRemainingInBlock	Q/q_io/external/include/dr_wav.h	/^        drwav_uint32 bytesRemainingInBlock;$/;"	m	struct:__anon7::__anon9
c	Q/q_lib/include/q/fx/median.hpp	/^      float c = 0.0f;$/;"	m	struct:cycfi::q::median3
cachedSampleCount	Q/q_io/external/include/dr_wav.h	/^        drwav_uint32 cachedSampleCount;$/;"	m	struct:__anon7::__anon10
cachedSampleCount	Q/q_io/external/include/dr_wav.h	/^        drwav_uint32 cachedSampleCount;$/;"	m	struct:__anon7::__anon9
cachedSamples	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  cachedSamples[16]; \/\/ Samples are stored in this cache during decoding.$/;"	m	struct:__anon7::__anon10
cachedSamples	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  cachedSamples[4];  \/\/ Samples are stored in this cache during decoding.$/;"	m	struct:__anon7::__anon9
calculate_frequency	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline float pitch_detector::calculate_frequency() const$/;"	f	class:cycfi::q::pitch_detector
capacity	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline std::size_t zero_crossing::capacity() const$/;"	f	class:cycfi::q::zero_crossing
cast_uint32_t	Q/q_lib/include/q/detail/fast_math.hpp	/^#define cast_uint32_t /;"	d
cc	Q/q_lib/include/q/support/midi.hpp	/^   namespace cc$/;"	n	namespace:cycfi::q::midi
central_difference	Q/q_lib/include/q/fx/special.hpp	/^   struct central_difference$/;"	s	namespace:cycfi::q
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const      { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::control_change
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::channel_aftertouch
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::note_off
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::note_on
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::pitch_bend
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::poly_aftertouch
channel	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   channel() const   { return data[0] & 0x0F; }$/;"	f	struct:cycfi::q::midi::program_change
channelMask	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 channelMask;$/;"	m	struct:__anon6
channel_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^         channel_aftertouch   = 0xD0,$/;"	e	enum:cycfi::q::midi::status::__anon17
channel_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^      channel_aftertouch(std::uint8_t channel, std::uint8_t pressure)$/;"	f	struct:cycfi::q::midi::channel_aftertouch
channel_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^   struct channel_aftertouch : message2$/;"	s	namespace:cycfi::q::midi
channel_volume	Q/q_lib/include/q/support/midi.hpp	/^         channel_volume       = 0x07,$/;"	e	enum:cycfi::q::midi::cc::controller
channel_volume_lsb	Q/q_lib/include/q/support/midi.hpp	/^         channel_volume_lsb   = 0x27,$/;"	e	enum:cycfi::q::midi::cc::controller
channels	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 channels;$/;"	m	struct:__anon6
channels	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 channels;$/;"	m	struct:__anon7
channels	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 channels;$/;"	m	struct:__anon5
check	Q/test/period_detector.cpp	/^void check(float a, float b)$/;"	f
check	Q/test/period_detector.cpp	/^void check(float a, float b, char const* what)$/;"	f
check	Q/test/period_detector.cpp	/^void check(q::period_detector::info a, q::period_detector::info b)$/;"	f
check	Q/test/pitch_detector.cpp	/^void check(float x, float expected, char const* what)$/;"	f
check_null	Q/test/period_detector.cpp	/^void check_null(float a)$/;"	f
check_null	Q/test/period_detector.cpp	/^void check_null(q::period_detector::info a)$/;"	f
clear	Q/q_lib/include/q/utility/bitset.hpp	/^   inline void bitset<T>::clear()$/;"	f	class:cycfi::q::bitset
clear	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline void ring_buffer<T, Storage>::clear()$/;"	f	class:cycfi::q::ring_buffer
clip	Q/example/square_synth.cpp	/^   q::soft_clip      clip;             \/\/ Soft clip$/;"	m	struct:my_square_synth	file:
clip	Q/q_lib/include/q/fx/waveshaper.hpp	/^      constexpr clip(float max = 1.0f)$/;"	f	struct:cycfi::q::clip
clip	Q/q_lib/include/q/fx/waveshaper.hpp	/^   struct clip$/;"	s	namespace:cycfi::q
collector	Q/q_lib/include/q/pitch/period_detector.hpp	/^         collector(zero_crossing const& zc, float periodicity_diff_threshold, int range_)$/;"	f	struct:cycfi::q::detail::collector
collector	Q/q_lib/include/q/pitch/period_detector.hpp	/^      struct collector$/;"	s	namespace:cycfi::q::detail
compressed	Q/q_io/external/include/dr_wav.h	/^    } compressed;$/;"	m	struct:__anon7	typeref:struct:__anon7::__anon8
compressor	Q/q_lib/include/q/fx/dynamic.hpp	/^      constexpr compressor(decibel threshold, float ratio)$/;"	f	struct:cycfi::q::compressor
compressor	Q/q_lib/include/q/fx/dynamic.hpp	/^   struct compressor$/;"	s	namespace:cycfi::q
compressor_slope	Q/q_lib/include/q/fx/onset_detector.hpp	/^      static constexpr auto compressor_slope = 1.0\/10;$/;"	m	struct:cycfi::q::onset_detector
compressor_threshold	Q/q_lib/include/q/fx/onset_detector.hpp	/^      static constexpr auto compressor_threshold = -24_dB;$/;"	m	struct:cycfi::q::onset_detector
config	Q/q_lib/include/q/fx/biquad.hpp	/^         void config(biquad& bq)$/;"	f	struct:cycfi::q::detail::config_biquad
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(double db_gain, frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::peaking
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::highshelf
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::lowshelf
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::peaking
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(float a0_, float a1_, float a2_, float a3_, float a4_)$/;"	f	struct:cycfi::q::biquad
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::bandpass_cpg
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::bandpass_csg
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::notch
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::allpass
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::bandpass_cpg
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::bandpass_csg
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::highpass
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::lowpass
config	Q/q_lib/include/q/fx/biquad.hpp	/^      void config(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::notch
config	Q/q_lib/include/q/fx/envelope.hpp	/^      void config(duration attack, duration release, std::uint32_t sps)$/;"	f	struct:cycfi::q::envelope_follower
config	Q/q_lib/include/q/synth/envelope.hpp	/^      struct config$/;"	s	class:cycfi::q::envelope
config_allpass	Q/q_lib/include/q/fx/biquad.hpp	/^         config_allpass(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_allpass
config_allpass	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_allpass : config_biquad$/;"	s	namespace:cycfi::q::detail
config_bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^         config_bandpass_cpg(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_bandpass_cpg
config_bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^         config_bandpass_cpg(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_bandpass_cpg
config_bandpass_cpg	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_bandpass_cpg : config_biquad$/;"	s	namespace:cycfi::q::detail
config_bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^         config_bandpass_csg(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_bandpass_csg
config_bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^         config_bandpass_csg(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_bandpass_csg
config_bandpass_csg	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_bandpass_csg : config_biquad$/;"	s	namespace:cycfi::q::detail
config_biquad	Q/q_lib/include/q/fx/biquad.hpp	/^         config_biquad(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::detail::config_biquad
config_biquad	Q/q_lib/include/q/fx/biquad.hpp	/^         config_biquad(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_biquad
config_biquad	Q/q_lib/include/q/fx/biquad.hpp	/^         config_biquad(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_biquad
config_biquad	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_biquad$/;"	s	namespace:cycfi::q::detail
config_biquad_a	Q/q_lib/include/q/fx/biquad.hpp	/^         config_biquad_a(double db_gain, frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_biquad_a
config_biquad_a	Q/q_lib/include/q/fx/biquad.hpp	/^         config_biquad_a(double db_gain, frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_biquad_a
config_biquad_a	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_biquad_a : config_biquad$/;"	s	namespace:cycfi::q::detail
config_highpass	Q/q_lib/include/q/fx/biquad.hpp	/^         config_highpass(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_highpass
config_highpass	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_highpass : config_biquad$/;"	s	namespace:cycfi::q::detail
config_highshelf	Q/q_lib/include/q/fx/biquad.hpp	/^         config_highshelf(double db_gain, frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_highshelf
config_highshelf	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_highshelf : config_biquad_a$/;"	s	namespace:cycfi::q::detail
config_lowpass	Q/q_lib/include/q/fx/biquad.hpp	/^         config_lowpass(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_lowpass
config_lowpass	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_lowpass : config_biquad$/;"	s	namespace:cycfi::q::detail
config_lowshelf	Q/q_lib/include/q/fx/biquad.hpp	/^         config_lowshelf(double db_gain, frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_lowshelf
config_lowshelf	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_lowshelf : config_biquad_a$/;"	s	namespace:cycfi::q::detail
config_notch	Q/q_lib/include/q/fx/biquad.hpp	/^         config_notch(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_notch
config_notch	Q/q_lib/include/q/fx/biquad.hpp	/^         config_notch(frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_notch
config_notch	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_notch : config_biquad$/;"	s	namespace:cycfi::q::detail
config_peaking	Q/q_lib/include/q/fx/biquad.hpp	/^         config_peaking(double db_gain, frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::detail::config_peaking
config_peaking	Q/q_lib/include/q/fx/biquad.hpp	/^         config_peaking(double db_gain, frequency f, std::uint32_t sps, double q)$/;"	f	struct:cycfi::q::detail::config_peaking
config_peaking	Q/q_lib/include/q/fx/biquad.hpp	/^      struct config_peaking : config_biquad_a$/;"	s	namespace:cycfi::q::detail
container	Q/q_io/external/include/dr_wav.h	/^    drwav_container container;  \/\/ RIFF, W64.$/;"	m	struct:__anon5
container	Q/q_io/external/include/dr_wav.h	/^    drwav_container container;$/;"	m	struct:__anon7
continue_	Q/q_lib/include/q/support/midi.hpp	/^         continue_            = 0xFB,$/;"	e	enum:cycfi::q::midi::status::__anon17
continue_	Q/q_lib/include/q/support/midi.hpp	/^      continue_()$/;"	f	struct:cycfi::q::midi::continue_
continue_	Q/q_lib/include/q/support/midi.hpp	/^   struct continue_ : message1$/;"	s	namespace:cycfi::q::midi
control_change	Q/q_lib/include/q/support/midi.hpp	/^         control_change       = 0xB0,$/;"	e	enum:cycfi::q::midi::status::__anon17
control_change	Q/q_lib/include/q/support/midi.hpp	/^      control_change(std::uint8_t channel, cc::controller ctrl, std::uint8_t value)$/;"	f	struct:cycfi::q::midi::control_change
control_change	Q/q_lib/include/q/support/midi.hpp	/^   struct control_change : message3$/;"	s	namespace:cycfi::q::midi
controller	Q/q_lib/include/q/support/midi.hpp	/^      cc::controller controller() const   { return cc::controller(data[1]); }$/;"	f	struct:cycfi::q::midi::control_change
controller	Q/q_lib/include/q/support/midi.hpp	/^      enum controller$/;"	g	namespace:cycfi::q::midi::cc
cos	Q/q_lib/include/q/fft/fft.hpp	/^      constexpr double cos(unsigned B, unsigned A)$/;"	f	namespace:cycfi::q::detail
cos	Q/q_lib/include/q/fx/biquad.hpp	/^         double omega, sin, cos, alpha;$/;"	m	struct:cycfi::q::detail::config_biquad
count_bits	Q/q_lib/include/q/detail/count_bits.hpp	/^   inline std::uint32_t count_bits(std::uint32_t i)$/;"	f	namespace:cycfi::q::detail
count_bits	Q/q_lib/include/q/detail/count_bits.hpp	/^   inline std::uint64_t count_bits(std::uint64_t i)$/;"	f	namespace:cycfi::q::detail
cpu_load	Q/q_io/src/audio_stream.cpp	/^   double port_audio_stream::cpu_load() const$/;"	f	class:cycfi::q::port_audio_stream
crossfade	Q/q_lib/include/q/fx/special.hpp	/^      constexpr crossfade(decibel pivot)$/;"	f	struct:cycfi::q::crossfade
crossfade	Q/q_lib/include/q/fx/special.hpp	/^   struct crossfade$/;"	s	namespace:cycfi::q
current	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   current() const { return _y; }$/;"	f	class:cycfi::q::envelope
currentReadPos	Q/q_io/external/include/dr_wav.h	/^    size_t currentReadPos;$/;"	m	struct:__anon3
currentWritePos	Q/q_io/external/include/dr_wav.h	/^    size_t currentWritePos;$/;"	m	struct:__anon4
cutoff	Q/q_lib/include/q/fx/lowpass.hpp	/^      void cutoff(float f)$/;"	f	struct:cycfi::q::reso_filter
cutoff	Q/q_lib/include/q/fx/lowpass.hpp	/^      void cutoff(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::leaky_integrator
cutoff	Q/q_lib/include/q/fx/lowpass.hpp	/^      void cutoff(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::reso_filter
cutoff	Q/q_lib/include/q/fx/lowpass.hpp	/^      void cutoff(frequency freq, std::uint32_t sps)$/;"	f	struct:cycfi::q::one_pole_lowpass
cutoff	Q/q_lib/include/q/fx/special.hpp	/^      void cutoff(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::dc_block
d	Q/test/notes.hpp	/^   CONSTEXPR frequency d              = D[3];$/;"	m	namespace:notes
d_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency d_12th         = D[4];$/;"	m	namespace:notes
d_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency d_24th         = D[5];$/;"	m	namespace:notes
danielson_lanczos	Q/q_lib/include/q/fft/fft.hpp	/^      struct danielson_lanczos$/;"	s	namespace:cycfi::q::detail
danielson_lanczos	Q/q_lib/include/q/fft/fft.hpp	/^      struct danielson_lanczos<2>$/;"	s	namespace:cycfi::q::detail
danielson_lanczos	Q/q_lib/include/q/fft/fft.hpp	/^      struct danielson_lanczos<4>$/;"	s	namespace:cycfi::q::detail
data	Q/q_io/external/include/dr_wav.h	/^    const drwav_uint8* data;$/;"	m	struct:__anon3
data	Q/q_lib/include/q/support/midi.hpp	/^      std::uint32_t data;$/;"	m	struct:cycfi::q::midi::raw_message
data	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t data[size];$/;"	m	struct:cycfi::q::midi::message
data	Q/q_lib/include/q/utility/bitset.hpp	/^   inline T const* bitset<T>::data() const$/;"	f	class:cycfi::q::bitset
data	Q/q_lib/include/q/utility/bitset.hpp	/^   inline T* bitset<T>::data()$/;"	f	class:cycfi::q::bitset
dataCapacity	Q/q_io/external/include/dr_wav.h	/^    size_t dataCapacity;$/;"	m	struct:__anon4
dataChunkDataPos	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 dataChunkDataPos;$/;"	m	struct:__anon7
dataChunkDataSize	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 dataChunkDataSize;$/;"	m	struct:__anon7
dataChunkDataSizeTargetWrite	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 dataChunkDataSizeTargetWrite;$/;"	m	struct:__anon7
dataSize	Q/q_io/external/include/dr_wav.h	/^    size_t dataSize;$/;"	m	struct:__anon3
dataSize	Q/q_io/external/include/dr_wav.h	/^    size_t dataSize;$/;"	m	struct:__anon4
data_dec	Q/q_lib/include/q/support/midi.hpp	/^         data_dec             = 0x61,  \/\/ decrement data value (-1)$/;"	e	enum:cycfi::q::midi::cc::controller
data_entry	Q/q_lib/include/q/support/midi.hpp	/^         data_entry           = 0x06,$/;"	e	enum:cycfi::q::midi::cc::controller
data_entry_lsb	Q/q_lib/include/q/support/midi.hpp	/^         data_entry_lsb       = 0x26,$/;"	e	enum:cycfi::q::midi::cc::controller
data_inc	Q/q_lib/include/q/support/midi.hpp	/^         data_inc             = 0x60,  \/\/ increment data value (+1)$/;"	e	enum:cycfi::q::midi::cc::controller
db2a	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float db2a(float db)$/;"	f	namespace:cycfi::q::detail
db_table0	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float db_table0[] =$/;"	m	namespace:cycfi::q::detail
db_table1	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float db_table1[] =$/;"	m	namespace:cycfi::q::detail
db_table2	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float db_table2[] =$/;"	m	namespace:cycfi::q::detail
dc_block	Q/q_lib/include/q/fx/special.hpp	/^      dc_block(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::dc_block
dc_block	Q/q_lib/include/q/fx/special.hpp	/^   struct dc_block$/;"	s	namespace:cycfi::q
decay	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::decay()$/;"	f	class:cycfi::q::envelope
decay_rate	Q/q_lib/include/q/synth/envelope.hpp	/^         duration             decay_rate     = 70_ms;$/;"	m	struct:cycfi::q::envelope::config
decay_rate	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::decay_rate(duration rate, std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
decay_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , decay_state          = 4$/;"	e	enum:cycfi::q::envelope::state_enum
decibel	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel() : val(0.0f) {}$/;"	f	struct:cycfi::q::decibel
decibel	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel(double val, _direct) : val(val) {}$/;"	f	struct:cycfi::q::decibel
decibel	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel::decibel(double val)$/;"	f	class:cycfi::q::decibel
decibel	Q/q_lib/include/q/support/decibel.hpp	/^   struct decibel$/;"	s	namespace:cycfi::q
default_device_id	Q/q_io/src/midi_stream.cpp	/^      int default_device_id = 0;$/;"	m	namespace:cycfi::q::detail	file:
default_sample_rate	Q/q_io/src/audio_device.cpp	/^   std::size_t audio_device::default_sample_rate() const$/;"	f	class:cycfi::q::audio_device
delay1	Q/q_lib/include/q/fx/delay.hpp	/^   struct delay1$/;"	s	namespace:cycfi::q
delay2	Q/q_lib/include/q/fx/delay.hpp	/^   struct delay2$/;"	s	namespace:cycfi::q
delay_processor	Q/example/delay.cpp	/^   delay_processor($/;"	f	struct:delay_processor
delay_processor	Q/example/delay.cpp	/^struct delay_processor : q::port_audio_stream$/;"	s	file:
delta	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  delta[2];$/;"	m	struct:__anon7::__anon9
derived	Q/q_lib/include/q/support/value.hpp	/^   value<T, Derived>::derived() const$/;"	f	class:cycfi::q::value::value
derived	Q/q_lib/include/q/support/value.hpp	/^   value<T, Derived>::derived()$/;"	f	class:cycfi::q::value
detail	Q/q_io/src/audio_device.cpp	/^   namespace detail$/;"	n	namespace:cycfi::q	file:
detail	Q/q_io/src/audio_stream.cpp	/^   namespace detail$/;"	n	namespace:cycfi::q	file:
detail	Q/q_io/src/midi_device.cpp	/^   namespace detail$/;"	n	namespace:cycfi::q	file:
detail	Q/q_io/src/midi_stream.cpp	/^   namespace detail$/;"	n	namespace:cycfi::q	file:
detail	Q/q_lib/include/q/detail/count_bits.hpp	/^namespace cycfi::q::detail$/;"	n	class:cycfi::q
detail	Q/q_lib/include/q/detail/db_table.hpp	/^namespace cycfi::q::detail$/;"	n	class:cycfi::q
detail	Q/q_lib/include/q/detail/init_store.hpp	/^namespace cycfi::q::detail$/;"	n	class:cycfi::q
detail	Q/q_lib/include/q/detail/sin_table.hpp	/^namespace cycfi::q::detail$/;"	n	class:cycfi::q
detail	Q/q_lib/include/q/fft/fft.hpp	/^   namespace detail$/;"	n	namespace:cycfi::q
detail	Q/q_lib/include/q/fx/biquad.hpp	/^   namespace detail$/;"	n	namespace:cycfi::q
detail	Q/q_lib/include/q/pitch/period_detector.hpp	/^   namespace detail$/;"	n	namespace:cycfi::q
detail	Q/q_lib/include/q/support/phase.hpp	/^   namespace detail$/;"	n	namespace:cycfi::q
detail	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   namespace detail$/;"	n	namespace:cycfi::q
differentiator	Q/q_lib/include/q/fx/special.hpp	/^      differentiator()$/;"	f	struct:cycfi::q::differentiator
differentiator	Q/q_lib/include/q/fx/special.hpp	/^   struct differentiator$/;"	s	namespace:cycfi::q
direct	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr static _direct direct = {};$/;"	m	struct:cycfi::q::decibel
dispatch	Q/q_lib/include/q/support/midi.hpp	/^   inline void dispatch(raw_message msg, std::size_t time, Processor&& proc)$/;"	f	namespace:cycfi::q::midi
dr_wav_h	Q/q_io/external/include/dr_wav.h	/^#define dr_wav_h$/;"	d
drwav	Q/q_io/external/include/dr_wav.h	/^} drwav;$/;"	t	typeref:struct:__anon7
drwavGUID_W64_DATA	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_DATA[16] = {0x64,0x61,0x74,0x61, 0xF3,0xAC, 0xD3,0x11, 0x8C,0xD1, 0x00,0xC0,0x4F,0x8E,0xDB,0x8A};    \/\/ 61746164-ACF3-11D3-8CD1-00C04F8EDB8A$/;"	v
drwavGUID_W64_FACT	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_FACT[16] = {0x66,0x61,0x63,0x74, 0xF3,0xAC, 0xD3,0x11, 0x8C,0xD1, 0x00,0xC0,0x4F,0x8E,0xDB,0x8A};    \/\/ 74636166-ACF3-11D3-8CD1-00C04F8EDB8A$/;"	v
drwavGUID_W64_FMT	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_FMT [16] = {0x66,0x6D,0x74,0x20, 0xF3,0xAC, 0xD3,0x11, 0x8C,0xD1, 0x00,0xC0,0x4F,0x8E,0xDB,0x8A};    \/\/ 20746D66-ACF3-11D3-8CD1-00C04F8EDB8A$/;"	v
drwavGUID_W64_JUNK	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_JUNK[16] = {0x6A,0x75,0x6E,0x6B, 0xF3,0xAC, 0xD3,0x11, 0x8C,0xD1, 0x00,0xC0,0x4F,0x8E,0xDB,0x8A};    \/\/ 6B6E756A-ACF3-11D3-8CD1-00C04F8EDB8A$/;"	v
drwavGUID_W64_RIFF	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_RIFF[16] = {0x72,0x69,0x66,0x66, 0x2E,0x91, 0xCF,0x11, 0xA5,0xD6, 0x28,0xDB,0x04,0xC1,0x00,0x00};    \/\/ 66666972-912E-11CF-A5D6-28DB04C10000$/;"	v
drwavGUID_W64_WAVE	Q/q_io/external/include/dr_wav.h	/^static const drwav_uint8 drwavGUID_W64_WAVE[16] = {0x77,0x61,0x76,0x65, 0xF3,0xAC, 0xD3,0x11, 0x8C,0xD1, 0x00,0xC0,0x4F,0x8E,0xDB,0x8A};    \/\/ 65766177-ACF3-11D3-8CD1-00C04F8EDB8A$/;"	v
drwav__alaw_to_s16	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_int16 drwav__alaw_to_s16(drwav_uint8 sampleIn)$/;"	f
drwav__bytes_to_guid	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE void drwav__bytes_to_guid(const unsigned char* data, drwav_uint8* guid)$/;"	f
drwav__bytes_to_s16	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE short drwav__bytes_to_s16(const unsigned char* data)$/;"	f
drwav__bytes_to_u16	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE unsigned short drwav__bytes_to_u16(const unsigned char* data)$/;"	f
drwav__bytes_to_u32	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE unsigned int drwav__bytes_to_u32(const unsigned char* data)$/;"	f
drwav__bytes_to_u64	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_uint64 drwav__bytes_to_u64(const unsigned char* data)$/;"	f
drwav__chunk_header	Q/q_io/external/include/dr_wav.h	/^} drwav__chunk_header;$/;"	t	typeref:struct:__anon11
drwav__fourcc_equal	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_bool32 drwav__fourcc_equal(const unsigned char* a, const char* b)$/;"	f
drwav__guid_equal	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_bool32 drwav__guid_equal(const drwav_uint8 a[16], const drwav_uint8 b[16])$/;"	f
drwav__ieee_to_f32	Q/q_io/external/include/dr_wav.h	/^static void drwav__ieee_to_f32(float* pOut, const unsigned char* pIn, size_t sampleCount, unsigned short bytesPerSample)$/;"	f
drwav__ieee_to_s16	Q/q_io/external/include/dr_wav.h	/^static void drwav__ieee_to_s16(drwav_int16* pOut, const unsigned char* pIn, size_t totalSampleCount, unsigned short bytesPerSample)$/;"	f
drwav__ieee_to_s32	Q/q_io/external/include/dr_wav.h	/^static void drwav__ieee_to_s32(drwav_int32* pOut, const unsigned char* pIn, size_t totalSampleCount, unsigned short bytesPerSample)$/;"	f
drwav__is_compressed_format_tag	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_bool32 drwav__is_compressed_format_tag(drwav_uint16 formatTag)$/;"	f
drwav__is_little_endian	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE int drwav__is_little_endian()$/;"	f
drwav__memory_stream	Q/q_io/external/include/dr_wav.h	/^} drwav__memory_stream;$/;"	t	typeref:struct:__anon3
drwav__memory_stream_write	Q/q_io/external/include/dr_wav.h	/^} drwav__memory_stream_write;$/;"	t	typeref:struct:__anon4
drwav__mulaw_to_s16	Q/q_io/external/include/dr_wav.h	/^static DRWAV_INLINE drwav_int16 drwav__mulaw_to_s16(drwav_uint8 sampleIn)$/;"	f
drwav__on_read_memory	Q/q_io/external/include/dr_wav.h	/^static size_t drwav__on_read_memory(void* pUserData, void* pBufferOut, size_t bytesToRead)$/;"	f
drwav__on_read_stdio	Q/q_io/external/include/dr_wav.h	/^static size_t drwav__on_read_stdio(void* pUserData, void* pBufferOut, size_t bytesToRead)$/;"	f
drwav__on_seek_memory	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__on_seek_memory(void* pUserData, int offset, drwav_seek_origin origin)$/;"	f
drwav__on_seek_memory_write	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__on_seek_memory_write(void* pUserData, int offset, drwav_seek_origin origin)$/;"	f
drwav__on_seek_stdio	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__on_seek_stdio(void* pUserData, int offset, drwav_seek_origin origin)$/;"	f
drwav__on_write_memory	Q/q_io/external/include/dr_wav.h	/^static size_t drwav__on_write_memory(void* pUserData, const void* pDataIn, size_t bytesToWrite)$/;"	f
drwav__on_write_stdio	Q/q_io/external/include/dr_wav.h	/^static size_t drwav__on_write_stdio(void* pUserData, const void* pData, size_t bytesToWrite)$/;"	f
drwav__pcm_to_f32	Q/q_io/external/include/dr_wav.h	/^static void drwav__pcm_to_f32(float* pOut, const unsigned char* pIn, size_t sampleCount, unsigned short bytesPerSample)$/;"	f
drwav__pcm_to_s16	Q/q_io/external/include/dr_wav.h	/^static void drwav__pcm_to_s16(drwav_int16* pOut, const unsigned char* pIn, size_t totalSampleCount, unsigned short bytesPerSample)$/;"	f
drwav__pcm_to_s32	Q/q_io/external/include/dr_wav.h	/^static void drwav__pcm_to_s32(drwav_int32* pOut, const unsigned char* pIn, size_t totalSampleCount, unsigned short bytesPerSample)$/;"	f
drwav__read_and_close_f32	Q/q_io/external/include/dr_wav.h	/^float* drwav__read_and_close_f32(drwav* pWav, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav__read_and_close_s16	Q/q_io/external/include/dr_wav.h	/^drwav_int16* drwav__read_and_close_s16(drwav* pWav, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav__read_and_close_s32	Q/q_io/external/include/dr_wav.h	/^drwav_int32* drwav__read_and_close_s32(drwav* pWav, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav__read_chunk_header	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__read_chunk_header(drwav_read_proc onRead, void* pUserData, drwav_container container, drwav_uint64* pRunningBytesReadOut, drwav__chunk_header* pHeaderOut)$/;"	f
drwav__read_fmt	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__read_fmt(drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData, drwav_container container, drwav_uint64* pRunningBytesReadOut, drwav_fmt* fmtOut)$/;"	f
drwav__seek_forward	Q/q_io/external/include/dr_wav.h	/^static drwav_bool32 drwav__seek_forward(drwav_seek_proc onSeek, drwav_uint64 offset, void* pUserData)$/;"	f
drwav_alaw_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_alaw_to_f32(float* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_alaw_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_alaw_to_s16(drwav_int16* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_alaw_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_alaw_to_s32(drwav_int32* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_align	Q/q_io/external/include/dr_wav.h	/^#define drwav_align(/;"	d
drwav_assert	Q/q_io/external/include/dr_wav.h	/^#define drwav_assert /;"	d
drwav_bool32	Q/q_io/external/include/dr_wav.h	/^typedef drwav_uint32     drwav_bool32;$/;"	t
drwav_bool8	Q/q_io/external/include/dr_wav.h	/^typedef drwav_uint8      drwav_bool8;$/;"	t
drwav_clamp	Q/q_io/external/include/dr_wav.h	/^#define drwav_clamp(/;"	d
drwav_close	Q/q_io/external/include/dr_wav.h	/^void drwav_close(drwav* pWav)$/;"	f
drwav_container	Q/q_io/external/include/dr_wav.h	/^} drwav_container;$/;"	t	typeref:enum:__anon2
drwav_container_riff	Q/q_io/external/include/dr_wav.h	/^    drwav_container_riff,$/;"	e	enum:__anon2
drwav_container_w64	Q/q_io/external/include/dr_wav.h	/^    drwav_container_w64$/;"	e	enum:__anon2
drwav_copy_memory	Q/q_io/external/include/dr_wav.h	/^#define drwav_copy_memory /;"	d
drwav_countof	Q/q_io/external/include/dr_wav.h	/^#define drwav_countof(/;"	d
drwav_data_chunk_size_riff	Q/q_io/external/include/dr_wav.h	/^drwav_uint32 drwav_data_chunk_size_riff(drwav_uint64 dataChunkSize)$/;"	f
drwav_data_chunk_size_w64	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_data_chunk_size_w64(drwav_uint64 dataChunkSize)$/;"	f
drwav_data_format	Q/q_io/external/include/dr_wav.h	/^} drwav_data_format;$/;"	t	typeref:struct:__anon5
drwav_f32_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_f32_to_s16(drwav_int16* pOut, const float* pIn, size_t sampleCount)$/;"	f
drwav_f32_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_f32_to_s32(drwav_int32* pOut, const float* pIn, size_t sampleCount)$/;"	f
drwav_f64_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_f64_to_f32(float* pOut, const double* pIn, size_t sampleCount)$/;"	f
drwav_f64_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_f64_to_s16(drwav_int16* pOut, const double* pIn, size_t sampleCount)$/;"	f
drwav_f64_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_f64_to_s32(drwav_int32* pOut, const double* pIn, size_t sampleCount)$/;"	f
drwav_fmt	Q/q_io/external/include/dr_wav.h	/^} drwav_fmt;$/;"	t	typeref:struct:__anon6
drwav_fopen	Q/q_io/external/include/dr_wav.h	/^FILE* drwav_fopen(const char* filePath, const char* openMode)$/;"	f
drwav_free	Q/q_io/external/include/dr_wav.h	/^void drwav_free(void* pDataReturnedByOpenAndRead)$/;"	f
drwav_init	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init(drwav* pWav, drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_init_file	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_file(drwav* pWav, const char* filename)$/;"	f
drwav_init_file_write	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_file_write(drwav* pWav, const char* filename, const drwav_data_format* pFormat)$/;"	f
drwav_init_file_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_file_write__internal(drwav* pWav, const char* filename, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential)$/;"	f
drwav_init_file_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_file_write_sequential(drwav* pWav, const char* filename, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount)$/;"	f
drwav_init_memory	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_memory(drwav* pWav, const void* data, size_t dataSize)$/;"	f
drwav_init_memory_write	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_memory_write(drwav* pWav, void** ppData, size_t* pDataSize, const drwav_data_format* pFormat)$/;"	f
drwav_init_memory_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_memory_write__internal(drwav* pWav, void** ppData, size_t* pDataSize, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential)$/;"	f
drwav_init_memory_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_memory_write_sequential(drwav* pWav, void** ppData, size_t* pDataSize, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount)$/;"	f
drwav_init_write	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_write(drwav* pWav, const drwav_data_format* pFormat, drwav_write_proc onWrite, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_init_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_write__internal(drwav* pWav, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential, drwav_write_proc onWrite, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_init_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_init_write_sequential(drwav* pWav, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_write_proc onWrite, void* pUserData)$/;"	f
drwav_int16	Q/q_io/external/include/dr_wav.h	/^typedef   signed short   drwav_int16;$/;"	t
drwav_int16	Q/q_io/external/include/dr_wav.h	/^typedef int16_t          drwav_int16;$/;"	t
drwav_int32	Q/q_io/external/include/dr_wav.h	/^typedef   signed int     drwav_int32;$/;"	t
drwav_int32	Q/q_io/external/include/dr_wav.h	/^typedef int32_t          drwav_int32;$/;"	t
drwav_int64	Q/q_io/external/include/dr_wav.h	/^typedef   signed __int64 drwav_int64;$/;"	t
drwav_int64	Q/q_io/external/include/dr_wav.h	/^typedef int64_t          drwav_int64;$/;"	t
drwav_int8	Q/q_io/external/include/dr_wav.h	/^typedef   signed char    drwav_int8;$/;"	t
drwav_int8	Q/q_io/external/include/dr_wav.h	/^typedef int8_t           drwav_int8;$/;"	t
drwav_max	Q/q_io/external/include/dr_wav.h	/^#define drwav_max(/;"	d
drwav_min	Q/q_io/external/include/dr_wav.h	/^#define drwav_min(/;"	d
drwav_mulaw_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_mulaw_to_f32(float* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_mulaw_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_mulaw_to_s16(drwav_int16* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_mulaw_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_mulaw_to_s32(drwav_int32* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_open	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open(drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_open_and_read_f32	Q/q_io/external/include/dr_wav.h	/^float* drwav_open_and_read_f32(drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_file_f32	Q/q_io/external/include/dr_wav.h	/^float* drwav_open_and_read_file_f32(const char* filename, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_file_s16	Q/q_io/external/include/dr_wav.h	/^drwav_int16* drwav_open_and_read_file_s16(const char* filename, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_file_s32	Q/q_io/external/include/dr_wav.h	/^drwav_int32* drwav_open_and_read_file_s32(const char* filename, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_memory_f32	Q/q_io/external/include/dr_wav.h	/^float* drwav_open_and_read_memory_f32(const void* data, size_t dataSize, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_memory_s16	Q/q_io/external/include/dr_wav.h	/^drwav_int16* drwav_open_and_read_memory_s16(const void* data, size_t dataSize, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_memory_s32	Q/q_io/external/include/dr_wav.h	/^drwav_int32* drwav_open_and_read_memory_s32(const void* data, size_t dataSize, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_s16	Q/q_io/external/include/dr_wav.h	/^drwav_int16* drwav_open_and_read_s16(drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_and_read_s32	Q/q_io/external/include/dr_wav.h	/^drwav_int32* drwav_open_and_read_s32(drwav_read_proc onRead, drwav_seek_proc onSeek, void* pUserData, unsigned int* channels, unsigned int* sampleRate, drwav_uint64* totalSampleCount)$/;"	f
drwav_open_file	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_file(const char* filename)$/;"	f
drwav_open_file_write	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_file_write(const char* filename, const drwav_data_format* pFormat)$/;"	f
drwav_open_file_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_file_write__internal(const char* filename, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential)$/;"	f
drwav_open_file_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_file_write_sequential(const char* filename, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount)$/;"	f
drwav_open_memory	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_memory(const void* data, size_t dataSize)$/;"	f
drwav_open_memory_write	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_memory_write(void** ppData, size_t* pDataSize, const drwav_data_format* pFormat)$/;"	f
drwav_open_memory_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_memory_write__internal(void** ppData, size_t* pDataSize, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential)$/;"	f
drwav_open_memory_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_memory_write_sequential(void** ppData, size_t* pDataSize, const drwav_data_format* pFormat, drwav_uint64 totalSampleCount)$/;"	f
drwav_open_write	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_write(const drwav_data_format* pFormat, drwav_write_proc onWrite, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_open_write__internal	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_write__internal(const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_bool32 isSequential, drwav_write_proc onWrite, drwav_seek_proc onSeek, void* pUserData)$/;"	f
drwav_open_write_sequential	Q/q_io/external/include/dr_wav.h	/^drwav* drwav_open_write_sequential(const drwav_data_format* pFormat, drwav_uint64 totalSampleCount, drwav_write_proc onWrite, void* pUserData)$/;"	f
drwav_read	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read(drwav* pWav, drwav_uint64 samplesToRead, void* pBufferOut)$/;"	f
drwav_read_f32	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__alaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__alaw(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__ieee	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__ieee(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__ima	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__ima(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__msadpcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__msadpcm(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__mulaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__mulaw(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_f32__pcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_f32__pcm(drwav* pWav, drwav_uint64 samplesToRead, float* pBufferOut)$/;"	f
drwav_read_proc	Q/q_io/external/include/dr_wav.h	/^typedef size_t (* drwav_read_proc)(void* pUserData, void* pBufferOut, size_t bytesToRead);$/;"	t
drwav_read_raw	Q/q_io/external/include/dr_wav.h	/^size_t drwav_read_raw(drwav* pWav, size_t bytesToRead, void* pBufferOut)$/;"	f
drwav_read_s16	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__alaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__alaw(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__ieee	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__ieee(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__ima	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__ima(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__msadpcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__msadpcm(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__mulaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__mulaw(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s16__pcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s16__pcm(drwav* pWav, drwav_uint64 samplesToRead, drwav_int16* pBufferOut)$/;"	f
drwav_read_s32	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__alaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__alaw(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__ieee	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__ieee(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__ima	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__ima(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__msadpcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__msadpcm(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__mulaw	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__mulaw(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_read_s32__pcm	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_read_s32__pcm(drwav* pWav, drwav_uint64 samplesToRead, drwav_int32* pBufferOut)$/;"	f
drwav_riff_chunk_size_riff	Q/q_io/external/include/dr_wav.h	/^drwav_uint32 drwav_riff_chunk_size_riff(drwav_uint64 dataChunkSize)$/;"	f
drwav_riff_chunk_size_w64	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_riff_chunk_size_w64(drwav_uint64 dataChunkSize)$/;"	f
drwav_s16_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_s16_to_f32(float* pOut, const drwav_int16* pIn, size_t sampleCount)$/;"	f
drwav_s16_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_s16_to_s32(drwav_int32* pOut, const drwav_int16* pIn, size_t sampleCount)$/;"	f
drwav_s24_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_s24_to_f32(float* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_s24_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_s24_to_s16(drwav_int16* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_s24_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_s24_to_s32(drwav_int32* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_s32_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_s32_to_f32(float* pOut, const drwav_int32* pIn, size_t sampleCount)$/;"	f
drwav_s32_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_s32_to_s16(drwav_int16* pOut, const drwav_int32* pIn, size_t sampleCount)$/;"	f
drwav_seek_origin	Q/q_io/external/include/dr_wav.h	/^} drwav_seek_origin;$/;"	t	typeref:enum:__anon1
drwav_seek_origin_current	Q/q_io/external/include/dr_wav.h	/^    drwav_seek_origin_current$/;"	e	enum:__anon1
drwav_seek_origin_start	Q/q_io/external/include/dr_wav.h	/^    drwav_seek_origin_start,$/;"	e	enum:__anon1
drwav_seek_proc	Q/q_io/external/include/dr_wav.h	/^typedef drwav_bool32 (* drwav_seek_proc)(void* pUserData, int offset, drwav_seek_origin origin);$/;"	t
drwav_seek_to_first_sample	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_seek_to_first_sample(drwav* pWav)$/;"	f
drwav_seek_to_sample	Q/q_io/external/include/dr_wav.h	/^drwav_bool32 drwav_seek_to_sample(drwav* pWav, drwav_uint64 sample)$/;"	f
drwav_u8_to_f32	Q/q_io/external/include/dr_wav.h	/^void drwav_u8_to_f32(float* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_u8_to_s16	Q/q_io/external/include/dr_wav.h	/^void drwav_u8_to_s16(drwav_int16* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_u8_to_s32	Q/q_io/external/include/dr_wav.h	/^void drwav_u8_to_s32(drwav_int32* pOut, const drwav_uint8* pIn, size_t sampleCount)$/;"	f
drwav_uint16	Q/q_io/external/include/dr_wav.h	/^typedef uint16_t         drwav_uint16;$/;"	t
drwav_uint16	Q/q_io/external/include/dr_wav.h	/^typedef unsigned short   drwav_uint16;$/;"	t
drwav_uint32	Q/q_io/external/include/dr_wav.h	/^typedef uint32_t         drwav_uint32;$/;"	t
drwav_uint32	Q/q_io/external/include/dr_wav.h	/^typedef unsigned int     drwav_uint32;$/;"	t
drwav_uint64	Q/q_io/external/include/dr_wav.h	/^typedef uint64_t         drwav_uint64;$/;"	t
drwav_uint64	Q/q_io/external/include/dr_wav.h	/^typedef unsigned __int64 drwav_uint64;$/;"	t
drwav_uint8	Q/q_io/external/include/dr_wav.h	/^typedef uint8_t          drwav_uint8;$/;"	t
drwav_uint8	Q/q_io/external/include/dr_wav.h	/^typedef unsigned char    drwav_uint8;$/;"	t
drwav_uninit	Q/q_io/external/include/dr_wav.h	/^void drwav_uninit(drwav* pWav)$/;"	f
drwav_write	Q/q_io/external/include/dr_wav.h	/^drwav_uint64 drwav_write(drwav* pWav, drwav_uint64 samplesToWrite, const void* pData)$/;"	f
drwav_write_proc	Q/q_io/external/include/dr_wav.h	/^typedef size_t (* drwav_write_proc)(void* pUserData, const void* pData, size_t bytesToWrite);$/;"	t
drwav_write_raw	Q/q_io/external/include/dr_wav.h	/^size_t drwav_write_raw(drwav* pWav, size_t bytesToWrite, const void* pData)$/;"	f
drwav_zero_memory	Q/q_io/external/include/dr_wav.h	/^#define drwav_zero_memory /;"	d
duration	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr                     duration(double val) : base_type(val) {}$/;"	f	struct:cycfi::q::duration
duration	Q/q_lib/include/q/support/frequency.hpp	/^   struct duration : value<double, duration>$/;"	s	namespace:cycfi::q
dynamic_smoother	Q/q_lib/include/q/fx/special.hpp	/^      dynamic_smoother(frequency base, float sensitivity, std::uint32_t sps)$/;"	f	struct:cycfi::q::dynamic_smoother
dynamic_smoother	Q/q_lib/include/q/fx/special.hpp	/^      dynamic_smoother(frequency base, std::uint32_t sps)$/;"	f	struct:cycfi::q::dynamic_smoother
dynamic_smoother	Q/q_lib/include/q/fx/special.hpp	/^   struct dynamic_smoother$/;"	s	namespace:cycfi::q
eb	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency eb[] =$/;"	m	namespace:cycfi::q::notes
eb	Q/q_lib/include/q/support/notes.hpp	/^      frequency Ab, Bb, Db, eb, Gb;$/;"	m	struct:cycfi::q::octave_notes
edges	Q/q_lib/include/q/pitch/period_detector.hpp	/^      zero_crossing const&    edges() const           { return _zc; }$/;"	f	class:cycfi::q::period_detector
edges	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      zero_crossing const&    edges() const                 { return _pd.edges(); }$/;"	f	class:cycfi::q::pitch_detector
effect_1	Q/q_lib/include/q/support/midi.hpp	/^         effect_1             = 0x0C,$/;"	e	enum:cycfi::q::midi::cc::controller
effect_1_lsb	Q/q_lib/include/q/support/midi.hpp	/^         effect_1_lsb         = 0x2C,$/;"	e	enum:cycfi::q::midi::cc::controller
effect_2	Q/q_lib/include/q/support/midi.hpp	/^         effect_2             = 0x0D,$/;"	e	enum:cycfi::q::midi::cc::controller
effect_2_lsb	Q/q_lib/include/q/support/midi.hpp	/^         effect_2_lsb         = 0x2D,$/;"	e	enum:cycfi::q::midi::cc::controller
effects_1_depth	Q/q_lib/include/q/support/midi.hpp	/^         effects_1_depth      = 0x5B,  \/\/ previously reverb send$/;"	e	enum:cycfi::q::midi::cc::controller
effects_2_depth	Q/q_lib/include/q/support/midi.hpp	/^         effects_2_depth      = 0x5C,  \/\/ previously tremolo depth$/;"	e	enum:cycfi::q::midi::cc::controller
effects_3_depth	Q/q_lib/include/q/support/midi.hpp	/^         effects_3_depth      = 0x5D,  \/\/ previously chorus depth$/;"	e	enum:cycfi::q::midi::cc::controller
effects_4_depth	Q/q_lib/include/q/support/midi.hpp	/^         effects_4_depth      = 0x5E,  \/\/ previously celeste (detune) depth$/;"	e	enum:cycfi::q::midi::cc::controller
effects_5_depth	Q/q_lib/include/q/support/midi.hpp	/^         effects_5_depth      = 0x5F,  \/\/ previously phaser effect depth$/;"	e	enum:cycfi::q::midi::cc::controller
end	Q/q_lib/include/q/support/audio_stream.hpp	/^         frame_index end() const          { return { last }; }$/;"	f	struct:cycfi::q::audio_channels::frames_view
env	Q/example/square_synth.cpp	/^   q::envelope       env;              \/\/ The envelope$/;"	m	struct:my_square_synth	file:
envelope	Q/q_lib/include/q/synth/envelope.hpp	/^   class envelope$/;"	c	namespace:cycfi::q
envelope	Q/q_lib/include/q/synth/envelope.hpp	/^   inline envelope::envelope(config const& config_, std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
envelope	Q/q_lib/include/q/synth/envelope.hpp	/^   inline envelope::envelope(std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^      envelope_follower(duration attack, duration release, std::uint32_t sps)$/;"	f	struct:cycfi::q::envelope_follower
envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^   struct envelope_follower$/;"	s	namespace:cycfi::q
error	Q/q_io/include/q_io/audio_stream.hpp	/^      char const*             error() const        { return _error; }$/;"	f	class:cycfi::q::port_audio_stream
event	Q/q_io/include/q_io/midi_stream.hpp	/^      struct event$/;"	s	class:cycfi::q::midi_input_stream
exp_moving_average	Q/q_lib/include/q/fx/moving_average.hpp	/^      exp_moving_average(float y_ = 0.0f)$/;"	f	struct:cycfi::q::exp_moving_average
exp_moving_average	Q/q_lib/include/q/fx/moving_average.hpp	/^   struct exp_moving_average$/;"	s	namespace:cycfi::q
expander	Q/q_lib/include/q/fx/dynamic.hpp	/^      constexpr expander(decibel threshold, float ratio)$/;"	f	struct:cycfi::q::expander
expander	Q/q_lib/include/q/fx/dynamic.hpp	/^   struct expander$/;"	s	namespace:cycfi::q
expression	Q/q_lib/include/q/support/midi.hpp	/^         expression           = 0x0B,$/;"	e	enum:cycfi::q::midi::cc::controller
expression_lsb	Q/q_lib/include/q/support/midi.hpp	/^         expression_lsb       = 0x2B,$/;"	e	enum:cycfi::q::midi::cc::controller
extendedSize	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 extendedSize;$/;"	m	struct:__anon6
f	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	m	union:__anon13::__anon14
f	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	m	union:__anon13::__anon16
f	Q/q_lib/include/q/support/notes.hpp	/^      frequency f[12];$/;"	m	struct:cycfi::q::octave_frequencies
fast_div	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_div(float a, float b)$/;"	f	namespace:cycfi::q
fast_downsample	Q/q_lib/include/q/fx/special.hpp	/^   struct fast_downsample$/;"	s	namespace:cycfi::q
fast_envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^      fast_envelope_follower(duration hold, std::uint32_t sps)$/;"	f	struct:cycfi::q::fast_envelope_follower
fast_envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^      fast_envelope_follower(std::size_t hold_samples)$/;"	f	struct:cycfi::q::fast_envelope_follower
fast_envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^   struct fast_envelope_follower$/;"	s	namespace:cycfi::q
fast_exp3	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp3(float x)$/;"	f	namespace:cycfi::q
fast_exp4	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp4(float x)$/;"	f	namespace:cycfi::q
fast_exp5	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp5(float x)$/;"	f	namespace:cycfi::q
fast_exp6	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp6(float x)$/;"	f	namespace:cycfi::q
fast_exp7	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp7(float x)$/;"	f	namespace:cycfi::q
fast_exp8	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp8(float x)$/;"	f	namespace:cycfi::q
fast_exp9	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_exp9(float x)$/;"	f	namespace:cycfi::q
fast_inverse	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_inverse(float val)$/;"	f	namespace:cycfi::q
fast_log10	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_log10(float x)$/;"	f	namespace:cycfi::q
fast_log2	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_log2(float x)$/;"	f	namespace:cycfi::q
fast_pow10	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_pow10(float x)$/;"	f	namespace:cycfi::q
fast_pow2	Q/q_lib/include/q/support/base.hpp	/^   inline float fast_pow2(float x)$/;"	f	namespace:cycfi::q
fast_rand	Q/q_lib/include/q/support/base.hpp	/^   inline int fast_rand()$/;"	f	namespace:cycfi::q
fast_rational_tanh	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_rational_tanh(float x)$/;"	f	namespace:cycfi::q
fast_tan	Q/q_lib/include/q/support/base.hpp	/^   constexpr float fast_tan(float x)$/;"	f	namespace:cycfi::q
fastcos	Q/q_lib/include/q/detail/fast_math.hpp	/^fastcos (float x)$/;"	f
fastcosfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fastcosfull (float x)$/;"	f
fastcosh	Q/q_lib/include/q/detail/fast_math.hpp	/^fastcosh (float p)$/;"	f
fastdigamma	Q/q_lib/include/q/detail/fast_math.hpp	/^fastdigamma (float x)$/;"	f
fastercos	Q/q_lib/include/q/detail/fast_math.hpp	/^fastercos (float x)$/;"	f
fastercosfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fastercosfull (float x)$/;"	f
fastercosh	Q/q_lib/include/q/detail/fast_math.hpp	/^fastercosh (float p)$/;"	f
fasterdigamma	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterdigamma (float x)$/;"	f
fastererf	Q/q_lib/include/q/detail/fast_math.hpp	/^fastererf (float x)$/;"	f
fastererfc	Q/q_lib/include/q/detail/fast_math.hpp	/^fastererfc (float x)$/;"	f
fasterexp	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterexp (float p)$/;"	f
fasterf	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterf (float x)$/;"	f
fasterfc	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterfc (float x)$/;"	f
fasterinverseerf	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterinverseerf (float x)$/;"	f
fasterlambertw	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterlambertw (float x)$/;"	f
fasterlambertwexpx	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterlambertwexpx (float x)$/;"	f
fasterlgamma	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterlgamma (float x)$/;"	f
fasterlog	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterlog (float x)$/;"	f
fasterlog2	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterlog2 (float x)$/;"	f
fasterpow	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterpow (float x,$/;"	f
fasterpow2	Q/q_lib/include/q/detail/fast_math.hpp	/^fasterpow2 (float p)$/;"	f
fastersigmoid	Q/q_lib/include/q/detail/fast_math.hpp	/^fastersigmoid (float x)$/;"	f
fastersin	Q/q_lib/include/q/detail/fast_math.hpp	/^fastersin (float x)$/;"	f
fastersinfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fastersinfull (float x)$/;"	f
fastersinh	Q/q_lib/include/q/detail/fast_math.hpp	/^fastersinh (float p)$/;"	f
fastertan	Q/q_lib/include/q/detail/fast_math.hpp	/^fastertan (float x)$/;"	f
fastertanfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fastertanfull (float x)$/;"	f
fastertanh	Q/q_lib/include/q/detail/fast_math.hpp	/^fastertanh (float p)$/;"	f
fastexp	Q/q_lib/include/q/detail/fast_math.hpp	/^fastexp (float p)$/;"	f
fastinverseerf	Q/q_lib/include/q/detail/fast_math.hpp	/^fastinverseerf (float x)$/;"	f
fastlambertw	Q/q_lib/include/q/detail/fast_math.hpp	/^fastlambertw (float x)$/;"	f
fastlambertwexpx	Q/q_lib/include/q/detail/fast_math.hpp	/^fastlambertwexpx (float x)$/;"	f
fastlgamma	Q/q_lib/include/q/detail/fast_math.hpp	/^fastlgamma (float x)$/;"	f
fastlog	Q/q_lib/include/q/detail/fast_math.hpp	/^fastlog (float x)$/;"	f
fastlog2	Q/q_lib/include/q/detail/fast_math.hpp	/^fastlog2 (float x)$/;"	f
fastpow	Q/q_lib/include/q/detail/fast_math.hpp	/^fastpow (float x,$/;"	f
fastpow2	Q/q_lib/include/q/detail/fast_math.hpp	/^fastpow2 (float p)$/;"	f
fastsigmoid	Q/q_lib/include/q/detail/fast_math.hpp	/^fastsigmoid (float x)$/;"	f
fastsin	Q/q_lib/include/q/detail/fast_math.hpp	/^fastsin (float x)$/;"	f
fastsinfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fastsinfull (float x)$/;"	f
fastsinh	Q/q_lib/include/q/detail/fast_math.hpp	/^fastsinh (float p)$/;"	f
fasttan	Q/q_lib/include/q/detail/fast_math.hpp	/^fasttan (float x)$/;"	f
fasttanfull	Q/q_lib/include/q/detail/fast_math.hpp	/^fasttanfull (float x)$/;"	f
fasttanh	Q/q_lib/include/q/detail/fast_math.hpp	/^fasttanh (float p)$/;"	f
fft	Q/q_lib/include/q/fft/fft.hpp	/^   inline void fft(double* data)$/;"	f	namespace:cycfi::q
filter	Q/example/square_synth.cpp	/^   q::reso_filter    filter;           \/\/ The resonant filter$/;"	m	struct:my_square_synth	file:
fixed_pt_leaky_integrator	Q/q_lib/include/q/fx/lowpass.hpp	/^   struct fixed_pt_leaky_integrator$/;"	s	namespace:cycfi::q
fmt	Q/q_io/external/include/dr_wav.h	/^    drwav_fmt fmt;$/;"	m	struct:__anon7
foot	Q/q_lib/include/q/support/midi.hpp	/^         foot                 = 0x04,$/;"	e	enum:cycfi::q::midi::cc::controller
foot_lsb	Q/q_lib/include/q/support/midi.hpp	/^         foot_lsb             = 0x24,$/;"	e	enum:cycfi::q::midi::cc::controller
format	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 format;        \/\/ DR_WAVE_FORMAT_*$/;"	m	struct:__anon5
formatTag	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 formatTag;$/;"	m	struct:__anon6
fourcc	Q/q_io/external/include/dr_wav.h	/^        drwav_uint8 fourcc[4];$/;"	m	union:__anon11::__anon12
frac_phase	Q/q_lib/include/q/support/phase.hpp	/^      constexpr phase::value_type frac_phase(double frac)$/;"	f	namespace:cycfi::q::detail
frac_phase	Q/q_lib/include/q/support/phase.hpp	/^      constexpr phase::value_type frac_phase(float frac)$/;"	f	namespace:cycfi::q::detail
fractional_period	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline float zero_crossing::info::fractional_period(info const& next) const$/;"	f	class:cycfi::q::zero_crossing::info
fractional_ring_buffer	Q/q_lib/include/q/utility/fractional_ring_buffer.hpp	/^   class fractional_ring_buffer : public ring_buffer<T, Storage>$/;"	c	namespace:cycfi::q
frame	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline std::size_t zero_crossing::frame() const$/;"	f	class:cycfi::q::zero_crossing
frame_index	Q/q_lib/include/q/support/audio_stream.hpp	/^      struct frame_index$/;"	s	class:cycfi::q::audio_channels
frames	Q/q_lib/include/q/support/audio_stream.hpp	/^      frames_view          frames() const { return { _frames }; }$/;"	f	class:cycfi::q::audio_channels
frames_after_onset	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      bool                    frames_after_onset() const    { return _frames_after_onset; }$/;"	f	class:cycfi::q::pitch_detector
frames_view	Q/q_lib/include/q/support/audio_stream.hpp	/^      struct frames_view$/;"	s	class:cycfi::q::audio_channels
frequency	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr                     frequency(double val) : base_type(val) {}$/;"	f	struct:cycfi::q::frequency
frequency	Q/q_lib/include/q/support/frequency.hpp	/^   constexpr frequency::frequency(duration d)$/;"	f	class:cycfi::q::frequency
frequency	Q/q_lib/include/q/support/frequency.hpp	/^   struct frequency : value<double, frequency>$/;"	s	namespace:cycfi::q
front	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T const& ring_buffer<T, Storage>::front() const$/;"	f	class:cycfi::q::ring_buffer
front	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T& ring_buffer<T, Storage>::front()$/;"	f	class:cycfi::q::ring_buffer
fundamental	Q/q_lib/include/q/pitch/period_detector.hpp	/^      info const&             fundamental() const     { return _fundamental; }$/;"	f	class:cycfi::q::period_detector
g	Q/test/notes.hpp	/^   CONSTEXPR frequency g              = G[3];$/;"	m	namespace:notes
g0	Q/q_lib/include/q/fx/special.hpp	/^      float sense, wc, g0;$/;"	m	struct:cycfi::q::dynamic_smoother
g_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency g_12th         = G[4];$/;"	m	namespace:notes
g_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency g_24th         = G[5];$/;"	m	namespace:notes
g_drwavAlawTable	Q/q_io/external/include/dr_wav.h	/^static unsigned short g_drwavAlawTable[256] = {$/;"	v
g_drwavMulawTable	Q/q_io/external/include/dr_wav.h	/^static unsigned short g_drwavMulawTable[256] = {$/;"	v
gen_harmonics	Q/test/period_detector.cpp	/^gen_harmonics(q::frequency freq, params const& params_)$/;"	f
gen_harmonics	Q/test/pitch_detector.cpp	/^gen_harmonics(q::frequency freq, params const& params_)$/;"	f
general_1	Q/q_lib/include/q/support/midi.hpp	/^         general_1            = 0x10,$/;"	e	enum:cycfi::q::midi::cc::controller
general_1_lsb	Q/q_lib/include/q/support/midi.hpp	/^         general_1_lsb        = 0x30,$/;"	e	enum:cycfi::q::midi::cc::controller
general_2	Q/q_lib/include/q/support/midi.hpp	/^         general_2            = 0x11,$/;"	e	enum:cycfi::q::midi::cc::controller
general_2_lsb	Q/q_lib/include/q/support/midi.hpp	/^         general_2_lsb        = 0x31,$/;"	e	enum:cycfi::q::midi::cc::controller
general_3	Q/q_lib/include/q/support/midi.hpp	/^         general_3            = 0x12,$/;"	e	enum:cycfi::q::midi::cc::controller
general_3_lsb	Q/q_lib/include/q/support/midi.hpp	/^         general_3_lsb        = 0x32,$/;"	e	enum:cycfi::q::midi::cc::controller
general_4	Q/q_lib/include/q/support/midi.hpp	/^         general_4            = 0x13,$/;"	e	enum:cycfi::q::midi::cc::controller
general_4_lsb	Q/q_lib/include/q/support/midi.hpp	/^         general_4_lsb        = 0x33,$/;"	e	enum:cycfi::q::midi::cc::controller
general_5	Q/q_lib/include/q/support/midi.hpp	/^         general_5            = 0x50,$/;"	e	enum:cycfi::q::midi::cc::controller
general_6	Q/q_lib/include/q/support/midi.hpp	/^         general_6            = 0x51,$/;"	e	enum:cycfi::q::midi::cc::controller
general_7	Q/q_lib/include/q/support/midi.hpp	/^         general_7            = 0x52,$/;"	e	enum:cycfi::q::midi::cc::controller
general_8	Q/q_lib/include/q/support/midi.hpp	/^         general_8            = 0x53,$/;"	e	enum:cycfi::q::midi::cc::controller
get	Q/q_io/src/audio_device.cpp	/^   audio_device audio_device::get(int device_id)$/;"	f	class:cycfi::q::audio_device
get	Q/q_lib/include/q/pitch/period_detector.hpp	/^         void get(info const& info, period_detector::info& result)$/;"	f	struct:cycfi::q::detail::collector
get	Q/q_lib/include/q/utility/bitset.hpp	/^   inline bool bitset<T>::get(std::size_t i) const$/;"	f	class:cycfi::q::bitset
getCopyright	MyPlugin.cpp	/^MyPlugin::getCopyright() const$/;"	f	class:MyPlugin
getCurrentProgram	MyPlugin.cpp	/^MyPlugin::getCurrentProgram() const$/;"	f	class:MyPlugin
getDescription	MyPlugin.cpp	/^MyPlugin::getDescription() const$/;"	f	class:MyPlugin
getIdentifier	MyPlugin.cpp	/^MyPlugin::getIdentifier() const$/;"	f	class:MyPlugin
getInputDomain	MyPlugin.cpp	/^MyPlugin::getInputDomain() const$/;"	f	class:MyPlugin
getMaker	MyPlugin.cpp	/^MyPlugin::getMaker() const$/;"	f	class:MyPlugin
getMaxChannelCount	MyPlugin.cpp	/^MyPlugin::getMaxChannelCount() const$/;"	f	class:MyPlugin
getMinChannelCount	MyPlugin.cpp	/^MyPlugin::getMinChannelCount() const$/;"	f	class:MyPlugin
getName	MyPlugin.cpp	/^MyPlugin::getName() const$/;"	f	class:MyPlugin
getOutputDescriptors	MyPlugin.cpp	/^MyPlugin::getOutputDescriptors() const$/;"	f	class:MyPlugin
getParameter	MyPlugin.cpp	/^MyPlugin::getParameter(string identifier) const$/;"	f	class:MyPlugin
getParameterDescriptors	MyPlugin.cpp	/^MyPlugin::getParameterDescriptors() const$/;"	f	class:MyPlugin
getPluginVersion	MyPlugin.cpp	/^MyPlugin::getPluginVersion() const$/;"	f	class:MyPlugin
getPreferredBlockSize	MyPlugin.cpp	/^MyPlugin::getPreferredBlockSize() const$/;"	f	class:MyPlugin
getPreferredStepSize	MyPlugin.cpp	/^MyPlugin::getPreferredStepSize() const$/;"	f	class:MyPlugin
getPrograms	MyPlugin.cpp	/^MyPlugin::getPrograms() const$/;"	f	class:MyPlugin
getRemainingFeatures	MyPlugin.cpp	/^MyPlugin::getRemainingFeatures()$/;"	f	class:MyPlugin
get_audio_device	Q/example/example.hpp	/^int get_audio_device()$/;"	f
get_devices	Q/q_io/src/audio_device.cpp	/^      static std::vector<impl> const& get_devices()$/;"	f	class:cycfi::q::audio_device::impl::std
get_frequency	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      float                   get_frequency() const         { return _frequency(); }$/;"	f	class:cycfi::q::pitch_detector
get_midi_device	Q/example/example.hpp	/^int get_midi_device()$/;"	f
gtag	Q/docs/_layouts/default.html	/^        function gtag(){dataLayer.push(arguments);}$/;"	f
guid	Q/q_io/external/include/dr_wav.h	/^        drwav_uint8 guid[16];$/;"	m	union:__anon11::__anon12
harmonic	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline float period_detector::harmonic(std::size_t index) const$/;"	f	class:cycfi::q::period_detector
harmonic_periodicity_factor	Q/q_lib/include/q/pitch/period_detector.hpp	/^      static constexpr float harmonic_periodicity_factor = 15;$/;"	m	class:cycfi::q::period_detector
high_e	Q/test/notes.hpp	/^   CONSTEXPR frequency high_e         = E[4];$/;"	m	namespace:notes
high_e_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency high_e_12th    = E[5];$/;"	m	namespace:notes
high_e_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency high_e_24th    = E[6];$/;"	m	namespace:notes
highpass	Q/q_lib/include/q/fx/biquad.hpp	/^      highpass(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::highpass
highpass	Q/q_lib/include/q/fx/biquad.hpp	/^   struct highpass : biquad$/;"	s	namespace:cycfi::q
highshelf	Q/q_lib/include/q/fx/biquad.hpp	/^      highshelf(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::highshelf
highshelf	Q/q_lib/include/q/fx/biquad.hpp	/^   struct highshelf : biquad$/;"	s	namespace:cycfi::q
hilbert_quadrature	Q/q_lib/include/q/fx/special.hpp	/^   struct hilbert_quadrature$/;"	s	namespace:cycfi::q
hold_2	Q/q_lib/include/q/support/midi.hpp	/^         hold_2               = 0x45,$/;"	e	enum:cycfi::q::midi::cc::controller
hysteresis	Q/q_lib/include/q/synth/envelope.hpp	/^      static constexpr float hysteresis = 0.0001; \/\/ -80dB$/;"	m	class:cycfi::q::envelope
i	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	m	union:__anon13::__anon16
i	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	m	union:__anon13::__anon15
i	Q/q_lib/include/q/support/audio_stream.hpp	/^         std::size_t i;$/;"	m	struct:cycfi::q::audio_channels::frame_index
iCurrentSample	Q/q_io/external/include/dr_wav.h	/^        drwav_uint64 iCurrentSample;    \/\/ The index of the next sample that will be read by drwav_read_*(). This is used with "totalSampleCount" to ensure we don't read excess samples at the end of the last block.$/;"	m	struct:__anon7::__anon8
id	Q/q_io/external/include/dr_wav.h	/^    } id;$/;"	m	struct:__anon11	typeref:union:__anon11::__anon12
id	Q/q_io/src/audio_device.cpp	/^   uint32_t audio_device::id() const$/;"	f	class:cycfi::q::audio_device
id	Q/q_io/src/midi_device.cpp	/^   uint32_t midi_device::id() const$/;"	f	class:cycfi::q::midi_device
ima	Q/q_io/external/include/dr_wav.h	/^    } ima;$/;"	m	struct:__anon7	typeref:struct:__anon7::__anon10
impl	Q/q_io/src/audio_device.cpp	/^   struct audio_device::impl$/;"	s	class:cycfi::q::audio_device	file:
impl	Q/q_io/src/midi_device.cpp	/^   struct midi_device::impl$/;"	s	class:cycfi::q::midi_device	file:
info	Q/q_lib/include/q/pitch/period_detector.hpp	/^         struct info$/;"	s	struct:cycfi::q::detail::collector
info	Q/q_lib/include/q/pitch/period_detector.hpp	/^      struct info$/;"	s	class:cycfi::q::period_detector
info	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      struct info$/;"	s	class:cycfi::q::zero_crossing
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_allpass
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_bandpass_cpg
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_bandpass_csg
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_highpass
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_highshelf
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_lowpass
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_lowshelf
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_notch
init	Q/q_lib/include/q/fx/biquad.hpp	/^         void init()$/;"	f	struct:cycfi::q::detail::config_peaking
init_store	Q/q_lib/include/q/detail/init_store.hpp	/^   void init_store(std::array<T, N>& _data, std::size_t& _mask)$/;"	f	namespace:cycfi::q::detail
init_store	Q/q_lib/include/q/detail/init_store.hpp	/^   void init_store(std::size_t size, std::vector<T>& _data, std::size_t& _mask)$/;"	f	namespace:cycfi::q::detail
initialise	MyPlugin.cpp	/^MyPlugin::initialise(size_t channels, size_t stepSize, size_t blockSize)$/;"	f	class:MyPlugin
input	Q/q_io/include/q_io/audio_device.hpp	/^      enum io_dir { input, output };$/;"	e	enum:cycfi::q::audio_device::io_dir
input_channels	Q/q_io/include/q_io/audio_stream.hpp	/^      std::size_t             input_channels() const  { return _input_channels; }$/;"	f	class:cycfi::q::port_audio_stream
input_channels	Q/q_io/src/audio_device.cpp	/^   std::size_t audio_device::input_channels() const$/;"	f	class:cycfi::q::audio_device
input_latency	Q/q_io/src/audio_stream.cpp	/^   duration port_audio_stream::input_latency() const$/;"	f	class:cycfi::q::port_audio_stream
input_stream_init	Q/q_io/src/midi_stream.cpp	/^      void input_stream_init(midi_input_stream::impl*& _impl, int id)$/;"	f	namespace:cycfi::q::detail
integrator	Q/q_lib/include/q/fx/special.hpp	/^      integrator(float gain = 0.1)$/;"	f	struct:cycfi::q::integrator
integrator	Q/q_lib/include/q/fx/special.hpp	/^   struct integrator$/;"	s	namespace:cycfi::q
inv_db_table	Q/q_lib/include/q/detail/db_table.hpp	/^   constexpr float inv_db_table[] =$/;"	m	namespace:cycfi::q::detail
io_dir	Q/q_io/include/q_io/audio_device.hpp	/^      enum io_dir { input, output };$/;"	g	class:cycfi::q::audio_device
isSequentialWrite	Q/q_io/external/include/dr_wav.h	/^    drwav_bool32 isSequentialWrite;$/;"	m	struct:__anon7
is_note_onset	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline bool pitch_detector::is_note_onset() const$/;"	f	class:cycfi::q::pitch_detector
is_ready	Q/q_lib/include/q/pitch/period_detector.hpp	/^      bool                    is_ready() const        { return _zc.is_ready(); }$/;"	f	class:cycfi::q::period_detector
is_ready	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline bool zero_crossing::is_ready() const$/;"	f	class:cycfi::q::zero_crossing
is_reset	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline bool zero_crossing::is_reset() const$/;"	f	class:cycfi::q::zero_crossing
is_valid	Q/q_io/include/q_io/audio_stream.hpp	/^      bool                    is_valid() const     { return _impl != nullptr; }$/;"	f	class:cycfi::q::port_audio_stream
is_valid	Q/q_io/include/q_io/midi_stream.hpp	/^      bool                 is_valid() const { return _impl != nullptr; }$/;"	f	class:cycfi::q::midi_input_stream
key	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   key() const       { return data[1]; }$/;"	f	struct:cycfi::q::midi::note_off
key	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   key() const       { return data[1]; }$/;"	f	struct:cycfi::q::midi::note_on
key	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   key() const       { return data[1]; }$/;"	f	struct:cycfi::q::midi::poly_aftertouch
last	Q/q_lib/include/q/support/audio_stream.hpp	/^         std::size_t last;$/;"	m	struct:cycfi::q::audio_channels::frames_view
leaky_integrator	Q/q_lib/include/q/fx/lowpass.hpp	/^      leaky_integrator(float a = 0.995)$/;"	f	struct:cycfi::q::leaky_integrator
leaky_integrator	Q/q_lib/include/q/fx/lowpass.hpp	/^      leaky_integrator(frequency f, std::uint32_t sps)$/;"	f	struct:cycfi::q::leaky_integrator
leaky_integrator	Q/q_lib/include/q/fx/lowpass.hpp	/^   struct leaky_integrator$/;"	s	namespace:cycfi::q
legato	Q/q_lib/include/q/support/midi.hpp	/^         legato               = 0x44,$/;"	e	enum:cycfi::q::midi::cc::controller
legato	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::legato()$/;"	f	class:cycfi::q::envelope
legato_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , legato_state         = 5$/;"	e	enum:cycfi::q::envelope::state_enum
length	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_reader::length() const$/;"	f	class:cycfi::q::wav_reader
linear	Q/q_lib/include/q/utility/interpolation.hpp	/^      struct linear$/;"	s	namespace:cycfi::q::sample_interpolation
linear_interpolate	Q/q_lib/include/q/support/base.hpp	/^   constexpr float linear_interpolate(float y1, float y2, float mu)$/;"	f	namespace:cycfi::q
list	Q/q_io/src/audio_device.cpp	/^   std::vector<audio_device> audio_device::list()$/;"	f	class:cycfi::q::audio_device
list	Q/q_io/src/midi_device.cpp	/^   std::vector<midi_device> midi_device::list()$/;"	f	class:cycfi::q::midi_device
literals	Q/q_lib/include/q/support/literals.hpp	/^   inline namespace literals$/;"	n	namespace:cycfi::q
local	Q/q_lib/include/q/support/midi.hpp	/^         local                = 0x7A,$/;"	e	enum:cycfi::q::midi::cc::controller
low1	Q/q_lib/include/q/fx/special.hpp	/^      float low1 = 0.0f;$/;"	m	struct:cycfi::q::dynamic_smoother
low2	Q/q_lib/include/q/fx/special.hpp	/^      float low2 = 0.0f;$/;"	m	struct:cycfi::q::dynamic_smoother
low_b	Q/test/notes.hpp	/^   CONSTEXPR frequency low_b          = B[1];$/;"	m	namespace:notes
low_e	Q/test/notes.hpp	/^   CONSTEXPR frequency low_e          = E[2];$/;"	m	namespace:notes
low_e_12th	Q/test/notes.hpp	/^   CONSTEXPR frequency low_e_12th     = E[3];$/;"	m	namespace:notes
low_e_24th	Q/test/notes.hpp	/^   CONSTEXPR frequency low_e_24th     = E[4];$/;"	m	namespace:notes
lowpass	Q/q_lib/include/q/fx/biquad.hpp	/^      lowpass(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::lowpass
lowpass	Q/q_lib/include/q/fx/biquad.hpp	/^   struct lowpass : biquad$/;"	s	namespace:cycfi::q
lowshelf	Q/q_lib/include/q/fx/biquad.hpp	/^      lowshelf(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::lowshelf
lowshelf	Q/q_lib/include/q/fx/biquad.hpp	/^   struct lowshelf : biquad$/;"	s	namespace:cycfi::q
m_blockSize	MyPlugin.h	/^    size_t m_blockSize;$/;"	m	class:MyPlugin
main	Q/example/delay.cpp	/^int main()$/;"	f
main	Q/example/list_devices.cpp	/^int main()$/;"	f
main	Q/example/midi_monitor.cpp	/^int main()$/;"	f
main	Q/example/sin_synth.cpp	/^int main()$/;"	f
main	Q/example/square_synth.cpp	/^int main()$/;"	f
main	Q/test/agc.cpp	/^int main()$/;"	f
main	Q/test/allpass.cpp	/^int main()$/;"	f
main	Q/test/biquad_lp.cpp	/^int main()$/;"	f
main	Q/test/comb.cpp	/^int main()$/;"	f
main	Q/test/compressor_expander.cpp	/^int main()$/;"	f
main	Q/test/compressor_expander2.cpp	/^int main()$/;"	f
main	Q/test/compressor_ff_fb.cpp	/^int main()$/;"	f
main	Q/test/envelope_follower.cpp	/^int main()$/;"	f
main	Q/test/fft.cpp	/^int main()$/;"	f
main	Q/test/gen_basic_pulse.cpp	/^int main()$/;"	f
main	Q/test/gen_basic_saw.cpp	/^int main()$/;"	f
main	Q/test/gen_basic_square.cpp	/^int main()$/;"	f
main	Q/test/gen_basic_triangle.cpp	/^int main()$/;"	f
main	Q/test/gen_pulse.cpp	/^int main()$/;"	f
main	Q/test/gen_saw.cpp	/^int main()$/;"	f
main	Q/test/gen_sin.cpp	/^int main()$/;"	f
main	Q/test/gen_square.cpp	/^int main()$/;"	f
main	Q/test/gen_triangle.cpp	/^int main()$/;"	f
main	Q/test/moving_average.cpp	/^int main()$/;"	f
main	Q/test/moving_average2.cpp	/^int main()$/;"	f
main	Q/test/moving_maximum2.cpp	/^int main()$/;"	f
main	Q/test/onset_detector.cpp	/^int main()$/;"	f
main	Q/test/peak_detector.cpp	/^int main()$/;"	f
main	Q/test/pitch_detector_ex.cpp	/^int main()$/;"	f
make	Q/q_lib/include/q/fx/biquad.hpp	/^         biquad make()$/;"	f	struct:cycfi::q::detail::config_biquad
makeup_gain	Q/q_lib/include/q/fx/onset_detector.hpp	/^      static constexpr auto makeup_gain = 4.0f;$/;"	m	struct:cycfi::q::onset_detector
map	Q/q_lib/include/q/fx/special.hpp	/^      constexpr map(float y1, float y2)$/;"	f	struct:cycfi::q::map
map	Q/q_lib/include/q/fx/special.hpp	/^   struct map$/;"	s	namespace:cycfi::q
max	Q/q_lib/include/q/fx/dynamic.hpp	/^      void max(decibel max_)$/;"	f	struct:cycfi::q::agc
max	Q/q_lib/include/q/support/base.hpp	/^      T min, max;$/;"	m	struct:cycfi::q::min_max_range
max	Q/q_lib/include/q/support/phase.hpp	/^      constexpr static phase        max()    { return phase(one_cyc); }$/;"	f	struct:cycfi::q::phase
max_deviation	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      static constexpr float  max_deviation = 0.90f;$/;"	m	class:cycfi::q::pitch_detector
max_error	Q/test/period_detector.cpp	/^float max_error = 0.001;   \/\/ 0.1% error$/;"	v
max_error	Q/test/pitch_detector.cpp	/^   float max_error = 0.0f;$/;"	m	struct:test_result	file:
max_error	Q/test/pitch_detector.cpp	/^float max_error = 0.01;   \/\/ 1% error or error$/;"	v
median3	Q/q_lib/include/q/fx/median.hpp	/^      median3(float median_ = 0.0f)$/;"	f	struct:cycfi::q::median3
median3	Q/q_lib/include/q/fx/median.hpp	/^   struct median3$/;"	s	namespace:cycfi::q
memoryStream	Q/q_io/external/include/dr_wav.h	/^    drwav__memory_stream memoryStream;$/;"	m	struct:__anon7
memoryStreamWrite	Q/q_io/external/include/dr_wav.h	/^    drwav__memory_stream_write memoryStreamWrite;$/;"	m	struct:__anon7
message	Q/q_lib/include/q/support/midi.hpp	/^   struct message$/;"	s	namespace:cycfi::q::midi
message1	Q/q_lib/include/q/support/midi.hpp	/^      message1(raw_message msg)$/;"	f	struct:cycfi::q::midi::message1
message1	Q/q_lib/include/q/support/midi.hpp	/^   struct message1 : message<1>$/;"	s	namespace:cycfi::q::midi
message2	Q/q_lib/include/q/support/midi.hpp	/^      message2(raw_message msg)$/;"	f	struct:cycfi::q::midi::message2
message2	Q/q_lib/include/q/support/midi.hpp	/^   struct message2 : message<2>$/;"	s	namespace:cycfi::q::midi
message3	Q/q_lib/include/q/support/midi.hpp	/^      message3(raw_message msg)$/;"	f	struct:cycfi::q::midi::message3
message3	Q/q_lib/include/q/support/midi.hpp	/^   struct message3 : message<3>$/;"	s	namespace:cycfi::q::midi
middle_c	Q/test/notes.hpp	/^   CONSTEXPR frequency middle_c       = C[4];$/;"	m	namespace:notes
midi	Q/q_lib/include/q/support/midi.hpp	/^namespace cycfi::q::midi$/;"	n	class:cycfi::q
midi_device	Q/q_io/include/q_io/midi_device.hpp	/^      midi_device(impl const& impl)$/;"	f	class:cycfi::q::midi_device
midi_device	Q/q_io/include/q_io/midi_device.hpp	/^   class midi_device$/;"	c	namespace:cycfi::q
midi_input_stream	Q/q_io/include/q_io/midi_stream.hpp	/^   class midi_input_stream$/;"	c	namespace:cycfi::q
midi_input_stream	Q/q_io/src/midi_stream.cpp	/^   midi_input_stream::midi_input_stream()$/;"	f	class:cycfi::q::midi_input_stream
midi_input_stream	Q/q_io/src/midi_stream.cpp	/^   midi_input_stream::midi_input_stream(midi_device const& device)$/;"	f	class:cycfi::q::midi_input_stream
midi_processor	Q/example/midi_monitor.cpp	/^struct midi_processor : midi::processor$/;"	s	file:
min	Q/q_lib/include/q/support/base.hpp	/^      T min, max;$/;"	m	struct:cycfi::q::min_max_range
min	Q/q_lib/include/q/support/phase.hpp	/^      constexpr static phase        min()    { return phase(); }$/;"	f	struct:cycfi::q::phase
min_error	Q/test/pitch_detector.cpp	/^   float min_error = 100.0f;$/;"	m	struct:test_result	file:
min_max_range	Q/q_lib/include/q/support/base.hpp	/^   struct min_max_range$/;"	s	namespace:cycfi::q
min_periodicity	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      static constexpr float  min_periodicity = 0.8f;$/;"	m	class:cycfi::q::pitch_detector
minimum_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^      std::size_t const       minimum_period() const  { return _min_period; }$/;"	f	class:cycfi::q::period_detector::std
modulation	Q/q_lib/include/q/support/midi.hpp	/^         modulation           = 0x01,$/;"	e	enum:cycfi::q::midi::cc::controller
modulation_lsb	Q/q_lib/include/q/support/midi.hpp	/^         modulation_lsb       = 0x21,$/;"	e	enum:cycfi::q::midi::cc::controller
mono	Q/q_lib/include/q/support/midi.hpp	/^         mono                 = 0x7E,$/;"	e	enum:cycfi::q::midi::cc::controller
monostable	Q/q_lib/include/q/fx/special.hpp	/^      monostable(duration d, std::uint32_t sps)$/;"	f	struct:cycfi::q::monostable
monostable	Q/q_lib/include/q/fx/special.hpp	/^   struct monostable$/;"	s	namespace:cycfi::q
moving_average	Q/q_lib/include/q/fx/moving_average.hpp	/^      moving_average(duration d, std::size_t sps)$/;"	f	struct:cycfi::q::moving_average
moving_average	Q/q_lib/include/q/fx/moving_average.hpp	/^      moving_average(std::size_t size)$/;"	f	struct:cycfi::q::moving_average
moving_average	Q/q_lib/include/q/fx/moving_average.hpp	/^   struct moving_average$/;"	s	namespace:cycfi::q
moving_maximum	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      moving_maximum(duration d, std::size_t sps)$/;"	f	struct:cycfi::q::moving_maximum
moving_maximum	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      moving_maximum(std::size_t size)$/;"	f	struct:cycfi::q::moving_maximum
moving_maximum	Q/q_lib/include/q/fx/moving_maximum.hpp	/^   struct moving_maximum$/;"	s	namespace:cycfi::q
msadpcm	Q/q_io/external/include/dr_wav.h	/^    } msadpcm;$/;"	m	struct:__anon7	typeref:struct:__anon7::__anon9
msg	Q/q_io/include/q_io/midi_stream.hpp	/^         midi::raw_message msg;$/;"	m	struct:cycfi::q::midi_input_stream::event
myPluginAdapter	plugins.cpp	/^static Vamp::PluginAdapter<MyPlugin> myPluginAdapter;$/;"	v	file:
my_midi_processor	Q/example/square_synth.cpp	/^   my_midi_processor(my_square_synth& synth)$/;"	f	struct:my_midi_processor
my_midi_processor	Q/example/square_synth.cpp	/^struct my_midi_processor : midi::processor$/;"	s	file:
my_square_synth	Q/example/square_synth.cpp	/^   my_square_synth(q::envelope::config env_cfg, int device_id)$/;"	f	struct:my_square_synth
my_square_synth	Q/example/square_synth.cpp	/^struct my_square_synth : q::port_audio_stream$/;"	s	file:
name	Q/q_io/src/audio_device.cpp	/^   std::string audio_device::name() const$/;"	f	class:cycfi::q::audio_device
name	Q/q_io/src/midi_device.cpp	/^   std::string midi_device::name() const$/;"	f	class:cycfi::q::midi_device
next	Q/q_io/src/midi_stream.cpp	/^   bool midi_input_stream::next(event& ev)$/;"	f	class:cycfi::q::midi_input_stream
next	Q/q_lib/include/q/fft/fft.hpp	/^         danielson_lanczos<N\/2> next;$/;"	m	struct:cycfi::q::detail::danielson_lanczos
next_frequency	Q/q_lib/include/q/support/notes.hpp	/^   constexpr frequency next_frequency(frequency F)$/;"	f	namespace:cycfi::q
none	Q/q_lib/include/q/utility/interpolation.hpp	/^      struct none$/;"	s	namespace:cycfi::q::sample_interpolation
nonrpn_lsb	Q/q_lib/include/q/support/midi.hpp	/^         nonrpn_lsb           = 0x62,$/;"	e	enum:cycfi::q::midi::cc::controller
nonrpn_msb	Q/q_lib/include/q/support/midi.hpp	/^         nonrpn_msb           = 0x63,$/;"	e	enum:cycfi::q::midi::cc::controller
notch	Q/q_lib/include/q/fx/biquad.hpp	/^      notch(frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::notch
notch	Q/q_lib/include/q/fx/biquad.hpp	/^      notch(frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::notch
notch	Q/q_lib/include/q/fx/biquad.hpp	/^   struct notch : biquad$/;"	s	namespace:cycfi::q
note	Q/q_lib/include/q/support/midi.hpp	/^   enum class note : std::uint8_t$/;"	c	namespace:cycfi::q::midi
note	Q/q_lib/include/q/support/notes.hpp	/^   CONSTEXPR octave_notes note[] =$/;"	m	namespace:cycfi::q
note_frequencies	Q/q_lib/include/q/support/notes.hpp	/^   CONSTEXPR octave_frequencies note_frequencies[] =$/;"	m	namespace:cycfi::q
note_frequency	Q/q_lib/include/q/support/midi.hpp	/^   constexpr frequency note_frequency(std::uint8_t key)$/;"	f	namespace:cycfi::q::midi
note_name	Q/q_lib/include/q/support/midi.hpp	/^   constexpr char const* note_name(std::uint8_t key)$/;"	f	namespace:cycfi::q::midi
note_number	Q/q_lib/include/q/support/midi.hpp	/^   inline int note_number(std::string_view note)$/;"	f	namespace:cycfi::q::midi
note_off	Q/q_lib/include/q/support/midi.hpp	/^         note_off             = 0x80,$/;"	e	enum:cycfi::q::midi::status::__anon17
note_off	Q/q_lib/include/q/support/midi.hpp	/^      note_off(std::uint8_t channel, std::uint8_t key, std::uint8_t velocity)$/;"	f	struct:cycfi::q::midi::note_off
note_off	Q/q_lib/include/q/support/midi.hpp	/^   struct note_off : message3$/;"	s	namespace:cycfi::q::midi
note_off_level	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::note_off_level(float level)$/;"	f	class:cycfi::q::envelope
note_off_state	Q/q_lib/include/q/synth/envelope.hpp	/^         note_off_state       = 0$/;"	e	enum:cycfi::q::envelope::state_enum
note_on	Q/q_lib/include/q/support/midi.hpp	/^         note_on              = 0x90,$/;"	e	enum:cycfi::q::midi::status::__anon17
note_on	Q/q_lib/include/q/support/midi.hpp	/^      note_on(std::uint8_t channel, std::uint8_t key, std::uint8_t velocity)$/;"	f	struct:cycfi::q::midi::note_on
note_on	Q/q_lib/include/q/support/midi.hpp	/^   struct note_on : message3$/;"	s	namespace:cycfi::q::midi
note_release_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , note_release_state   = 1$/;"	e	enum:cycfi::q::envelope::state_enum
notes	Q/q_lib/include/q/support/notes.hpp	/^   namespace notes$/;"	n	namespace:cycfi::q
notes	Q/test/notes.hpp	/^namespace notes$/;"	n
num_channels	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_base::num_channels() const$/;"	f	class:cycfi::q::wav_base
num_edges	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline std::size_t zero_crossing::num_edges() const$/;"	f	class:cycfi::q::zero_crossing
num_inputs	Q/q_io/src/midi_device.cpp	/^   std::size_t midi_device::num_inputs() const$/;"	f	class:cycfi::q::midi_device
num_outputs	Q/q_io/src/midi_device.cpp	/^   std::size_t midi_device::num_outputs() const$/;"	f	class:cycfi::q::midi_device
octave_frequencies	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR octave_frequencies(frequency base)$/;"	f	struct:cycfi::q::octave_frequencies
octave_frequencies	Q/q_lib/include/q/support/notes.hpp	/^   struct octave_frequencies$/;"	s	namespace:cycfi::q
octave_notes	Q/q_lib/include/q/support/notes.hpp	/^      constexpr octave_notes(frequency base)$/;"	f	struct:cycfi::q::octave_notes
octave_notes	Q/q_lib/include/q/support/notes.hpp	/^   struct octave_notes$/;"	s	namespace:cycfi::q
omega	Q/q_lib/include/q/fx/biquad.hpp	/^         double omega, sin, cos, alpha;$/;"	m	struct:cycfi::q::detail::config_biquad
omni_off	Q/q_lib/include/q/support/midi.hpp	/^         omni_off             = 0x7C,$/;"	e	enum:cycfi::q::midi::cc::controller
omni_on	Q/q_lib/include/q/support/midi.hpp	/^         omni_on              = 0x7D,$/;"	e	enum:cycfi::q::midi::cc::controller
onRead	Q/q_io/external/include/dr_wav.h	/^    drwav_read_proc onRead;$/;"	m	struct:__anon7
onSeek	Q/q_io/external/include/dr_wav.h	/^    drwav_seek_proc onSeek;$/;"	m	struct:__anon7
onWrite	Q/q_io/external/include/dr_wav.h	/^    drwav_write_proc onWrite;$/;"	m	struct:__anon7
one	Q/q_lib/include/q/utility/bitset.hpp	/^      static constexpr auto one = T{1};$/;"	m	class:cycfi::q::bitset
one_cyc	Q/q_lib/include/q/support/phase.hpp	/^      constexpr static auto one_cyc = int_max<std::uint32_t>();$/;"	m	struct:cycfi::q::phase
one_pole_allpass	Q/q_lib/include/q/fx/allpass.hpp	/^      one_pole_allpass(float a)$/;"	f	struct:cycfi::q::one_pole_allpass
one_pole_allpass	Q/q_lib/include/q/fx/allpass.hpp	/^      one_pole_allpass(frequency freq, std::uint32_t sps)$/;"	f	struct:cycfi::q::one_pole_allpass
one_pole_allpass	Q/q_lib/include/q/fx/allpass.hpp	/^   struct one_pole_allpass$/;"	s	namespace:cycfi::q
one_pole_lowpass	Q/q_lib/include/q/fx/lowpass.hpp	/^      one_pole_lowpass(float a)$/;"	f	struct:cycfi::q::one_pole_lowpass
one_pole_lowpass	Q/q_lib/include/q/fx/lowpass.hpp	/^      one_pole_lowpass(frequency freq, std::uint32_t sps)$/;"	f	struct:cycfi::q::one_pole_lowpass
one_pole_lowpass	Q/q_lib/include/q/fx/lowpass.hpp	/^   struct one_pole_lowpass$/;"	s	namespace:cycfi::q
onset_detector	Q/q_lib/include/q/fx/onset_detector.hpp	/^      onset_detector(decibel hysteresis, std::uint32_t sps)$/;"	f	struct:cycfi::q::onset_detector
onset_detector	Q/q_lib/include/q/fx/onset_detector.hpp	/^   struct onset_detector$/;"	s	namespace:cycfi::q
operator !=	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator!=(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator !=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator!=(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator !=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator!=(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator !=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator!=(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator &	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator&(const v4sf& a, const v4sf& b) { return _mm_and_ps(a,b); }$/;"	f	namespace:__anon13
operator &	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator&(const v4si& a, const v4si& b) { return _mm_and_si128(a,b); }$/;"	f	namespace:__anon13
operator &=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator&=(v4si& a, const v4si& b) { return a = a & b; }$/;"	f	namespace:__anon13
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::channel_aftertouch msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::control_change msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::note_off msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::note_on msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::pitch_bend msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::poly_aftertouch msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/midi_monitor.cpp	/^   void operator()(midi::program_change msg, std::size_t time)$/;"	f	struct:midi_processor
operator ()	Q/example/square_synth.cpp	/^   void operator()(midi::note_off msg, std::size_t time)$/;"	f	struct:my_midi_processor
operator ()	Q/example/square_synth.cpp	/^   void operator()(midi::note_on msg, std::size_t time)$/;"	f	struct:my_midi_processor
operator ()	Q/q_io/include/q_io/audio_file.hpp	/^   inline iterator_range<float const*> const wav_memory::operator()()$/;"	f	class:cycfi::q::wav_memory
operator ()	Q/q_lib/include/q/fx/allpass.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::one_pole_allpass
operator ()	Q/q_lib/include/q/fx/allpass.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::polyphase_allpass
operator ()	Q/q_lib/include/q/fx/biquad.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::biquad
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()() const$/;"	f	class:cycfi::q::basic_delay
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::delay1
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()(Index i) const$/;"	f	class:cycfi::q::basic_delay
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::delay1
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::delay2
operator ()	Q/q_lib/include/q/fx/delay.hpp	/^      float operator()(float val, Index i)$/;"	f	class:cycfi::q::basic_delay
operator ()	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel operator()(decibel env)$/;"	f	struct:cycfi::q::compressor
operator ()	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel operator()(decibel env)$/;"	f	struct:cycfi::q::expander
operator ()	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel operator()(decibel env)$/;"	f	struct:cycfi::q::soft_knee_compressor
operator ()	Q/q_lib/include/q/fx/dynamic.hpp	/^      decibel operator()(decibel env, decibel ref)$/;"	f	struct:cycfi::q::agc
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::envelope_follower
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::fast_envelope_follower
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::peak_envelope_follower
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::envelope_follower
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::fast_envelope_follower
operator ()	Q/q_lib/include/q/fx/envelope.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::peak_envelope_follower
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()() const$/;"	f	struct:cycfi::q::peak
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()() const$/;"	f	struct:cycfi::q::schmitt_trigger
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()() const$/;"	f	struct:cycfi::q::window_comparator
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()(float pos, float neg)$/;"	f	struct:cycfi::q::schmitt_trigger
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()(float s)$/;"	f	struct:cycfi::q::window_comparator
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()(float s)$/;"	f	struct:cycfi::q::zero_cross
operator ()	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool operator()(float s, float env)$/;"	f	struct:cycfi::q::peak
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      T operator()() const$/;"	f	struct:cycfi::q::fixed_pt_leaky_integrator
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      T operator()(T s)$/;"	f	struct:cycfi::q::fixed_pt_leaky_integrator
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::leaky_integrator
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::one_pole_lowpass
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::reso_filter
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::leaky_integrator
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::one_pole_lowpass
operator ()	Q/q_lib/include/q/fx/lowpass.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::reso_filter
operator ()	Q/q_lib/include/q/fx/median.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::median3
operator ()	Q/q_lib/include/q/fx/median.hpp	/^      float operator()(float a)$/;"	f	struct:cycfi::q::median3
operator ()	Q/q_lib/include/q/fx/moving_average.hpp	/^      T operator()() const$/;"	f	struct:cycfi::q::moving_average
operator ()	Q/q_lib/include/q/fx/moving_average.hpp	/^      T operator()(T s)$/;"	f	struct:cycfi::q::moving_average
operator ()	Q/q_lib/include/q/fx/moving_average.hpp	/^      float operator()() const$/;"	f	struct:cycfi::q::exp_moving_average
operator ()	Q/q_lib/include/q/fx/moving_average.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::exp_moving_average
operator ()	Q/q_lib/include/q/fx/moving_maximum.hpp	/^      T operator()(T value)$/;"	f	struct:cycfi::q::moving_maximum
operator ()	Q/q_lib/include/q/fx/onset_detector.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::onset_detector
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      bool operator()(bool val)$/;"	f	struct:cycfi::q::monostable
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      constexpr T operator()(T s1, T s2)$/;"	f	struct:cycfi::q::fast_downsample
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      constexpr bool operator()(bool val)$/;"	f	struct:cycfi::q::rising_edge
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      constexpr float operator()(float s) const$/;"	f	struct:cycfi::q::map
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float a, float b, decibel ctrl)$/;"	f	struct:cycfi::q::crossfade
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::central_difference
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::dc_block
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::differentiator
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::dynamic_smoother
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      float operator()(float s)$/;"	f	struct:cycfi::q::integrator
operator ()	Q/q_lib/include/q/fx/special.hpp	/^      std::pair<float, float> operator()(float s)$/;"	f	struct:cycfi::q::hilbert_quadrature
operator ()	Q/q_lib/include/q/fx/waveshaper.hpp	/^      constexpr float operator()(float s) const$/;"	f	struct:cycfi::q::clip
operator ()	Q/q_lib/include/q/fx/waveshaper.hpp	/^      constexpr float operator()(float s) const$/;"	f	struct:cycfi::q::soft_clip
operator ()	Q/q_lib/include/q/pitch/period_detector.hpp	/^         void operator()(info const& incoming)$/;"	f	struct:cycfi::q::detail::collector
operator ()	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline bool period_detector::operator()() const$/;"	f	class:cycfi::q::period_detector
operator ()	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline bool period_detector::operator()(float s)$/;"	f	class:cycfi::q::period_detector
operator ()	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline bool pitch_detector::operator()(float s)$/;"	f	class:cycfi::q::pitch_detector
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(active_sensing msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(channel_aftertouch msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(continue_ msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(control_change msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(note_off msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(note_on msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(pitch_bend msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(poly_aftertouch msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(program_change msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(reset msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(song_position msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(song_select msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(start msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(stop msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(timing_tick msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/support/midi.hpp	/^      void     operator()(tune_request msg, std::size_t time) {}$/;"	f	struct:cycfi::q::midi::processor
operator ()	Q/q_lib/include/q/synth/envelope.hpp	/^   inline float envelope::operator()()$/;"	f	class:cycfi::q::envelope
operator ()	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr float operator()(phase p) const$/;"	f	struct:cycfi::q::basic_pulse_synth
operator ()	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr float operator()(phase p, phase dt) const$/;"	f	struct:cycfi::q::pulse_synth
operator ()	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::basic_pulse_synth
operator ()	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::pulse_synth
operator ()	Q/q_lib/include/q/synth/saw.hpp	/^      constexpr float operator()(phase p) const$/;"	f	struct:cycfi::q::basic_saw_synth
operator ()	Q/q_lib/include/q/synth/saw.hpp	/^      constexpr float operator()(phase p, phase dt) const$/;"	f	struct:cycfi::q::saw_synth
operator ()	Q/q_lib/include/q/synth/saw.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::basic_saw_synth
operator ()	Q/q_lib/include/q/synth/saw.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::saw_synth
operator ()	Q/q_lib/include/q/synth/sin.hpp	/^      constexpr float operator()(phase p) const$/;"	f	struct:cycfi::q::sin_synth
operator ()	Q/q_lib/include/q/synth/sin.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::sin_synth
operator ()	Q/q_lib/include/q/synth/square.hpp	/^      constexpr float operator()(phase p) const$/;"	f	struct:cycfi::q::basic_square_synth
operator ()	Q/q_lib/include/q/synth/square.hpp	/^      constexpr float operator()(phase p, phase dt) const$/;"	f	struct:cycfi::q::square_synth
operator ()	Q/q_lib/include/q/synth/square.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::basic_square_synth
operator ()	Q/q_lib/include/q/synth/square.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::square_synth
operator ()	Q/q_lib/include/q/synth/triangle.hpp	/^      constexpr float operator()(phase p) const$/;"	f	struct:cycfi::q::basic_triangle_synth
operator ()	Q/q_lib/include/q/synth/triangle.hpp	/^      constexpr float operator()(phase p, phase dt) const$/;"	f	struct:cycfi::q::triangle_synth
operator ()	Q/q_lib/include/q/synth/triangle.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::basic_triangle_synth
operator ()	Q/q_lib/include/q/synth/triangle.hpp	/^      constexpr float operator()(phase_iterator i) const$/;"	f	struct:cycfi::q::triangle_synth
operator ()	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^      std::size_t operator()(std::size_t pos)$/;"	f	struct:cycfi::q::bitstream_acf
operator ()	Q/q_lib/include/q/utility/interpolation.hpp	/^         T operator()(Storage const& buffer, T index) const$/;"	f	struct:cycfi::q::sample_interpolation::linear
operator ()	Q/q_lib/include/q/utility/interpolation.hpp	/^         T operator()(Storage const& buffer, T index) const$/;"	f	struct:cycfi::q::sample_interpolation::none
operator ()	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline bool zero_crossing::operator()() const$/;"	f	class:cycfi::q::zero_crossing
operator ()	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline bool zero_crossing::operator()(float s)$/;"	f	class:cycfi::q::zero_crossing
operator *	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator*(const v4sf& a, const v4sf& b) { return _mm_mul_ps(a,b); }$/;"	f	namespace:__anon13
operator *	Q/q_lib/include/q/support/audio_stream.hpp	/^         std::size_t operator*() const    { return i; }$/;"	f	struct:cycfi::q::audio_channels::frame_index
operator *	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator*(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator*(decibel a, double b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator*(decibel a, float b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator*(double a, decibel b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator*(float a, decibel b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived operator*(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/value.hpp	/^   operator*(T2 a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator *	Q/q_lib/include/q/support/value.hpp	/^   operator*(value<T, Derived> a, T2 b)$/;"	f	namespace:cycfi::q
operator *=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator*=(v4sf& a, const v4sf& b) { return a = a * b; }$/;"	f	namespace:__anon13
operator *=	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel& operator*=(decibel b)     { val *= b.val; return *this; }$/;"	f	struct:cycfi::q::decibel
operator *=	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived& value<T, Derived>::operator*=(value<T, Derived> rhs)$/;"	f	class:cycfi::q::value
operator +	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator+(const v4sf& a) { return a; }$/;"	f	namespace:__anon13
operator +	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator+(const v4sf& a, const v4sf& b) { return _mm_add_ps(a,b); }$/;"	f	namespace:__anon13
operator +	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel operator+() const          { return { val, direct }; }$/;"	f	struct:cycfi::q::decibel
operator +	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator+(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator +	Q/q_lib/include/q/support/value.hpp	/^      constexpr derived_type        operator+() const { return derived(); }$/;"	f	struct:cycfi::q::value
operator +	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived operator+(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator +	Q/q_lib/include/q/support/value.hpp	/^   operator+(T2 a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator +	Q/q_lib/include/q/support/value.hpp	/^   operator+(value<T, Derived> a, T2 b)$/;"	f	namespace:cycfi::q
operator ++	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator phase_iterator::operator++(int)$/;"	f	class:cycfi::q::phase_iterator
operator ++	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator& phase_iterator::operator++()$/;"	f	class:cycfi::q::phase_iterator
operator +=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator+=(v4sf& a, const v4sf& b) { return a = a + b; }$/;"	f	namespace:__anon13
operator +=	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel& operator+=(decibel b)     { val += b.val; return *this; }$/;"	f	struct:cycfi::q::decibel
operator +=	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived& value<T, Derived>::operator+=(value<T, Derived> rhs)$/;"	f	class:cycfi::q::value
operator -	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator-(const v4sf& a) { return _mm_xor_ps(a, _mm_castsi128_ps(_mm_set1_epi32(0x80000000))); }$/;"	f	namespace:__anon13
operator -	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator-(const v4sf& a, const v4sf& b) { return _mm_sub_ps(a,b); }$/;"	f	namespace:__anon13
operator -	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel operator-() const          { return { -val, direct }; }$/;"	f	struct:cycfi::q::decibel
operator -	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr decibel operator-(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator -	Q/q_lib/include/q/support/value.hpp	/^      constexpr derived_type        operator-() const { return derived_type{-rep}; }$/;"	f	struct:cycfi::q::value
operator -	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived operator-(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator -	Q/q_lib/include/q/support/value.hpp	/^   operator-(T2 a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator -	Q/q_lib/include/q/support/value.hpp	/^   operator-(value<T, Derived> a, T2 b)$/;"	f	namespace:cycfi::q
operator --	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator phase_iterator::operator--(int)$/;"	f	class:cycfi::q::phase_iterator
operator --	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator& phase_iterator::operator--()$/;"	f	class:cycfi::q::phase_iterator
operator -=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator-=(v4sf& a, const v4sf& b) { return a = a - b; }$/;"	f	namespace:__anon13
operator -=	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel& operator-=(decibel b)     { val -= b.val; return *this; }$/;"	f	struct:cycfi::q::decibel
operator -=	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived& value<T, Derived>::operator-=(value<T, Derived> rhs)$/;"	f	class:cycfi::q::value
operator /	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator\/(const v4sf& a, const v4sf& b) { return _mm_div_ps(a,b); }$/;"	f	namespace:__anon13
operator /	Q/q_lib/include/q/support/decibel.hpp	/^   inline decibel operator\/(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator /	Q/q_lib/include/q/support/decibel.hpp	/^   inline decibel operator\/(decibel a, double b)$/;"	f	namespace:cycfi::q
operator /	Q/q_lib/include/q/support/decibel.hpp	/^   inline decibel operator\/(decibel a, float b)$/;"	f	namespace:cycfi::q
operator /	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived operator\/(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator /	Q/q_lib/include/q/support/value.hpp	/^   operator\/(T2 a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator /	Q/q_lib/include/q/support/value.hpp	/^   operator\/(value<T, Derived> a, T2 b)$/;"	f	namespace:cycfi::q
operator /=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator\/=(v4sf& a, const v4sf& b) { return a = a \/ b; }$/;"	f	namespace:__anon13
operator /=	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr decibel& operator\/=(decibel b)     { val \/= b.val; return *this; }$/;"	f	struct:cycfi::q::decibel
operator /=	Q/q_lib/include/q/support/value.hpp	/^   constexpr Derived& value<T, Derived>::operator\/=(value<T, Derived> rhs)$/;"	f	class:cycfi::q::value
operator <	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator<(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator <	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator <	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator <	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator <=	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator<=(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator <=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<=(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator <=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<=(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator <=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator<=(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator =	Q/q_lib/include/q/fx/envelope.hpp	/^      envelope_follower& operator=(float y_)$/;"	f	struct:cycfi::q::envelope_follower
operator =	Q/q_lib/include/q/fx/envelope.hpp	/^      peak_envelope_follower& operator=(float y_)$/;"	f	struct:cycfi::q::peak_envelope_follower
operator =	Q/q_lib/include/q/fx/feature_detection.hpp	/^      window_comparator& operator=(bool y_)$/;"	f	struct:cycfi::q::window_comparator
operator =	Q/q_lib/include/q/fx/lowpass.hpp	/^      fixed_pt_leaky_integrator& operator=(float y_)$/;"	f	struct:cycfi::q::fixed_pt_leaky_integrator
operator =	Q/q_lib/include/q/fx/lowpass.hpp	/^      leaky_integrator& operator=(float y_)$/;"	f	struct:cycfi::q::leaky_integrator
operator =	Q/q_lib/include/q/fx/lowpass.hpp	/^      one_pole_lowpass& operator=(float y_)$/;"	f	struct:cycfi::q::one_pole_lowpass
operator =	Q/q_lib/include/q/fx/median.hpp	/^      median3& operator=(float median_)$/;"	f	struct:cycfi::q::median3
operator =	Q/q_lib/include/q/fx/moving_average.hpp	/^      exp_moving_average& operator=(float y_)$/;"	f	struct:cycfi::q::exp_moving_average
operator =	Q/q_lib/include/q/fx/special.hpp	/^      dc_block& operator=(bool y_)$/;"	f	struct:cycfi::q::dc_block
operator =	Q/q_lib/include/q/fx/special.hpp	/^      integrator& operator=(float y_)$/;"	f	struct:cycfi::q::integrator
operator =	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator& phase_iterator::operator=(phase rhs)$/;"	f	class:cycfi::q::phase_iterator
operator ==	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator==(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator ==	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator==(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator ==	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator==(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator ==	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator==(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator >	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator>(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator >	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator >	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator >	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator >=	Q/q_lib/include/q/support/decibel.hpp	/^   constexpr bool operator>=(decibel a, decibel b)$/;"	f	namespace:cycfi::q
operator >=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>=(T a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator >=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>=(value<T, Derived> a, T b)$/;"	f	namespace:cycfi::q
operator >=	Q/q_lib/include/q/support/value.hpp	/^   constexpr bool operator>=(value<T, Derived> a, value<T, Derived> b)$/;"	f	namespace:cycfi::q
operator T	Q/q_lib/include/q/support/value.hpp	/^      constexpr explicit operator   T() const         { return rep; }$/;"	f	struct:cycfi::q::value
operator []	Q/q_lib/include/q/support/audio_stream.hpp	/^   audio_channels<T>::operator[](std::size_t channel) const$/;"	f	class:cycfi::q::audio_channels
operator []	Q/q_lib/include/q/support/notes.hpp	/^      CONSTEXPR frequency operator[](std::size_t semitone) const$/;"	f	struct:cycfi::q::octave_frequencies
operator []	Q/q_lib/include/q/utility/fractional_ring_buffer.hpp	/^      T const operator[](Index index) const$/;"	f	class:cycfi::q::fractional_ring_buffer
operator []	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T const& ring_buffer<T, Storage>::operator[](std::size_t index) const$/;"	f	class:cycfi::q::ring_buffer
operator []	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline T& ring_buffer<T, Storage>::operator[](std::size_t index)$/;"	f	class:cycfi::q::ring_buffer
operator []	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   zero_crossing::operator[](std::size_t index) const$/;"	f	class:cycfi::q::zero_crossing::zero_crossing
operator []	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   zero_crossing::operator[](std::size_t index)$/;"	f	class:cycfi::q::zero_crossing
operator ^	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator^(const v4sf& a, const v4sf& b) { return _mm_xor_ps(a,b); }$/;"	f	namespace:__anon13
operator ^	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator^(const v4si& a, const v4si& b) { return _mm_xor_si128(a,b); }$/;"	f	namespace:__anon13
operator ^=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator^=(v4si& a, const v4si& b) { return a = a ^ b; }$/;"	f	namespace:__anon13
operator bool	Q/q_io/src/audio_file.cpp	/^   wav_base::operator bool() const$/;"	f	class:cycfi::q::wav_base
operator double	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr explicit operator double() const   { return detail::db2a(val); }$/;"	f	struct:cycfi::q::decibel
operator double	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr explicit operator   double() const   { return rep; }$/;"	f	struct:cycfi::q::duration
operator double	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr explicit operator   double() const   { return rep; }$/;"	f	struct:cycfi::q::frequency
operator double	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::operator double() const$/;"	f	class:cycfi::q::phase
operator float	Q/q_lib/include/q/support/decibel.hpp	/^      constexpr explicit operator float() const    { return detail::db2a(val); }$/;"	f	struct:cycfi::q::decibel
operator float	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr explicit operator   float() const    { return rep; }$/;"	f	struct:cycfi::q::duration
operator float	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr explicit operator   float() const    { return rep; }$/;"	f	struct:cycfi::q::frequency
operator float	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::operator float() const$/;"	f	class:cycfi::q::phase
operator std::size_t	Q/q_lib/include/q/support/audio_stream.hpp	/^         operator std::size_t() const     { return i; }$/;"	f	struct:cycfi::q::audio_channels::frame_index
operator std::size_t&	Q/q_lib/include/q/support/audio_stream.hpp	/^         operator std::size_t&()          { return i; }$/;"	f	struct:cycfi::q::audio_channels::frame_index
operator |	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4sf operator|(const v4sf& a, const v4sf& b) { return _mm_or_ps(a,b); }$/;"	f	namespace:__anon13
operator |	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator|(const v4si& a, const v4si& b) { return _mm_or_si128(a,b); }$/;"	f	namespace:__anon13
operator |=	Q/q_lib/include/q/detail/fast_math.hpp	/^  __forceinline const v4si operator|=(v4si& a, const v4si& b) { return a = a | b; }$/;"	f	namespace:__anon13
output	Q/q_io/include/q_io/audio_device.hpp	/^      enum io_dir { input, output };$/;"	e	enum:cycfi::q::audio_device::io_dir
output_channels	Q/q_io/include/q_io/audio_stream.hpp	/^      std::size_t             output_channels() const { return _output_channels; }$/;"	f	class:cycfi::q::port_audio_stream
output_channels	Q/q_io/src/audio_device.cpp	/^   std::size_t audio_device::output_channels() const$/;"	f	class:cycfi::q::audio_device
output_latency	Q/q_io/src/audio_stream.cpp	/^   duration port_audio_stream::output_latency() const$/;"	f	class:cycfi::q::port_audio_stream
pDataSize	Q/q_io/external/include/dr_wav.h	/^    size_t* pDataSize;$/;"	m	struct:__anon4
pUserData	Q/q_io/external/include/dr_wav.h	/^    void* pUserData;$/;"	m	struct:__anon7
paddingSize	Q/q_io/external/include/dr_wav.h	/^    unsigned int paddingSize;$/;"	m	struct:__anon11
pan	Q/q_lib/include/q/support/midi.hpp	/^         pan                  = 0x0A,$/;"	e	enum:cycfi::q::midi::cc::controller
pan_lsb	Q/q_lib/include/q/support/midi.hpp	/^         pan_lsb              = 0x2A,$/;"	e	enum:cycfi::q::midi::cc::controller
params	Q/test/period_detector.cpp	/^struct params$/;"	s	file:
params	Q/test/pitch_detector.cpp	/^struct params$/;"	s	file:
peak	Q/q_lib/include/q/fx/feature_detection.hpp	/^      peak(float sensitivity, decibel hysteresis)$/;"	f	struct:cycfi::q::peak
peak	Q/q_lib/include/q/fx/feature_detection.hpp	/^      peak(float sensitivity, float hysteresis)$/;"	f	struct:cycfi::q::peak
peak	Q/q_lib/include/q/fx/feature_detection.hpp	/^   struct peak$/;"	s	namespace:cycfi::q
peak_env	Q/q_lib/include/q/fx/onset_detector.hpp	/^      float peak_env() const$/;"	f	struct:cycfi::q::onset_detector
peak_envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^      peak_envelope_follower(duration release, std::uint32_t sps)$/;"	f	struct:cycfi::q::peak_envelope_follower
peak_envelope_follower	Q/q_lib/include/q/fx/envelope.hpp	/^   struct peak_envelope_follower$/;"	s	namespace:cycfi::q
peak_pulse	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline float zero_crossing::peak_pulse() const$/;"	f	class:cycfi::q::zero_crossing
peaking	Q/q_lib/include/q/fx/biquad.hpp	/^      peaking(double db_gain, frequency f, std::uint32_t sps, bw _bw)$/;"	f	struct:cycfi::q::peaking
peaking	Q/q_lib/include/q/fx/biquad.hpp	/^      peaking(double db_gain, frequency f, std::uint32_t sps, double q = 0.707)$/;"	f	struct:cycfi::q::peaking
peaking	Q/q_lib/include/q/fx/biquad.hpp	/^   struct peaking : biquad$/;"	s	namespace:cycfi::q
period	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr                     period(duration d) : duration(d) {}$/;"	f	struct:cycfi::q::period
period	Q/q_lib/include/q/support/frequency.hpp	/^      constexpr                     period(frequency f) : duration(1.0 \/ f.rep) {}$/;"	f	struct:cycfi::q::period
period	Q/q_lib/include/q/support/frequency.hpp	/^   constexpr q::period frequency::period() const$/;"	f	class:cycfi::q::frequency
period	Q/q_lib/include/q/support/frequency.hpp	/^   struct period : duration$/;"	s	namespace:cycfi::q
period	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline std::size_t zero_crossing::info::period(info const& next) const$/;"	f	class:cycfi::q::zero_crossing::info
period_detector	Q/q_lib/include/q/pitch/period_detector.hpp	/^   class period_detector$/;"	c	namespace:cycfi::q
period_detector	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline period_detector::period_detector($/;"	f	class:cycfi::q::period_detector
periodicity	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline float pitch_detector::periodicity() const$/;"	f	class:cycfi::q::pitch_detector
periodicity_diff_factor	Q/q_lib/include/q/pitch/period_detector.hpp	/^      static constexpr float periodicity_diff_factor = 0.008;$/;"	m	class:cycfi::q::period_detector
phase	Q/example/sin_synth.cpp	/^   q::phase_iterator phase;   \/\/ The phase iterator$/;"	m	struct:sin_synth	file:
phase	Q/example/square_synth.cpp	/^   q::phase_iterator phase;            \/\/ The phase iterator$/;"	m	struct:my_square_synth	file:
phase	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::phase(double frac)$/;"	f	class:cycfi::q::phase
phase	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::phase(float frac)$/;"	f	class:cycfi::q::phase
phase	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::phase(frequency freq, std::uint32_t sps)$/;"	f	class:cycfi::q::phase
phase	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase::phase(value_type val)$/;"	f	class:cycfi::q::phase
phase	Q/q_lib/include/q/support/phase.hpp	/^   struct phase : value<std::uint32_t, phase>$/;"	s	namespace:cycfi::q
phase_iterator	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator::phase_iterator()$/;"	f	class:cycfi::q::phase_iterator
phase_iterator	Q/q_lib/include/q/support/phase.hpp	/^   constexpr phase_iterator::phase_iterator(frequency freq, std::uint32_t sps)$/;"	f	class:cycfi::q::phase_iterator
phase_iterator	Q/q_lib/include/q/support/phase.hpp	/^   struct phase_iterator$/;"	s	namespace:cycfi::q
pi	Q/q_lib/include/q/support/base.hpp	/^   constexpr double pi = 3.1415926535897932384626433832795;$/;"	m	namespace:cycfi::q
pitch_bend	Q/q_lib/include/q/support/midi.hpp	/^         pitch_bend           = 0xE0,$/;"	e	enum:cycfi::q::midi::status::__anon17
pitch_bend	Q/q_lib/include/q/support/midi.hpp	/^      pitch_bend(std::uint8_t channel, std::uint16_t lsb, std::uint8_t msb)$/;"	f	struct:cycfi::q::midi::pitch_bend
pitch_bend	Q/q_lib/include/q/support/midi.hpp	/^      pitch_bend(std::uint8_t channel, std::uint16_t value)$/;"	f	struct:cycfi::q::midi::pitch_bend
pitch_bend	Q/q_lib/include/q/support/midi.hpp	/^   struct pitch_bend : message3$/;"	s	namespace:cycfi::q::midi
pitch_detector	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   class pitch_detector$/;"	c	namespace:cycfi::q
pitch_detector	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline pitch_detector::pitch_detector($/;"	f	class:cycfi::q::pitch_detector
pivot	Q/q_lib/include/q/fx/allpass.hpp	/^      void pivot(frequency freq, std::uint32_t sps)$/;"	f	struct:cycfi::q::one_pole_allpass
pivot	Q/q_lib/include/q/fx/special.hpp	/^      void pivot(decibel pivot_)$/;"	f	struct:cycfi::q::crossfade
poly	Q/q_lib/include/q/support/midi.hpp	/^         poly                 = 0x7F$/;"	e	enum:cycfi::q::midi::cc::controller
poly_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^         poly_aftertouch      = 0xA0,$/;"	e	enum:cycfi::q::midi::status::__anon17
poly_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^      poly_aftertouch(std::uint8_t channel, std::uint8_t key, std::uint8_t pressure)$/;"	f	struct:cycfi::q::midi::poly_aftertouch
poly_aftertouch	Q/q_lib/include/q/support/midi.hpp	/^   struct poly_aftertouch : message3$/;"	s	namespace:cycfi::q::midi
poly_blamp	Q/q_lib/include/q/utility/antialiasing.hpp	/^   constexpr double poly_blamp(phase p, phase dt, float scale)$/;"	f	namespace:cycfi::q
poly_blep	Q/q_lib/include/q/utility/antialiasing.hpp	/^   constexpr float poly_blep(phase p, phase dt)$/;"	f	namespace:cycfi::q
polyphase_allpass	Q/q_lib/include/q/fx/allpass.hpp	/^      polyphase_allpass(float a)$/;"	f	struct:cycfi::q::polyphase_allpass
polyphase_allpass	Q/q_lib/include/q/fx/allpass.hpp	/^   struct polyphase_allpass$/;"	s	namespace:cycfi::q
pop_front	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline void ring_buffer<T, Storage>::pop_front()$/;"	f	class:cycfi::q::ring_buffer
port_audio_init	Q/q_io/src/audio_device.cpp	/^         port_audio_init()$/;"	f	struct:cycfi::q::detail::port_audio_init
port_audio_init	Q/q_io/src/audio_device.cpp	/^      struct port_audio_init$/;"	s	namespace:cycfi::q::detail	file:
port_audio_stream	Q/q_io/include/q_io/audio_stream.hpp	/^   class port_audio_stream : public audio_stream$/;"	c	namespace:cycfi::q
port_audio_stream	Q/q_io/src/audio_stream.cpp	/^   port_audio_stream::port_audio_stream($/;"	f	class:cycfi::q::port_audio_stream
port_midi_init	Q/q_io/src/midi_device.cpp	/^         port_midi_init()$/;"	f	struct:cycfi::q::detail::port_midi_init
port_midi_init	Q/q_io/src/midi_device.cpp	/^      struct port_midi_init$/;"	s	namespace:cycfi::q::detail	file:
portamento	Q/q_lib/include/q/support/midi.hpp	/^         portamento           = 0x41,$/;"	e	enum:cycfi::q::midi::cc::controller
portamento_control	Q/q_lib/include/q/support/midi.hpp	/^         portamento_control   = 0x54,$/;"	e	enum:cycfi::q::midi::cc::controller
portamento_time	Q/q_lib/include/q/support/midi.hpp	/^         portamento_time      = 0x05,$/;"	e	enum:cycfi::q::midi::cc::controller
portamento_time_lsb	Q/q_lib/include/q/support/midi.hpp	/^         portamento_time_lsb  = 0x25,$/;"	e	enum:cycfi::q::midi::cc::controller
portaudio_init	Q/q_io/src/audio_device.cpp	/^      port_audio_init const& portaudio_init()$/;"	f	namespace:cycfi::q::detail
portmidi_init	Q/q_io/src/midi_device.cpp	/^      port_midi_init const& portmidi_init()$/;"	f	namespace:cycfi::q::detail
position	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_reader::position()$/;"	f	class:cycfi::q::wav_reader
position	Q/q_lib/include/q/support/midi.hpp	/^      std::uint16_t  position() const  { return data[1] | (data[2] << 7); }$/;"	f	struct:cycfi::q::midi::song_position
ppData	Q/q_io/external/include/dr_wav.h	/^    void** ppData;$/;"	m	struct:__anon4
pre_gain	Q/q_lib/include/q/fx/onset_detector.hpp	/^      static constexpr auto pre_gain = 4.0f;$/;"	m	struct:cycfi::q::onset_detector
predict_frequency	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^   inline float pitch_detector::predict_frequency() const$/;"	f	class:cycfi::q::pitch_detector
predict_period	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline float period_detector::predict_period() const$/;"	f	class:cycfi::q::period_detector
predictor	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  predictor[2];$/;"	m	struct:__anon7::__anon10
predictor	Q/q_io/external/include/dr_wav.h	/^        drwav_uint16 predictor[2];$/;"	m	struct:__anon7::__anon9
preset	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   preset() const    { return data[1]; }$/;"	f	struct:cycfi::q::midi::program_change
pressure	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   pressure() const  { return data[1]; }$/;"	f	struct:cycfi::q::midi::channel_aftertouch
pressure	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   pressure() const  { return data[2]; }$/;"	f	struct:cycfi::q::midi::poly_aftertouch
prevSamples	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  prevSamples[2][2]; \/\/ The previous 2 samples for each channel (2 channels at most).$/;"	m	struct:__anon7::__anon9
process	MyPlugin.cpp	/^MyPlugin::process(const float *const *inputBuffers, Vamp::RealTime timestamp)$/;"	f	class:MyPlugin
process	Q/example/delay.cpp	/^   void process(out_channels const& out)$/;"	f	struct:delay_processor
process	Q/example/sin_synth.cpp	/^   void process(out_channels const& out)$/;"	f	struct:sin_synth
process	Q/example/square_synth.cpp	/^   void process(out_channels const& out)$/;"	f	struct:my_square_synth
process	Q/q_io/include/q_io/midi_stream.hpp	/^   inline void midi_input_stream::process(Processor&& proc)$/;"	f	class:cycfi::q::midi_input_stream
process	Q/q_lib/include/q/support/audio_stream.hpp	/^      virtual void            process(in_channels const& in) {}$/;"	f	class:cycfi::q::audio_stream
process	Q/q_lib/include/q/support/audio_stream.hpp	/^      virtual void            process(in_channels const& in, out_channels const& out) {}$/;"	f	class:cycfi::q::audio_stream
process	Q/q_lib/include/q/support/audio_stream.hpp	/^      virtual void            process(out_channels const& out) {}$/;"	f	class:cycfi::q::audio_stream
process	Q/test/agc.cpp	/^void process(std::string name, q::duration hold)$/;"	f
process	Q/test/biquad_lp.cpp	/^void process(std::string name, q::frequency base_freq)$/;"	f
process	Q/test/comb.cpp	/^void process($/;"	f
process	Q/test/comb.cpp	/^void process(std::string name, q::frequency f)$/;"	f
process	Q/test/compressor_expander.cpp	/^void process(std::string name)$/;"	f
process	Q/test/compressor_expander2.cpp	/^void process(std::string name)$/;"	f
process	Q/test/compressor_ff_fb.cpp	/^void process(std::string name)$/;"	f
process	Q/test/envelope_follower.cpp	/^void process(std::string name, q::duration hold)$/;"	f
process	Q/test/moving_average2.cpp	/^void process($/;"	f
process	Q/test/moving_average2.cpp	/^void process(std::string name, q::frequency f)$/;"	f
process	Q/test/moving_maximum2.cpp	/^void process($/;"	f
process	Q/test/moving_maximum2.cpp	/^void process(std::string name, q::frequency f)$/;"	f
process	Q/test/onset_detector.cpp	/^void process($/;"	f
process	Q/test/onset_detector.cpp	/^void process(std::string name, q::frequency f)$/;"	f
process	Q/test/peak_detector.cpp	/^void process(std::string name, q::frequency cutoff)$/;"	f
process	Q/test/period_detector.cpp	/^auto process($/;"	f
process	Q/test/period_detector.cpp	/^result_type process($/;"	f
process	Q/test/pitch_detector.cpp	/^test_result process($/;"	f
process	Q/test/pitch_detector.cpp	/^void process($/;"	f
process	Q/test/pitch_detector_ex.cpp	/^void process($/;"	f
process	Q/test/pitch_detector_ex.cpp	/^void process(std::string name, q::frequency lowest_freq)$/;"	f
process_harmonics	Q/q_lib/include/q/pitch/period_detector.hpp	/^         bool process_harmonics(info const& incoming)$/;"	f	struct:cycfi::q::detail::collector
process_harmonics_n	Q/q_lib/include/q/pitch/period_detector.hpp	/^         bool process_harmonics_n(info const& incoming)$/;"	f	struct:cycfi::q::detail::collector
processor	Q/q_lib/include/q/support/midi.hpp	/^   struct processor$/;"	s	namespace:cycfi::q::midi
program_change	Q/q_lib/include/q/support/midi.hpp	/^         program_change       = 0xC0,$/;"	e	enum:cycfi::q::midi::status::__anon17
program_change	Q/q_lib/include/q/support/midi.hpp	/^      program_change(std::uint8_t channel, std::uint8_t preset)$/;"	f	struct:cycfi::q::midi::program_change
program_change	Q/q_lib/include/q/support/midi.hpp	/^   struct program_change : message2$/;"	s	namespace:cycfi::q::midi
pulse	Q/q_lib/include/q/synth/pulse.hpp	/^   constexpr auto pulse = pulse_synth{};$/;"	m	namespace:cycfi::q
pulse_height_diff	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      static constexpr float pulse_height_diff = 0.8;$/;"	m	class:cycfi::q::zero_crossing
pulse_synth	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr pulse_synth(float width = 0.5)$/;"	f	struct:cycfi::q::pulse_synth
pulse_synth	Q/q_lib/include/q/synth/pulse.hpp	/^   struct pulse_synth : basic_pulse_synth$/;"	s	namespace:cycfi::q
pulse_threshold	Q/q_lib/include/q/pitch/period_detector.hpp	/^      static constexpr float pulse_threshold = 0.6;$/;"	m	class:cycfi::q::period_detector
pulse_width_diff	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      static constexpr float pulse_width_diff = 0.85;$/;"	m	class:cycfi::q::zero_crossing
push	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline void ring_buffer<T, Storage>::push(T val)$/;"	f	class:cycfi::q::ring_buffer
q	Q/q_io/include/q_io/audio_device.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_io/include/q_io/audio_file.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_io/include/q_io/audio_stream.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_io/include/q_io/midi_device.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_io/include/q_io/midi_stream.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_io/src/audio_device.cpp	/^namespace cycfi::q$/;"	n	class:cycfi	file:
q	Q/q_io/src/audio_file.cpp	/^namespace cycfi::q$/;"	n	class:cycfi	file:
q	Q/q_io/src/audio_stream.cpp	/^namespace cycfi::q$/;"	n	class:cycfi	file:
q	Q/q_io/src/midi_device.cpp	/^namespace cycfi::q$/;"	n	class:cycfi	file:
q	Q/q_io/src/midi_stream.cpp	/^namespace cycfi::q$/;"	n	class:cycfi	file:
q	Q/q_lib/include/q/fft/fft.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/allpass.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/biquad.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/delay.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/dynamic.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/envelope.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/feature_detection.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/lowpass.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/median.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/moving_average.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/moving_maximum.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/onset_detector.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/special.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/fx/waveshaper.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/pitch/period_detector.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/audio_stream.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/base.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/decibel.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/frequency.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/literals.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/notes.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/phase.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/support/value.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/envelope.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/pulse.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/saw.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/sin.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/square.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/synth/triangle.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/antialiasing.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/bitset.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/fractional_ring_buffer.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/interpolation.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/ring_buffer.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
q	Q/q_lib/include/q/utility/zero_crossing.hpp	/^namespace cycfi::q$/;"	n	class:cycfi
range	Q/q_lib/include/q/fx/special.hpp	/^      void range(float y1, float y2)$/;"	f	struct:cycfi::q::map
ratio	Q/q_lib/include/q/fx/dynamic.hpp	/^      void ratio(float ratio)$/;"	f	struct:cycfi::q::compressor
ratio	Q/q_lib/include/q/fx/dynamic.hpp	/^      void ratio(float ratio)$/;"	f	struct:cycfi::q::expander
ratio	Q/q_lib/include/q/fx/dynamic.hpp	/^      void ratio(float ratio)$/;"	f	struct:cycfi::q::soft_knee_compressor
raw_message	Q/q_lib/include/q/support/midi.hpp	/^   struct raw_message$/;"	s	namespace:cycfi::q::midi
read	Q/q_io/include/q_io/audio_file.hpp	/^   inline std::size_t wav_reader::read(Buffer& buffer)$/;"	f	class:cycfi::q::wav_reader
read	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_reader::read(float* data, std::uint32_t len)$/;"	f	class:cycfi::q::wav_reader
rel_within	Q/q_lib/include/q/support/base.hpp	/^   inline bool rel_within(float a, float b, float eps)$/;"	f	namespace:cycfi::q
release	Q/q_lib/include/q/fx/envelope.hpp	/^      void release(float release_, std::uint32_t sps)$/;"	f	struct:cycfi::q::envelope_follower
release	Q/q_lib/include/q/fx/envelope.hpp	/^      void release(float release_, std::uint32_t sps)$/;"	f	struct:cycfi::q::peak_envelope_follower
release	Q/q_lib/include/q/fx/onset_detector.hpp	/^      static constexpr auto release = 50_ms;$/;"	m	struct:cycfi::q::onset_detector
release	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::release()$/;"	f	class:cycfi::q::envelope
release_rate	Q/q_lib/include/q/synth/envelope.hpp	/^         duration             release_rate   = 100_ms;$/;"	m	struct:cycfi::q::envelope::config
release_rate	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::release_rate(duration rate, std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
release_rate	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::release_rate(float rate)$/;"	f	class:cycfi::q::envelope
release_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , release_state        = 2$/;"	e	enum:cycfi::q::envelope::state_enum
rep	Q/q_lib/include/q/support/value.hpp	/^      T rep;$/;"	m	struct:cycfi::q::value
reset	MyPlugin.cpp	/^MyPlugin::reset()$/;"	f	class:MyPlugin
reset	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^      void                    reset()                       { _frequency = 0.0f; }$/;"	f	class:cycfi::q::pitch_detector
reset	Q/q_lib/include/q/support/midi.hpp	/^         reset                = 0x79,$/;"	e	enum:cycfi::q::midi::cc::controller
reset	Q/q_lib/include/q/support/midi.hpp	/^         reset                = 0xFF$/;"	e	enum:cycfi::q::midi::status::__anon17
reset	Q/q_lib/include/q/support/midi.hpp	/^      reset()$/;"	f	struct:cycfi::q::midi::reset
reset	Q/q_lib/include/q/support/midi.hpp	/^   struct reset : message1$/;"	s	namespace:cycfi::q::midi
reset	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline void zero_crossing::reset()$/;"	f	class:cycfi::q::zero_crossing
resizable_container	Q/q_lib/include/q/detail/init_store.hpp	/^   struct resizable_container$/;"	s	namespace:cycfi::q::detail
resizable_container	Q/q_lib/include/q/detail/init_store.hpp	/^   struct resizable_container<C, decltype(std::declval<C>().resize(1), 0)>$/;"	s	namespace:cycfi::q::detail
reso_filter	Q/q_lib/include/q/fx/lowpass.hpp	/^      reso_filter(float f, float reso)$/;"	f	struct:cycfi::q::reso_filter
reso_filter	Q/q_lib/include/q/fx/lowpass.hpp	/^      reso_filter(frequency f, float reso, std::uint32_t sps)$/;"	f	struct:cycfi::q::reso_filter
reso_filter	Q/q_lib/include/q/fx/lowpass.hpp	/^   struct reso_filter$/;"	s	namespace:cycfi::q
resonance	Q/q_lib/include/q/fx/lowpass.hpp	/^      void resonance(float reso)$/;"	f	struct:cycfi::q::reso_filter
restart	Q/q_io/src/audio_file.cpp	/^   bool wav_reader::restart()$/;"	f	class:cycfi::q::wav_reader
result_type	Q/q_lib/include/q/fx/lowpass.hpp	/^      typedef T result_type;$/;"	t	struct:cycfi::q::fixed_pt_leaky_integrator
rhs	Q/q_lib/include/q/pitch/period_detector.hpp	/^                              period_detector(period_detector const& rhs) = default;$/;"	m	class:cycfi::q::period_detector
rhs	Q/q_lib/include/q/pitch/period_detector.hpp	/^                              period_detector(period_detector&& rhs) = default;$/;"	m	class:cycfi::q::period_detector
rhs	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^                              pitch_detector(pitch_detector const& rhs) = default;$/;"	m	class:cycfi::q::pitch_detector
rhs	Q/q_lib/include/q/pitch/pitch_detector.hpp	/^                              pitch_detector(pitch_detector&& rhs) = default;$/;"	m	class:cycfi::q::pitch_detector
rhs	Q/q_lib/include/q/support/phase.hpp	/^      constexpr phase_iterator&     operator=(phase_iterator const& rhs) = default;$/;"	m	struct:cycfi::q::phase_iterator
rhs	Q/q_lib/include/q/utility/bitset.hpp	/^                     bitset(bitset const& rhs) = default;$/;"	m	class:cycfi::q::bitset
rhs	Q/q_lib/include/q/utility/bitset.hpp	/^                     bitset(bitset&& rhs) = default;$/;"	m	class:cycfi::q::bitset
rhs	Q/q_lib/include/q/utility/bitset.hpp	/^      bitset&        operator=(bitset const& rhs) = default;$/;"	m	class:cycfi::q::bitset
rhs	Q/q_lib/include/q/utility/bitset.hpp	/^      bitset&        operator=(bitset&& rhs) = default;$/;"	m	class:cycfi::q::bitset
rhs	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      ring_buffer&      operator=(ring_buffer const& rhs) = default;$/;"	m	class:cycfi::q::ring_buffer
rhs	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      ring_buffer&      operator=(ring_buffer&& rhs) = default;$/;"	m	class:cycfi::q::ring_buffer
rhs	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      ring_buffer(ring_buffer const& rhs) = default;$/;"	m	class:cycfi::q::ring_buffer
rhs	Q/q_lib/include/q/utility/ring_buffer.hpp	/^      ring_buffer(ring_buffer&& rhs) = default;$/;"	m	class:cycfi::q::ring_buffer
rhs	Q/q_lib/include/q/utility/zero_crossing.hpp	/^                           zero_crossing(zero_crossing const& rhs) = default;$/;"	m	class:cycfi::q::zero_crossing
rhs	Q/q_lib/include/q/utility/zero_crossing.hpp	/^                           zero_crossing(zero_crossing&& rhs) = default;$/;"	m	class:cycfi::q::zero_crossing
ring_buffer	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   class ring_buffer$/;"	c	namespace:cycfi::q
ring_buffer	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline ring_buffer<T, Storage>::ring_buffer()$/;"	f	class:cycfi::q::ring_buffer
ring_buffer	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline ring_buffer<T, Storage>::ring_buffer(std::size_t size)$/;"	f	class:cycfi::q::ring_buffer
rising_edge	Q/q_lib/include/q/fx/special.hpp	/^   struct rising_edge$/;"	s	namespace:cycfi::q
rpn_lsb	Q/q_lib/include/q/support/midi.hpp	/^         rpn_lsb              = 0x64,$/;"	e	enum:cycfi::q::midi::cc::controller
rpn_msb	Q/q_lib/include/q/support/midi.hpp	/^         rpn_msb              = 0x65,$/;"	e	enum:cycfi::q::midi::cc::controller
running	Q/example/example.hpp	/^bool running = true;$/;"	v
sampleRate	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 sampleRate;$/;"	m	struct:__anon5
sampleRate	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 sampleRate;$/;"	m	struct:__anon6
sampleRate	Q/q_io/external/include/dr_wav.h	/^    drwav_uint32 sampleRate;$/;"	m	struct:__anon7
sample_interpolation	Q/q_lib/include/q/utility/interpolation.hpp	/^   namespace sample_interpolation$/;"	n	namespace:cycfi::q
sampling_rate	Q/q_io/src/audio_stream.cpp	/^   std::uint32_t port_audio_stream::sampling_rate() const$/;"	f	class:cycfi::q::port_audio_stream
save	Q/q_lib/include/q/pitch/period_detector.hpp	/^         void save(info const& incoming)$/;"	f	struct:cycfi::q::detail::collector
saw	Q/q_lib/include/q/synth/saw.hpp	/^   constexpr auto saw = saw_synth{};$/;"	m	namespace:cycfi::q
saw_synth	Q/q_lib/include/q/synth/saw.hpp	/^   struct saw_synth$/;"	s	namespace:cycfi::q
schmitt_trigger	Q/q_lib/include/q/fx/feature_detection.hpp	/^      schmitt_trigger(decibel hysteresis)$/;"	f	struct:cycfi::q::schmitt_trigger
schmitt_trigger	Q/q_lib/include/q/fx/feature_detection.hpp	/^      schmitt_trigger(float hysteresis)$/;"	f	struct:cycfi::q::schmitt_trigger
schmitt_trigger	Q/q_lib/include/q/fx/feature_detection.hpp	/^   struct schmitt_trigger$/;"	s	namespace:cycfi::q
scramble	Q/q_lib/include/q/fft/fft.hpp	/^      inline void scramble(double* data)$/;"	f	namespace:cycfi::q::detail
seek	Q/q_io/src/audio_file.cpp	/^   bool wav_reader::seek(std::uint64_t target)$/;"	f	class:cycfi::q::wav_reader
selectProgram	MyPlugin.cpp	/^MyPlugin::selectProgram(string name)$/;"	f	class:MyPlugin
sense	Q/q_lib/include/q/fx/special.hpp	/^      float sense, wc, g0;$/;"	m	struct:cycfi::q::dynamic_smoother
set	Q/q_lib/include/q/support/phase.hpp	/^   constexpr void phase_iterator::set(frequency freq, std::uint32_t sps)$/;"	f	class:cycfi::q::phase_iterator
set	Q/q_lib/include/q/utility/bitset.hpp	/^   inline void bitset<T>::set(std::size_t i, bool val)$/;"	f	class:cycfi::q::bitset
set	Q/q_lib/include/q/utility/bitset.hpp	/^   inline void bitset<T>::set(std::size_t i, std::size_t n, bool val)$/;"	f	class:cycfi::q::bitset
setParameter	MyPlugin.cpp	/^MyPlugin::setParameter(string identifier, float value) $/;"	f	class:MyPlugin
set_bitstream	Q/q_lib/include/q/pitch/period_detector.hpp	/^   inline void period_detector::set_bitstream()$/;"	f	class:cycfi::q::period_detector
set_default_device	Q/q_io/src/midi_stream.cpp	/^   void midi_input_stream::set_default_device(int id)$/;"	f	class:cycfi::q::midi_input_stream
shift	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline void zero_crossing::shift(std::size_t n)$/;"	f	class:cycfi::q::zero_crossing
signal_handler	Q/example/example.hpp	/^void signal_handler(int sig)$/;"	f
similar	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline bool zero_crossing::info::similar(info const& next) const$/;"	f	class:cycfi::q::zero_crossing::info
sin	Q/q_lib/include/q/fft/fft.hpp	/^      constexpr double sin(unsigned B, unsigned A)$/;"	f	namespace:cycfi::q::detail
sin	Q/q_lib/include/q/fx/biquad.hpp	/^         double omega, sin, cos, alpha;$/;"	m	struct:cycfi::q::detail::config_biquad
sin	Q/q_lib/include/q/synth/sin.hpp	/^   constexpr auto sin = sin_synth{};$/;"	m	namespace:cycfi::q
sin_cos_series	Q/q_lib/include/q/fft/fft.hpp	/^      constexpr double sin_cos_series(unsigned M, unsigned N, unsigned B, unsigned A)$/;"	f	namespace:cycfi::q::detail
sin_gen	Q/q_lib/include/q/detail/sin_table.hpp	/^   constexpr float sin_gen(phase ph)$/;"	f	namespace:cycfi::q::detail
sin_synth	Q/example/sin_synth.cpp	/^   sin_synth(q::frequency freq)$/;"	f	struct:sin_synth
sin_synth	Q/example/sin_synth.cpp	/^struct sin_synth : q::port_audio_stream$/;"	s	file:
sin_synth	Q/q_lib/include/q/synth/sin.hpp	/^   struct sin_synth$/;"	s	namespace:cycfi::q
sin_table	Q/q_lib/include/q/detail/sin_table.hpp	/^   constexpr float sin_table[] =$/;"	m	namespace:cycfi::q::detail
size	Q/q_lib/include/q/fx/moving_average.hpp	/^      std::size_t size() const$/;"	f	struct:cycfi::q::moving_average
size	Q/q_lib/include/q/support/audio_stream.hpp	/^      std::size_t          size() const   { return _size; }$/;"	f	class:cycfi::q::audio_channels
size	Q/q_lib/include/q/support/midi.hpp	/^      static int const size = size_;$/;"	m	struct:cycfi::q::midi::message
size	Q/q_lib/include/q/utility/bitset.hpp	/^   inline std::size_t bitset<T>::size() const$/;"	f	class:cycfi::q::bitset
size	Q/q_lib/include/q/utility/ring_buffer.hpp	/^   inline std::size_t ring_buffer<T, Storage>::size() const$/;"	f	class:cycfi::q::ring_buffer
sizeInBytes	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 sizeInBytes;$/;"	m	struct:__anon11
sleep	Q/q_lib/include/q/support/frequency.hpp	/^   inline void sleep(duration t)$/;"	f	namespace:cycfi::q
soft_clip	Q/q_lib/include/q/fx/waveshaper.hpp	/^   struct soft_clip : clip$/;"	s	namespace:cycfi::q
soft_knee_compressor	Q/q_lib/include/q/fx/dynamic.hpp	/^      constexpr soft_knee_compressor(decibel threshold, decibel width, float ratio)$/;"	f	struct:cycfi::q::soft_knee_compressor
soft_knee_compressor	Q/q_lib/include/q/fx/dynamic.hpp	/^   struct soft_knee_compressor$/;"	s	namespace:cycfi::q
soft_pedal	Q/q_lib/include/q/support/midi.hpp	/^         soft_pedal           = 0x43,$/;"	e	enum:cycfi::q::midi::cc::controller
song_number	Q/q_lib/include/q/support/midi.hpp	/^      std::uint16_t  song_number() const  { return data[1]; }$/;"	f	struct:cycfi::q::midi::song_select
song_position	Q/q_lib/include/q/support/midi.hpp	/^         song_position        = 0xF2,$/;"	e	enum:cycfi::q::midi::status::__anon17
song_position	Q/q_lib/include/q/support/midi.hpp	/^      song_position(std::uint16_t position)$/;"	f	struct:cycfi::q::midi::song_position
song_position	Q/q_lib/include/q/support/midi.hpp	/^      song_position(std::uint8_t lsb, std::uint8_t msb)$/;"	f	struct:cycfi::q::midi::song_position
song_position	Q/q_lib/include/q/support/midi.hpp	/^   struct song_position : message3$/;"	s	namespace:cycfi::q::midi
song_select	Q/q_lib/include/q/support/midi.hpp	/^         song_select          = 0xF3,$/;"	e	enum:cycfi::q::midi::status::__anon17
song_select	Q/q_lib/include/q/support/midi.hpp	/^      song_select(std::uint8_t song_number)$/;"	f	struct:cycfi::q::midi::song_select
song_select	Q/q_lib/include/q/support/midi.hpp	/^   struct song_select : message2$/;"	s	namespace:cycfi::q::midi
sostenuto	Q/q_lib/include/q/support/midi.hpp	/^         sostenuto            = 0x42,$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_1	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_1   = 0x46,  \/\/ default: sound variation$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_10	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_10  = 0x4F,  \/\/ no default$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_2	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_2   = 0x47,  \/\/ default: timbre \/ harmonic content$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_3	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_3   = 0x48,  \/\/ default: release time$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_4	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_4   = 0x49,  \/\/ default: attack time$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_5	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_5   = 0x4A,  \/\/ default: brightness$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_6	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_6   = 0x4B,  \/\/ no default$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_7	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_7   = 0x4C,  \/\/ no default$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_8	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_8   = 0x4D,  \/\/ no default$/;"	e	enum:cycfi::q::midi::cc::controller
sound_controller_9	Q/q_lib/include/q/support/midi.hpp	/^         sound_controller_9   = 0x4E,  \/\/ no default$/;"	e	enum:cycfi::q::midi::cc::controller
sps	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_base::sps() const$/;"	f	class:cycfi::q::wav_base
sps	Q/test/period_detector.cpp	/^constexpr auto sps = 44100;$/;"	v
sps	Q/test/pitch_detector.cpp	/^constexpr auto sps = 44100;$/;"	v
square	Q/q_lib/include/q/synth/square.hpp	/^   constexpr auto square = square_synth{};$/;"	m	namespace:cycfi::q
square_synth	Q/q_lib/include/q/synth/square.hpp	/^   struct square_synth$/;"	s	namespace:cycfi::q
start	Q/q_io/src/audio_stream.cpp	/^   void port_audio_stream::start()$/;"	f	class:cycfi::q::port_audio_stream
start	Q/q_lib/include/q/support/midi.hpp	/^         start                = 0xFA,$/;"	e	enum:cycfi::q::midi::status::__anon17
start	Q/q_lib/include/q/support/midi.hpp	/^      start()$/;"	f	struct:cycfi::q::midi::start
start	Q/q_lib/include/q/support/midi.hpp	/^   struct start : message1$/;"	s	namespace:cycfi::q::midi
state	Q/q_lib/include/q/synth/envelope.hpp	/^   inline envelope::state_enum envelope::state() const$/;"	f	class:cycfi::q::envelope
state_enum	Q/q_lib/include/q/synth/envelope.hpp	/^      enum state_enum$/;"	g	class:cycfi::q::envelope
status	Q/q_lib/include/q/support/midi.hpp	/^   namespace status$/;"	n	namespace:cycfi::q::midi
stepIndex	Q/q_io/external/include/dr_wav.h	/^        drwav_int32  stepIndex[2];$/;"	m	struct:__anon7::__anon10
stop	Q/q_io/src/audio_stream.cpp	/^   void port_audio_stream::stop()$/;"	f	class:cycfi::q::port_audio_stream
stop	Q/q_lib/include/q/support/midi.hpp	/^         stop                 = 0xFC,$/;"	e	enum:cycfi::q::midi::status::__anon17
stop	Q/q_lib/include/q/support/midi.hpp	/^      stop()$/;"	f	struct:cycfi::q::midi::stop
stop	Q/q_lib/include/q/support/midi.hpp	/^   struct stop : message1$/;"	s	namespace:cycfi::q::midi
subFormat	Q/q_io/external/include/dr_wav.h	/^    drwav_uint8 subFormat[16];$/;"	m	struct:__anon6
sustain	Q/q_lib/include/q/support/midi.hpp	/^         sustain              = 0x40,$/;"	e	enum:cycfi::q::midi::cc::controller
sustain_level	Q/q_lib/include/q/synth/envelope.hpp	/^         decibel              sustain_level  = -6_dB;$/;"	m	struct:cycfi::q::envelope::config
sustain_level	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   sustain_level() const   { return _sustain_level; }$/;"	f	class:cycfi::q::envelope
sustain_level	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::sustain_level(float level)$/;"	f	class:cycfi::q::envelope
sustain_rate	Q/q_lib/include/q/synth/envelope.hpp	/^         duration             sustain_rate   = 50_s;$/;"	m	struct:cycfi::q::envelope::config
sustain_rate	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::sustain_rate(duration rate, std::uint32_t sps)$/;"	f	class:cycfi::q::envelope
sustain_state	Q/q_lib/include/q/synth/envelope.hpp	/^       , sustain_state        = 3$/;"	e	enum:cycfi::q::envelope::state_enum
sysex	Q/q_lib/include/q/support/midi.hpp	/^         sysex                = 0xF0,$/;"	e	enum:cycfi::q::midi::status::__anon17
sysex_end	Q/q_lib/include/q/support/midi.hpp	/^         sysex_end            = 0xF7,$/;"	e	enum:cycfi::q::midi::status::__anon17
test_result	Q/test/pitch_detector.cpp	/^struct test_result$/;"	s	file:
threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      void threshold(decibel val)$/;"	f	struct:cycfi::q::compressor
threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      void threshold(decibel val)$/;"	f	struct:cycfi::q::expander
threshold	Q/q_lib/include/q/fx/dynamic.hpp	/^      void threshold(decibel val)$/;"	f	struct:cycfi::q::soft_knee_compressor
time	Q/q_io/include/q_io/midi_stream.hpp	/^         std::size_t       time;$/;"	m	struct:cycfi::q::midi_input_stream::event
time	Q/q_io/src/audio_stream.cpp	/^   duration port_audio_stream::time() const$/;"	f	class:cycfi::q::port_audio_stream
timing_tick	Q/q_lib/include/q/support/midi.hpp	/^         timing_tick          = 0xF8,$/;"	e	enum:cycfi::q::midi::status::__anon17
timing_tick	Q/q_lib/include/q/support/midi.hpp	/^      timing_tick()$/;"	f	struct:cycfi::q::midi::timing_tick
timing_tick	Q/q_lib/include/q/support/midi.hpp	/^   struct timing_tick : message1$/;"	s	namespace:cycfi::q::midi
totalSampleCount	Q/q_io/external/include/dr_wav.h	/^    drwav_uint64 totalSampleCount;$/;"	m	struct:__anon7
translatedFormatTag	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 translatedFormatTag;$/;"	m	struct:__anon7
triangle	Q/q_lib/include/q/synth/triangle.hpp	/^   constexpr auto triangle = triangle_synth{};$/;"	m	namespace:cycfi::q
triangle_synth	Q/q_lib/include/q/synth/triangle.hpp	/^   struct triangle_synth$/;"	s	namespace:cycfi::q
trigger	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::trigger(float level, int auto_decay)$/;"	f	class:cycfi::q::envelope
try_sub_harmonic	Q/q_lib/include/q/pitch/period_detector.hpp	/^         bool try_sub_harmonic(info const& incoming)$/;"	f	struct:cycfi::q::detail::collector
tune_request	Q/q_lib/include/q/support/midi.hpp	/^         tune_request         = 0xF6,$/;"	e	enum:cycfi::q::midi::status::__anon17
tune_request	Q/q_lib/include/q/support/midi.hpp	/^      tune_request()$/;"	f	struct:cycfi::q::midi::tune_request
tune_request	Q/q_lib/include/q/support/midi.hpp	/^   struct tune_request : message1$/;"	s	namespace:cycfi::q::midi
undefined_edge	Q/q_lib/include/q/utility/zero_crossing.hpp	/^      static constexpr auto undefined_edge = int_min<int>();$/;"	m	class:cycfi::q::zero_crossing
update_attack	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::update_attack()$/;"	f	class:cycfi::q::envelope
update_decay	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::update_decay()$/;"	f	class:cycfi::q::envelope
update_legato	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::update_legato()$/;"	f	class:cycfi::q::envelope
update_peak	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline void zero_crossing::info::update_peak(float s, std::size_t frame)$/;"	f	class:cycfi::q::zero_crossing::info
update_release	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::update_release()$/;"	f	class:cycfi::q::envelope
update_state	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline void zero_crossing::update_state(float s)$/;"	f	class:cycfi::q::zero_crossing
update_sustain	Q/q_lib/include/q/synth/envelope.hpp	/^   inline void envelope::update_sustain()$/;"	f	class:cycfi::q::envelope
v2dil	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define v2dil(/;"	d
v4sf	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef __m128 v4sf;$/;"	t	namespace:__anon13
v4sf_fabs	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define v4sf_fabs(/;"	d
v4sf_index	Q/q_lib/include/q/detail/fast_math.hpp	/^#define v4sf_index(/;"	d
v4sf_to_v4si	Q/q_lib/include/q/detail/fast_math.hpp	/^#define v4sf_to_v4si /;"	d
v4sfindexer	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	t	namespace:__anon13	typeref:union:__anon13::__anon14
v4sfl	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define v4sfl(/;"	d
v4sfv4sipun	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	t	namespace:__anon13	typeref:union:__anon13::__anon16
v4si	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef __m128i v4si;$/;"	t	namespace:__anon13
v4si_index	Q/q_lib/include/q/detail/fast_math.hpp	/^#define v4si_index(/;"	d
v4si_to_v4sf	Q/q_lib/include/q/detail/fast_math.hpp	/^#define v4si_to_v4sf /;"	d
v4siindexer	Q/q_lib/include/q/detail/fast_math.hpp	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	t	namespace:__anon13	typeref:union:__anon13::__anon15
v4sil	Q/q_lib/include/q/detail/fast_math.hpp	/^  #define v4sil(/;"	d
val	Q/q_lib/include/q/fx/biquad.hpp	/^      double val; \/\/ in octaves$/;"	m	struct:cycfi::q::bw
val	Q/q_lib/include/q/support/decibel.hpp	/^      double val = 0.0f;$/;"	m	struct:cycfi::q::decibel
validBitsPerSample	Q/q_io/external/include/dr_wav.h	/^    drwav_uint16 validBitsPerSample;$/;"	m	struct:__anon6
value	Q/q_lib/include/q/support/midi.hpp	/^      std::uint16_t  value() const     { return data[1] | (data[2] << 7); }$/;"	f	struct:cycfi::q::midi::pitch_bend
value	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   value() const        { return data[2]; }$/;"	f	struct:cycfi::q::midi::control_change
value	Q/q_lib/include/q/support/value.hpp	/^      constexpr explicit            value(T val = T(0)) : rep(val) {}$/;"	f	struct:cycfi::q::value
value	Q/q_lib/include/q/support/value.hpp	/^   struct value$/;"	s	namespace:cycfi::q
value_size	Q/q_lib/include/q/utility/bitset.hpp	/^      static constexpr auto value_size = CHAR_BIT * sizeof(T);$/;"	m	class:cycfi::q::bitset
value_size	Q/q_lib/include/q/utility/bitstream_acf.hpp	/^      static constexpr auto value_size = bitset<>::value_size;$/;"	m	struct:cycfi::q::bitstream_acf
vampGetPluginDescriptor	plugins.cpp	/^vampGetPluginDescriptor(unsigned int version, unsigned int index)$/;"	f
velocity	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   velocity() const  { return data[2]; }$/;"	f	struct:cycfi::q::midi::note_off
velocity	Q/q_lib/include/q/support/midi.hpp	/^      std::uint8_t   velocity() const  { return data[2]; }$/;"	f	struct:cycfi::q::midi::note_on
velocity	Q/q_lib/include/q/synth/envelope.hpp	/^      float                   velocity() const        { return _level; }$/;"	f	class:cycfi::q::envelope
verbosity	Q/test/pitch_detector.cpp	/^constexpr auto verbosity = 0;$/;"	v
vfastcos	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastcos (const v4sf x)$/;"	f
vfastcosfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastcosfull (const v4sf x)$/;"	f
vfastcosh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastcosh (const v4sf p)$/;"	f
vfastdigamma	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastdigamma (v4sf x)$/;"	f
vfastercos	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastercos (v4sf x)$/;"	f
vfastercosfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastercosfull (const v4sf x)$/;"	f
vfastercosh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastercosh (const v4sf p)$/;"	f
vfasterdigamma	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterdigamma (v4sf x)$/;"	f
vfastererf	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastererf (const v4sf x)$/;"	f
vfastererfc	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastererfc (const v4sf x)$/;"	f
vfasterexp	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterexp (const v4sf p)$/;"	f
vfasterf	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterf (v4sf x)$/;"	f
vfasterfc	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterfc (v4sf x)$/;"	f
vfasterinverseerf	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterinverseerf (v4sf x)$/;"	f
vfasterlambertw	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterlambertw (v4sf x)$/;"	f
vfasterlambertwexpx	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterlambertwexpx (v4sf x)$/;"	f
vfasterlgamma	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterlgamma (v4sf x)$/;"	f
vfasterlog	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterlog (v4sf x)$/;"	f
vfasterlog2	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterlog2 (v4sf x)$/;"	f
vfasterpow	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterpow (const v4sf x,$/;"	f
vfasterpow2	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasterpow2 (const v4sf p)$/;"	f
vfastersigmoid	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastersigmoid (const v4sf x)$/;"	f
vfastersin	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastersin (const v4sf x)$/;"	f
vfastersinfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastersinfull (const v4sf x)$/;"	f
vfastersinh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastersinh (const v4sf p)$/;"	f
vfastertan	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastertan (const v4sf x)$/;"	f
vfastertanfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastertanfull (const v4sf x)$/;"	f
vfastertanh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastertanh (const v4sf p)$/;"	f
vfastexp	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastexp (const v4sf p)$/;"	f
vfastinverseerf	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastinverseerf (v4sf x)$/;"	f
vfastlambertw	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastlambertw (v4sf x)$/;"	f
vfastlambertwexpx	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastlambertwexpx (v4sf x)$/;"	f
vfastlgamma	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastlgamma (v4sf x)$/;"	f
vfastlog	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastlog (v4sf x)$/;"	f
vfastlog2	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastlog2 (v4sf x)$/;"	f
vfastpow	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastpow (const v4sf x,$/;"	f
vfastpow2	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastpow2 (const v4sf p)$/;"	f
vfastsigmoid	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastsigmoid (const v4sf x)$/;"	f
vfastsin	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastsin (const v4sf x)$/;"	f
vfastsinfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastsinfull (const v4sf x)$/;"	f
vfastsinh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfastsinh (const v4sf p)$/;"	f
vfasttan	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasttan (const v4sf x)$/;"	f
vfasttanfull	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasttanfull (const v4sf x)$/;"	f
vfasttanh	Q/q_lib/include/q/detail/fast_math.hpp	/^vfasttanh (const v4sf p)$/;"	f
wav_base	Q/q_io/include/q_io/audio_file.hpp	/^   class wav_base$/;"	c	namespace:cycfi::q
wav_base	Q/q_io/src/audio_file.cpp	/^   wav_base::wav_base()$/;"	f	class:cycfi::q::wav_base
wav_impl	Q/q_io/src/audio_file.cpp	/^   struct wav_impl : drwav {};$/;"	s	namespace:cycfi::q	file:
wav_memory	Q/q_io/include/q_io/audio_file.hpp	/^      wav_memory(std::string filename, std::size_t buff_size = 1024)$/;"	f	class:cycfi::q::wav_memory
wav_memory	Q/q_io/include/q_io/audio_file.hpp	/^   class wav_memory : private wav_reader$/;"	c	namespace:cycfi::q
wav_memory	Q/q_io/include/q_io/audio_file.hpp	/^   inline wav_memory::wav_memory(char const* filename, std::size_t buff_size)$/;"	f	class:cycfi::q::wav_memory
wav_reader	Q/q_io/include/q_io/audio_file.hpp	/^      wav_reader(std::string filename)$/;"	f	class:cycfi::q::wav_reader
wav_reader	Q/q_io/include/q_io/audio_file.hpp	/^   class wav_reader : public wav_base$/;"	c	namespace:cycfi::q
wav_reader	Q/q_io/src/audio_file.cpp	/^   wav_reader::wav_reader(char const* filename)$/;"	f	class:cycfi::q::wav_reader
wav_writer	Q/q_io/include/q_io/audio_file.hpp	/^      wav_writer($/;"	f	class:cycfi::q::wav_writer
wav_writer	Q/q_io/include/q_io/audio_file.hpp	/^   class wav_writer : public wav_base$/;"	c	namespace:cycfi::q
wav_writer	Q/q_io/src/audio_file.cpp	/^   wav_writer::wav_writer($/;"	f	class:cycfi::q::wav_writer
wc	Q/q_lib/include/q/fx/special.hpp	/^      float sense, wc, g0;$/;"	m	struct:cycfi::q::dynamic_smoother
width	Q/q_lib/include/q/fx/dynamic.hpp	/^      void width(decibel val)$/;"	f	struct:cycfi::q::soft_knee_compressor
width	Q/q_lib/include/q/synth/pulse.hpp	/^      constexpr void width(float width)$/;"	f	struct:cycfi::q::basic_pulse_synth
window_comparator	Q/q_lib/include/q/fx/feature_detection.hpp	/^      window_comparator(decibel low, decibel high)$/;"	f	struct:cycfi::q::window_comparator
window_comparator	Q/q_lib/include/q/fx/feature_detection.hpp	/^      window_comparator(float low, float high)$/;"	f	struct:cycfi::q::window_comparator
window_comparator	Q/q_lib/include/q/fx/feature_detection.hpp	/^   struct window_comparator$/;"	s	namespace:cycfi::q
window_size	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline std::size_t zero_crossing::window_size() const$/;"	f	class:cycfi::q::zero_crossing
write	Q/q_io/include/q_io/audio_file.hpp	/^   inline std::size_t wav_writer::write(Buffer const& buffer)$/;"	f	class:cycfi::q::wav_writer
write	Q/q_io/src/audio_file.cpp	/^   std::size_t wav_writer::write(float const* data, std::uint32_t len)$/;"	f	class:cycfi::q::wav_writer
x	Q/q_lib/include/q/fx/special.hpp	/^      T x = 0.0f;$/;"	m	struct:cycfi::q::fast_downsample
x	Q/q_lib/include/q/fx/special.hpp	/^      float x = 0.0f;   \/\/ delayed input sample$/;"	m	struct:cycfi::q::dc_block
x	Q/q_lib/include/q/fx/special.hpp	/^      float x; \/\/ delayed input sample$/;"	m	struct:cycfi::q::differentiator
x1	Q/q_lib/include/q/fx/allpass.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::polyphase_allpass
x1	Q/q_lib/include/q/fx/biquad.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::biquad
x2	Q/q_lib/include/q/fx/allpass.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::polyphase_allpass
x2	Q/q_lib/include/q/fx/biquad.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::biquad
y	Q/q_lib/include/q/fx/allpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::one_pole_allpass
y	Q/q_lib/include/q/fx/delay.hpp	/^      float y = 0.0f;$/;"	m	struct:cycfi::q::delay1
y	Q/q_lib/include/q/fx/envelope.hpp	/^      float y = 0.0f, _attack, _release;$/;"	m	struct:cycfi::q::envelope_follower
y	Q/q_lib/include/q/fx/envelope.hpp	/^      float y = 0.0f, _release;$/;"	m	struct:cycfi::q::peak_envelope_follower
y	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool        y = 0;$/;"	m	struct:cycfi::q::schmitt_trigger
y	Q/q_lib/include/q/fx/feature_detection.hpp	/^      bool y = 0;$/;"	m	struct:cycfi::q::window_comparator
y	Q/q_lib/include/q/fx/lowpass.hpp	/^      T y = 0;$/;"	m	struct:cycfi::q::fixed_pt_leaky_integrator
y	Q/q_lib/include/q/fx/lowpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::leaky_integrator
y	Q/q_lib/include/q/fx/lowpass.hpp	/^      float y = 0.0f, a;$/;"	m	struct:cycfi::q::one_pole_lowpass
y	Q/q_lib/include/q/fx/moving_average.hpp	/^      float y = 0.0f;$/;"	m	struct:cycfi::q::exp_moving_average
y	Q/q_lib/include/q/fx/special.hpp	/^      float y = 0.0f;   \/\/ current output value$/;"	m	struct:cycfi::q::integrator
y	Q/q_lib/include/q/fx/special.hpp	/^      float y = 0.0f;   \/\/ current value$/;"	m	struct:cycfi::q::dc_block
y1	Q/q_lib/include/q/fx/allpass.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::polyphase_allpass
y1	Q/q_lib/include/q/fx/biquad.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::biquad
y2	Q/q_lib/include/q/fx/allpass.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::polyphase_allpass
y2	Q/q_lib/include/q/fx/biquad.hpp	/^      float x1, x2, y1, y2;$/;"	m	struct:cycfi::q::biquad
zero_cross	Q/q_lib/include/q/fx/feature_detection.hpp	/^      zero_cross(decibel hysteresis)$/;"	f	struct:cycfi::q::zero_cross
zero_cross	Q/q_lib/include/q/fx/feature_detection.hpp	/^      zero_cross(float hysteresis)$/;"	f	struct:cycfi::q::zero_cross
zero_cross	Q/q_lib/include/q/fx/feature_detection.hpp	/^   struct zero_cross$/;"	s	namespace:cycfi::q
zero_crossing	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   class zero_crossing$/;"	c	namespace:cycfi::q
zero_crossing	Q/q_lib/include/q/utility/zero_crossing.hpp	/^   inline zero_crossing::zero_crossing(decibel hysteresis, std::size_t window)$/;"	f	class:cycfi::q::zero_crossing
~MyPlugin	MyPlugin.cpp	/^MyPlugin::~MyPlugin()$/;"	f	class:MyPlugin
~midi_input_stream	Q/q_io/src/midi_stream.cpp	/^   midi_input_stream::~midi_input_stream()$/;"	f	class:cycfi::q::midi_input_stream
~port_audio_init	Q/q_io/src/audio_device.cpp	/^         ~port_audio_init()$/;"	f	struct:cycfi::q::detail::port_audio_init
~port_audio_stream	Q/q_io/src/audio_stream.cpp	/^   port_audio_stream::~port_audio_stream()$/;"	f	class:cycfi::q::port_audio_stream
~port_midi_init	Q/q_io/src/midi_device.cpp	/^         ~port_midi_init()$/;"	f	struct:cycfi::q::detail::port_midi_init
~wav_base	Q/q_io/src/audio_file.cpp	/^   wav_base::~wav_base()$/;"	f	class:cycfi::q::wav_base
